nia-amar-wfe (2023-11-16 19:29 GMT-5) - Transcript
Attendees
Brian Kimbrow, Chantrice L, Daniel Perez, Elgin Sharper, Gregory Robertson Jr, Iris Coats, Krystal Jefferson, Lewis Benson, Lewis Benson's Presentation, Umar Z
Transcript
This editable transcript was computer generated and might contain errors. People can also change the text after it was created.
Lewis Benson: Hey and welcome to week five day four. We're gonna be talking a lot more about deployments today. We briefly covered it yesterday near the end. I went into how you could deploy a markdown file as an actual web page. Today it's going to be kind of more of a deep dive into deploying static sites using GitHub pages. and we're also going to just kind of warm up today with one of those contributions to open source. I just created my own repo for this because finding a repo and then finding something that actually needs fixed is sometimes a little bit time-consuming to do so, I'll share this link.
Lewis Benson: And then if everyone could just kind of code along with me for this first part. We're just gonna go through Fork to repo and follow all the instructions that are listed in the readme file. So I'll put this link and
Lewis Benson: there and in here and I'm going to share the screen so we can see what's going on.
Lewis Benson: So I put the link in the incall messages and in the October to cohort so if everyone could go to that link, this will take you to this repo that you see here. And it's very similar to the one we did day one, but this one doesn't have 20,000 other developers on it. It's not using any sort of Automation and I'll be able to see exactly what's happening whenever we're working on this since it's on my own private repo. So if you just go to that link, you'll hit the fork button next. after you visit that link
Lewis Benson: I'm adding the word forked here because I already have the repo name. how to put this in an organization. I think. I will place it.
Lewis Benson: and we're just gonna copy the main branch only and for anyone who just joined in I put a link inside of the October cohort 2 Channel and also inside of the in-call messages here. This link is for our little warm-up today. I just want to go through contributing to open source. What this workflow looks like it's also the same workflow you would use if you're contributing to a project that you're not a member of so maybe you have a project that you were working on and you're no longer one of the collaborators, but you needed to add some final touches. This is the kind of the workflow you would go through with that you could also do this for potential code challenges from interviewers. They may ask you to contribute to their project in some way. And whatever meaningful contributions you add to their project would be reviewed by their hiring team.
Lewis Benson: So this is a good exercise just to kind of get warmed up. So once you visit the URL, you'll click the fork button. I had to switch my owner over to a organization just because I'm the owner of the repo and I can't Fork my own repo as myself. It doesn't really make sense so I can just hit create Fork.
Lewis Benson: And as soon as this is done. Forking I'm now on it. This is my organization name and then over here is the repo name. This would normally be your username up here. So you want to make sure that it has your username listed and it has the name of the repo here as open source project. And again I ask everyone to follow along with this too. That way we can all get this practice in also make sure it has where Trump right here just to confirm you're in the right place as long as it says forked from then that this worked out So the next step I'm going to go to code and I'm going to get the URL because I need to clone this down in order for this So to clone it down. I need to navigate to my projects folder.
Lewis Benson: So I'm going to open up my Explorer and go to projects and when I'm in the projects folder, I'm going to open my terminal here so that I can clone it to this location. For anyone using vs code you may have to go to this folder in your vs code and then use your terminal from there. If that's the case, you'll have to change up the workflow a little bit by going into your vs code. And I'll show that real quick just for those who are doing that. file Open oops. I got lost a pump up their file open folder. Projects I'm going to select my projects folder and then I can see all of my projects are listed here in my vs code. And then I would go to terminal new terminal.
00:05:00
Lewis Benson: And then open up my get bash this way. This is for anyone who's using your integrated vs code terminal. This is where you would get clone I'm going to use my normal terminal by right clicking in my projects folder. I'm going to get back here. And I'm going to say get. cologne and I'm going to paste in that link and it's probably gonna make me copy it again. It actually worked. And I'm just going to press enter.
Lewis Benson: And I should see that project added to my projects folder here and here it is open source project. So I'm going to CDM to that.
Lewis Benson: And then I'm going to use code space. And put a period so it's just code dot. This will open vs code in the dot directory and the dot directory is your working directory. It's your current location.
Lewis Benson: Okay, so my vs code opened and that directory. And once we're in here, the readme has all the instructions, so if I need to reference these I can.
Lewis Benson: So in the instructions, We first forked it we cloned it down. So now We're in the repository. I navigated into it with CD. And now it says to create a new Branch so to do that. I'm going to open up my terminal. And my terminal is located in the root level of my current project again, you can open if you have your vs code listed with the correct folder right now and you don't have all of the folders open, then you can go to And open new terminal if you see all of your projects folders on the left hand side, you won't be able to do that. And what you'll have to do is go to file open folder and select the project again in And this is for those who are working directly in the vs code terminal. You'll have to reselect this folder to make sure you're in the correct directory.
Lewis Benson: I have my main terminal already open to the current project and I can see my open source project folder here. If I do an LS space - A to list all of my files is in that folder. I can see the readme file and the contributions file. So I know that I'm in the correct location and I can also see the main branch listed here inside of my terminal. So now that I confirm that I'm in the right place. I'm going to create a new Branch using get switch then this means switch branches. I'm going to put the C flag on it for create. And then I'm going to put in my name as the branch name. And I'm going to enter here. And it says switched to a new Branch Lewis and I can see that new Branch Lewis is listed instead of Main.
Lewis Benson: now that I'm on a new Branch I can contribute to this open source project and create a pull request to merge this end to the main repo. So according to the instructions we're going to put Your name and a finer geeky fact inside of the contributions. Don't add to the beginning or the end of the file. I set it up this way so that we don't have any merge conflicts whenever we're trying to open our pull requests. Otherwise if Two people accidentally edit the same line. I'll have to handle merge conflicts on my end. It's not a big deal, but I don't want to have to handle 12 merge conflicts. I'd rather minimize that as much as possible. So I have a 50 names in here. So all you have to do is in the middle of the file somewhere. Put a dash. And then put your name.
Lewis Benson: so I'm going to say John Doe let's make a name up for this one and then John e. enjoys Harry Potter every weekend
Lewis Benson: So it's just a quick little snip that doesn't even have to be a true. Fun fact, just put some sort of sentence here. professional don't put anything inappropriate within here. Otherwise, this is on my GitHub profile and I won't approve the pull request on that. So once this is done. We're going to use the normal ACP process of the only difference will be our push command will be slightly changed because we're no longer on the main branch. So I made the change I saved the file and we can see we have the modified showing up on my source control up here. So I'm going to open up my terminal again. And I can see that I'm on the correct Branch. So I I'm going to put in the whole file name you can use dot if you want since we've only changed one file. I just want to remind that you can put one file name at a time.
00:10:00
Lewis Benson: So I added that to staging now that it's in staging I could commit that change by using git commit. I'm gonna put the m flag and then I'm going to put a message and the template for contributions is in the readme it'll actually tell you how to do this anytime. You're making a real open source contribution. Maybe you wanted to make a change to get Hub itself or maybe even to vs code. You could actually go in and change the code editor. they'll have instructions on how you would actually do that. Just like his here. So this one says for the commit message add your name and contribution. So I'm just going to copy this.
Lewis Benson: And paste it in right here. And then I'm going to change that your name to my actual name.
Lewis Benson: So that's my commitment message for this. And then the last thing I need to do is push this to GitHub. And again, this is the one part that's slightly different than normal because instead of saying push origin main. We're not on the main branch. I'm on my name. So I'm going to say get push origin Lewis the part that comes after origin is whatever Branch name you chose to use make sure you put in the correct Branch name when you're pushing.
Lewis Benson: And there it goes so at this time if you got a 403 error. Or it says instead of your username right here. Make sure it has your username and not my username. If it does then that means you cloned the You want to make sure you clone the repository from your own account after it was forked.
Lewis Benson: Yes Gregory.
Gregory Robertson Jr: Against growing up and living on switch
Gregory Robertson Jr: Thank you.
Lewis Benson: If there's to get switch and then I used my own name for the branch name. You can use your name. You could also just call it Dev. You can call it whatever you want. It kind of makes sense to use your own name since that's what this is about.
Lewis Benson: and then after you finish switching's whenever you create the modification to the file. After the file is modified. That's when you do the regular ACP to get ad you can do get ad period or you can put in the file name. You'll do the git commit and you'll add your name contribution the way it says to do in the readme.
Lewis Benson: And then you'll do push origin and you'll put in your branch name. As everyone at this point does anyone need a little more time to get caught up or stuck with anything?
Lewis Benson: Okay, so I'll take the silence as we are all good here. I'm going to go to get help now.
Lewis Benson: and I guess we'll have to do a refresh because it says Normally you get a little alert here. I'm saying that you push changes. Here's the alert I was looking for. Typically that just pops up whenever I open my browser once you have this alert. You'll click on compare and pull request.
Lewis Benson: I'm not going to change any of these dropdowns, but I will explain them because there are times where you may want to modify this a little bit. Sometimes you'll be working in a repository that has I like to call it two main branches. One of them's like a staging Branch or development branch. And the other one is your main client facing deployment Branch. It's the one that you actually deploy. the backup Branch the first one Is also technically deployed but it's not deployed to a URL that anyone can get to it's a private deployment. And the reason you would do that is so that you can test all of your changes prior to merging this into your client code. they call it pushing code to production. You don't want to just randomly push changes to production without testing those changes first.
00:15:00
Lewis Benson: And not just testing them locally. You also want to test them in a deployed environment and I'll kind of show that workflow a little bit. I'm not going to get too much into branching. but I will show what I mean by changes to production whenever I start deploying and then breaking the deployment to show you what those Ares will look like and normal like common things that we run into at some point, but these dropdowns allow you to change where you're trying to push to code to. So this one's actually going back to my main repo to the main branch. So don't actually change any of these and this is where I'm coming from. You can push these to other branches if you needed to though doing that way. So we already have a commit message in here. You could add more to description in some cases say if you were trying to make a change to visual studio code.
Lewis Benson: You would have to basically write an essay explaining why your changes important here. So that's something to keep in mind. If you're trying to do some major changes to big companies. They're not just kind of pull your changes in Without You convincing them that it's important and this is the spot where you would do that. So I'm going to create pull requests now.
Lewis Benson: this brought me back to my main branch. You'll probably have a slightly different looking page at this point. The only thing I ask is you don't close the pull request. I'm going to have access to merge these n but you won't be able to merge these in because I'm on my own repo so it looks slightly different at this point for you. Does anyone have any questions about that?
Lewis Benson: Yes, Umar.
Umar Z: Yeah, I'm sorry, but I was trying to push it and it didn't work for me. I think I made a mistake here. So you said that we were pushing it on not on the main branch? I know so we push origin and then the bad name which is not gonna be mean but it's my name…
Lewis Benson: Yes.
Umar Z: because the brand with mine and So gate push origin Umar, right?
Lewis Benson: Yes, and I'll show that again right here.
Umar Z: But it says fatal ar cannot be resolved to branch. I don't want nothing to
Lewis Benson: Is there a typo between your name and where you put origin?
Lewis Benson: Are you on the correct Branch still?
Umar Z: Do yeah, I'm on Homer rank. I switch from Main to Umar, and I added gig at contributions dot MD after the change in the while and then I committed and…
Lewis Benson: Yep.
Umar Z: then it says one file.
Umar Z: Also I think we're gonna push origin Umar and then it's a fatal Umar Canal resolved to Branch. I don't know what happened there. It was supposed to.
Lewis Benson: Is there a capitalization difference maybe between where you have your branch name? See how has my Branch name right here.
Umar Z: I see it. You're Okay, I think I can again I do it in it Gap. So I think that's what happened. and let me push it again and get
Lewis Benson: I do see irises came through so I'm going to go ahead and I can actually review the changes here.
Lewis Benson: And just to make sure like that. It's in the middle of the code. Once I've reviewed it. This is just kind of showing you what it would look like from the other end. I would then approve here or I could add a comment rejecting the change and say something like this is on the wrong line number or whatever. It would be if this was a more sophisticated application I could say this function doesn't work with my current application for such and such reasons. This is where they would do that and then you would go back in make whatever adjustments are required and then push your changes up again and continue that process until it meets the needs of the developer team and then they'll hit the approve submit review. And then merge pull request.
Umar Z: It was writing mine went through now. So the next step is. To do a pull request. Can you walk me through it again? I'm sorry.
00:20:00
Lewis Benson: Yeah, are you at the GitHub part now?
Umar Z: Yes, yes it was.
Lewis Benson: You got the push through? So when you get back to the forked version of this you'll refresh and you should see that alert up at the top where it asks if you want to open a new pull request here. It should be right above.
Umar Z: Yeah, okay. It says ar hi recent pushes less than a minute ago compare and pull request. Okay.
Lewis Benson: Yep, that's it.
Umar Z: practice or okay, to add a tightening so it could be any title.
Lewis Benson: The title should have been your commit message. Was it done populating that in?
Umar Z: yeah.
Lewis Benson: Yeah, that should have automatically populated the title.
Umar Z: It says that almost contribution. Also, so that's fine.
Lewis Benson: Yeah, that was your commit message. Yeah. And…
Umar Z: Okay, and then brief
Lewis Benson: then that's where I was saying in that comment block. That's where…
Umar Z: ing
Lewis Benson: if you were going to a large company some sort of maybe a database company or vs code or something. You would have to basically write an essay. You'd have to include screenshots. You have to show the before and after changes any test that you ran you'd have to convince them to accept your changes at that point.
Umar Z: Okay. Yeah, I heard that. Okay. Thank…
Lewis Benson: Yeah. Yeah,…
Lewis Benson: and that's where you would do that is in that block.
Umar Z: so For our product.
Umar Z: I just leave it blank or should I just write anything in here and then? Create of the great product.
Lewis Benson: You can leave it blank. That's fine. The commit message is good enough.
Umar Z: Okay, so checking for Ability for more automatically this launcher. No conflict to the base time some good.
Lewis Benson: Yep, and then you can hit the merge button from there.
Umar Z: It's called giving the end of March 13.
Lewis Benson: There's some sort of confirmation button that I just don't hit close merge. It's the only thing I see that yeah, I see it came in here so I can hit the merge on my end now, so this is where I would hit.
Lewis Benson: of course that
Lewis Benson: remember I heard us. I got to click on the approve changes submit review
Lewis Benson: and then I can merge it in.
Umar Z: Of the analysis political successfully merge and close. Okay. I'm good.
Lewis Benson: Nope. Yeah.
Umar Z: Okay, okay. Thank you so much.
Lewis Benson: And then we'll prove submit.
Lewis Benson: Yeah, so that's basically the workflow whenever you're contributing to an open source project or to a project that's maybe a friend of yours that wants you to look at their code. You can Fork it over make some adjustments and then contribute like that. It's good to know how to Fork. It's a very common practice that you'll see. So are there any questions about that at all?
Lewis Benson: I think that's a really good warm-up just to kind of get things started here you kind of in that workflow of get it's not the most common workflow that we'll use and I'm actually going to show you the most common one now. I'm gonna go through starting a new project. I'm actually gonna build one out a little bit. That's not gonna go too crazy with it. And then I'm gonna ACP my way through it and I'm gonna have it deployed and then I'll show you those pitfalls for deployment issues. Was everyone able to make it through this? Okay, did anyone have any issues at all? Saying there's no other pull requests here.
Lewis Benson: Okay, so I'm not hearing anyone having any issues with this. So I'm going to move on and anyone watching the recording feel free to do this exercise and I'll review and pull the request as I find them and my GitHub.
Lewis Benson: Okay, so to start a new project first thing we need to do is create a new repo. This is my preferred workflow for creating a new project. You can do this locally. You can create a new folder get in it and then create your files and then create a new repo and then link them together. I find that's a lot more work than just creating the repo first. So I'm going to hit the plus button here. new Repository that hopefully this is feeling pretty comfortable now creating repositories. And I'm just gonna yeah question.
00:25:00
Umar Z: Yeah, are we following along or is just for the demonstration purposes?
Lewis Benson: That's up to you. I'm gonna just kind of go through this. You can follow along If you do follow along and you get stuck, let me know and I'll try to help you along there,…
Umar Z: of
Lewis Benson: but I'm not requiring anyone to follow along with the demo because I'm gonna make this demo Run for the full lecture today. I'm going to keep using the same demo.
Umar Z: okay, I understand that. So I'll just keep watching you. Okay?
Lewis Benson: Yeah, that's fine. Yeah if it's hard for you to even alt Tab and stuff like that. Just watch the demo then that's perfectly fine. Just keep in mind that this is the workflow for building projects. So if you want to practice you will get some practice with this whenever we do our assignments, it'll be the same workflow as that. And then whenever I do the deployment, if you want to deploy a page alongside of me, you and you don't have to follow along with this. You can deploy a previous project that you have on your GitHub. If you just want to find where those buttons are in your settings and stuff. Okay, so I'm going to call this. new Dash web page and I'm going to make this a public repository because I plan on deploying it if you choose private repository. There's a lot of issues whenever you try to deploy it some reason GitHub Pages gets confused. Sometimes it doesn't work at all.
Lewis Benson: If you do want to have a private repository that's deployed. You'll have to use a third party deployment and I'll show an example of that at the end. If we have time what you could do alternatively to using GitHub pages, but it is a more advanced topic. But I will show it again as well during Capstone week, we'll have some time for that so then description of this will be my personal website.
Lewis Benson: Or clients something like that. I'm going to always add the readme file when you're starting a new project. This just eliminates issues with having all that code. You have to link to a local repo. This would be clone it if you don't have a readme or you could also just include a license it would work the same. Or a DOT get ignore and I'm going to put in This stands for node.js which is a JavaScript runtime that we will be using when we start learning Frameworks like react. I'm not going to be using anything that requires a DOT get ignore. I'm just including it because it is good practice to have one. That way if you do start putting stuff into your projects, it requires Secrets, you're protecting those secrets with a dog getting more. So let me create my Repository.
Lewis Benson: So that's the first part of the workflow is just creating a public repository with a name and a description. And now I need to clone this down. So this would be step two. This will work the same as when we just did the fork assignment. I'm going to go into my projects folder and I'm going to clone it here.
Lewis Benson: So this will be a get clone.
Lewis Benson: And then I'll CD into my newly cloned project. And open my vs code by using Code space Dot. And I can see that I'm on the main branch and that I'm in the current folder path. So I just want to make sure that's all correct before I continue.
Lewis Benson: And I see my vs codes flashing. So I got the base project started. So now I don't have any changes yet. So there's nothing to ACP. I'm just going to create some files in here so that I have something to kind of work with.
Lewis Benson: create an index. This is a requirement for deployment you have to have a file called index.html for this to work properly. and I'll just say my landing page
Lewis Benson: a landing page is typically something you'll hear that refers to the root page. It's where the user first lands when they visit your web page. So when you visit google.com, you're on the google.com landing page, which has that big Google to search bar. If you click on Gmail, you're still on Google's web page, but now you're on one of their sub web pages on our sub domains. If you click images it takes you to a different page. So when they say landing page, it's the page that you visit that kind of grabs the user's attention. If you're on a business page, it might just have why you should use us type of information maybe like a few different pricing options things like that. And then once you click further into the site, it'll take you in deeper good example, something like Netflix. If you visit netflix.com, they're landing page has a sign up button some sort of call to action. It has an image off to the side showing that they're like a movie streaming.
00:30:00
Lewis Benson: Application. So the netflix.com is landing page isn't the page you would view to watch movies. It's the page you would view to sign up for Netflix initially. So this is going to have an H1. And I'll just say hello world. This is going to be a pretty basic web page for the most part.
Lewis Benson: I'll create a main. and two sections
Lewis Benson: And inside of here, I'll put some lorem ipsum.
Lewis Benson: Hello All right, so there are two sections with Laura mipsum an H1. I'll view this on live just to make sure everything's looking correct.
Lewis Benson: Okay, that looks good. And just to kind of review this I'm going to bring in bootstrap as a reset. So we're gonna get bootstrap. And I'll grab the links for that.
Lewis Benson: and I'll put the CSS file in my head And I put the script at the bottom of the body.
Lewis Benson: Okay, so I've made a decent amount of changes to this and if I look in the browser. I have a stable build. So this is a good point to ACP. I created some content. I created a heading and I brought in bootstrap that might be more features than what you want to do before you do an ACP. Some people will go further than this even before their first ACP, but I like to do a lot of commits whenever I'm building applications. It gives you a lot of information whenever you go back and look at your history. So I'm going to say add index.html.
Lewis Benson: Get commit Dash M. So our message would Create Landing. page Add bootstrap.
Lewis Benson: two sections
Lewis Benson: that's a decent enough. If I go any further than that, I'm gonna have too many characters and it will break my commit message up a little bit. It'll actually do the first 50 characters like a cut it It could cut it off here and then it would show the rest of this and the commit body. It's not a big deal developers know what the read whenever they see that they understand it. just too long of a commit message, but all the information's there. It's better to be too long. And Too Short is the main thing but it does cut it off and it could look some people don't like that but most people understand.
Lewis Benson: Okay, so there is the commit. Last thing to do is push.
Lewis Benson: Origin main because I'm on the main branch.
Lewis Benson: and there goes Okay, so go to ub. I'm going to refresh. I see my index.htmls here. And I'm going to deploy this to GitHub Pages now. So the process for deployment is very simple. whenever you come to your repo. There's only a few things you have to click on first. You're going to look up here at the top in your new over to settings.
Lewis Benson: And then on the left, you're going to go down to pages. And when you're in the pages menu, you're going to set the branch to Main. And then press save. And that's the whole process it is now deployed. so settings Pages main save for clicks
Lewis Benson: and we can see this deploying if we click on actions we can actually watch the workflow. Has this Little thing here going on. I like to sit here and just wait typically because it'll actually show it in real time whenever it's completed. You could click on these and get more information but it's beyond the scope of what we would need to know as Developers. these type of workflows are typically for your operations team to care about
Lewis Benson: so this one will go first and then this one will be done second. And then once this one's done deploying we get our link underneath this deploy. We can also get it by visiting settings. And going back to GitHub pages. And the link is right here and there's also a visit site button here as well. I typically get it from the actions. Just because it's already right here. And this is where I sit and wait. So I'm just going to click on that. And here is the deployed web page. This is a live web page that anybody can visit now. This isn't my Local Host. This live on the internet and even though it has GitHub in the URL name. This is my web page. GitHub doesn't own my web page, but they do own the URL to my web page. I'm just to make sure we understand what that means. So even though it says my username.github.io.
00:35:00
Lewis Benson: This is my actual web page. I own the intellectual rights to this web page, even though I have an MIT license and I say that anybody can use this for any other purposes All right, so I own the web page. So I just want to make it really clear that this isn't GitHub. This is yours and you can change this URL. you can configure it's called DNS you can go in and buy a custom URL and plug all those numbers in that's not something we'll do within this class just because it's not free, but if you are interested in creating custom domains, there's a 10 minute YouTube video it'll walk you through the whole process. There's lots of blogs on it. It's very simple and you can actually do it directly inside of GitHub pages. they have an option here
Lewis Benson: Or custom domains and if you go into here and start reading their documentation about custom domains. it's quite a bit to read but if you get through it all it explains literally everything you possibly ever would need to know for getting a custom domain for a web page. So I just want to show you where the documentation is for this again. it's kind of too much for our lecture to get into and it's not free. So that's another reason why we don't do this in the class. It does cost about between 14 and 15 17 dollars somewhere in there for a year. That own this I should say rent this domain I guess because you don't actually own it. Does anyone have any questions about that?
Lewis Benson: Is anyone that is following along? Does anyone have any issues with the deployment? I will be going into some of the reasons why you would have issues.
Lewis Benson: Okay, so that was the first part of the workflow. We got our first feature here. here's something to keep in mind. Let me Zoom this back up. So these are the exact same this is a mistake. I make all the time. I'll be deploying my web page. Everything looks good on here. We can see that the headings displaying correctly. I'll do an inspect after I get it deployed. Check my console. I have no errors. Everything's great. So time to add for my next feature I'm just going to give a dark background with light text because I like dark modes. It's kind of my thing. So I'm going to create a new file. And we're gonna call it Styles dot CSS. And we are going to link this in underneath a bootstrap.
Lewis Benson: So there is my style sheet LinkedIn again. This is inside head of my document. And I've made two changes to two different files, but the change is the same. I created a stylecss. So I'm just go ahead and do a quick ACP on the creation of the file. This is optional. You can actually add a little bit of styles first, but I like the ACP everything I do so it's just to get ad period it commit Dash m.
Lewis Benson: I want to do that. I to Try that Get commit Dash m. Create style sheet. That's a very simple thing that I did it's one little feature. It's not going to break the page. And get push origin name every time I do a push it'll rebuild the web page. It redeploy. I didn't do anything. it'll actually show anything at so now I'm going to add that. We'll say body.
Lewis Benson: background color we'll do three three. It's kind of a dark gray and then we'll say This is my font color. We'll do.
00:40:00
Lewis Benson: Maybe
Lewis Benson: F what was it F4 and 4 a 4 kind of an off-white So that should give me a nice looking dark mode. Let's look at the browser and we have nothing. Does anyone know why?
Lewis Benson: I refresh and refreshing nothing's happening. Why do I see? no background color
Lewis Benson: yes, Iris
Iris Coats: do you have this semicolon on your curly bracket on your vs code or would that do that?
Lewis Benson: You don't put us in mean here? That would be for JavaScript with CSS.
Iris Coats: Yeah.
Lewis Benson: You don't need one there. You do need them after each statement.
Iris Coats: Okay.
Lewis Benson: This is a mistake you're going to make to at some point. I make this one all the time everyone. I know makes this mistake. I'm on the deployed page. I'm not on my Local Host. So I haven't pushed these changes to get help yet. I have both tabs open because I wanted to make sure my deployed page It does look good on my localhost. It did the changes worked. it's a really stupid mistake. And I promise you you'll make it at some point. Everyone don't beat yourself up if it happens. I've spent hours trying to figure out why my CSS wasn't changing or why am I content?
Lewis Benson: On being added I had no errors. I just couldn't figure it out and I was on the deployed site instead of the Local Host. So there is a difference here. If I would have just acp'd I could have seen that but I don't like the ACP until I make sure that it's a stable build. So it kind of makes sense that I didn't. Just one of those things to keep in mind it'll happen eventually. so I'm gonna go ahead and ACP this now, since it looks good. I have that dark theme going.
Lewis Benson: I only added one file. So if I do get status I should see my CSS. Get commit.
Lewis Benson: Dash m Add dark name.
Lewis Benson: It push origami.
Lewis Benson: when I look at my deployed page, it's not going to happen instantly, so I'm refreshing it. It's not showing those changes. But if I go into my GitHub actions, we can see that I triggered what's called a workflow. These are GitHub workflows. It actually has the title there. And all it does is go through it builds the web page. So this means it's creating these files. It has to build a little bit of a web server. And then it builds a report and then when it's done with the report, it actually finishes deploying. I need our kind of happening at the same time. I have seen these end in the wrong order before which is really weird because you'd think that it would have to have a good status before it deploys, So here's the next thing after you deploy your page again and it finishes. I don't see those changes still I hit refresh nothing. I'm heading refresh nothing.
Lewis Benson: What I'm going to do now is hold control shift and press r And now I have my changes. So what happened here was my browser loaded the cash it preloaded the web page off of what it thought would have been the most recent version and it clears itself out every hour or so. But if you are working consistently and pushing your changes to GitHub, you're not seeing your changes control shift R. It's called A Hard refresh. It will clear your temporary cache and give you a better refresh that way another option. And this is the one I actually recommend even for localhost for deployments for everything. I recommend using incognito.
Lewis Benson: When you use Incognito, you have no need for hard refreshes because there is no cache within Cognito. You don't have any conflicts with your browser extensions because there are no browser extensions. So developing an incognito environment can save you a lot of issues whenever you're trying to figure out what's going on with issues like that.
Lewis Benson: Does anyone have any questions about that?
Lewis Benson: so those are the probably two most common problems I've encountered. as far as the basic deployment goes I am going to go into some more problems as well. We still want to continue working on our ACP process and just I'm gonna keep showing you the main workflow as you're building your assignments as you're doing these projects. What all that looks like. So at this point I can add some more features here. The next thing I'm going to add is first thing we put at the top of a Javascript file use strip.
00:45:00
Lewis Benson: And for this Javascript file. I can't really think of anything cool to do with it right now. I'm just going to create a button and put it in my body actually, let me Create an element to put it in. So we'll create a section here. And I'm going to give it an ID. of dynamic
Lewis Benson: content
Lewis Benson: and then I can grab that and JavaScript. And we can just plug in an element or two and they're just to see these changes occur. I'm adding a feature right now. So once this feature is complete, I'll do my ACP process. And again, I'm just showing the workflow for GitHub at the same time. I'm just kind of reviewing some of the JavaScript stuff, but I'm going to use something that you might not have seen. This is the Dom manipulation. So we'll do document. Dot I had to create my variable name. This will be called content.
Lewis Benson: area equals document Dot it element by ID.
Lewis Benson: And the ID was Dynamic content.
Lewis Benson: and now I'm going to create a button.
Lewis Benson: And this element is a button. And now I'm going to add that button to the content area. This is something we're going to be doing two weeks from now next week. We don't have class but the next class we have we're going to learn how to do exactly what I'm doing right now. So don't worry too much about the syntax just yet. Just kind of giving you a taste of what this is gonna look like coming up in JavaScript. We'll do content area append child and we'll pass in the button.
Lewis Benson: And I also just want to add.
Lewis Benson: a class to this so I'll do it above this. button Dot
Lewis Benson: class list equals
Lewis Benson: BTN
Lewis Benson: primary I think that was the correct syntax. So let's double check it.
Lewis Benson: I don't see my button. Let's see if I have any. I didn't Link in my JavaScript.
Lewis Benson: So underneath of my bootstrap, I'll link that SRC script.js go. There's my button.
Lewis Benson: I didn't put any content in it. Let me just add a little bit text to it. so I'm just showing you right now you can build entire websites like Using these different ways to create HTML elements. It does get really messy and it's really hard to read but we need to learn how to do it this way before we can learn how to use a framework to have it do all of this for us. If we don't understand how this works. Then when we get into learning Frameworks, it gets really hard to understand even what's happening at that point. So we are going to be learning this more complicated looking way first before we get into what looks easier but harder to understand if you don't understand under the hood what's happening? And I'll explain all this under the hood next in two weeks whenever we start this stuff. So we'll do button Dot. enter text
Lewis Benson: equals There we go. So I just created a button using just JavaScript. I added some styles to it. So that's a new feature and anytime. We add a new feature then we want to ACP our work. And whenever you're built you're doing this type of ACP process. You probably wouldn't ACP after every single little thing you do. I'm only doing that to exaggerate and show you each stable build each feature. That's when you want to ACP. What I would probably do on a realistic project is if I had a button that would imply I have a form I would care I'd finish that entire form all of the logic for get everything Working and then I would ACP that form. And then if I had that form redirecting you to another page.
00:50:00
Lewis Benson: after iecp' I would build the next page that it redirects you to I would put some content on that page and then I would ACP at that point so I am exaggerating this out a little bit, but I just wanted to really make sure everyone understood that every stable build on every feature. That's when you ACP. And most of the assignments we're going to be doing. Are only going to be one or two features so you won't get too much where you have to ACP 30 times and on a homework assignment or something like that. It's just something to keep in the back your mind. But again, you do want to ACP as often that as often as makes sense. Basically every time you have a stable build with a new feature ACP. All right, so I'm going to get add. period We'll see what that added. It should be two files.
Lewis Benson: We have our index.html where I LinkedIn the script. And then we have the script file itself. I'm going to do one commit for both of these because that was one feature adding that JavaScript was a single feature.
Lewis Benson: and for the commit message, I will say add Button as feature.
Lewis Benson: Using Js. Get Porsche origin Main.
Lewis Benson: And it's building.
Lewis Benson: So here's the live site. If you're on the workflows. This is still showing me workflow number three with this commit message. So this isn't going to start moving or anything. I'd actually have to click actions again. And then I can click into workflow number four. And I can watch that build. And once that's done building, I may have to do another hard refresh to get my changes. Sometimes it all depends on where the cache is at what state the cash is currently in it may have already cleared by this time. It depends on how much work you're doing and how often your ACP. So let's go to the link and we don't have the button. I still don't up the refresh clear to Cache. So a normal refresh work that time. But again, sometimes you got to control shift R in order to get that to show up. So there's our new feature. The button is in there.
Lewis Benson: Does anyone have any questions at all about this workflow? What questions do you have about anything? I've shown.
Lewis Benson: Anything at all from this week anything you want to review on? We got a few extra minutes here before the break. So if you do have any questions, this would be a good opportunity for them
Lewis Benson: Okay, so if there are no questions, I'll start to break a little bit early today. We'll get our 10 minute break in. And then I'll go into some more common issues with deployments and some more of these workflows. I'll get that 10 minute timer started.
Lewis Benson: And I will see you in 10.
01:00:00
Lewis Benson: Hey, welcome back.
Lewis Benson: So now I'm gonna go into Basically more bugs you'll run into I just want to show all these to show you how you would troubleshoot these what they look like and then problem solving from there. Before I do though, I want to get a now of bootstrap just quick little review on how to do that. I'll go down to the components. Want to grab a nav bar just so I have some links to work with. I'll just grab this big one here that has all this fancy stuff in it.
Lewis Benson: And we'll put that in my index.
01:05:00
Lewis Benson: And I'll remove this disabled blank.
Lewis Benson: And I'll just leave the rest of it there. So this is link.
Lewis Benson: This Home is fine. And it's our current page. So I'm going to create a second eight index or sorry HTML file. Just call this page two dot HTML.
Lewis Benson: And we'll put our boilerplate in here. page two content
Lewis Benson: and for the page to content, I'll put an H1. Hello from page two. I'll put a name. with two sections
Lewis Benson: And then Within These sections I'll put some more.
Lewis Benson: So let's just a decent amount of little content there for this. So inside of my nav I want to link that in. and we'll use
Lewis Benson: I use this one here. page two That's the name of the content the href would be.
Lewis Benson: page 2.html and I'm also going to create a page - 3 HTML and I'm just going to duplicate page two and then change the twos into threes.
Lewis Benson: So I have a couple pages to work with just to show you a problem that sometimes occurs. And how to solve it.
Lewis Benson: and then we'll do
Lewis Benson: page three dot HTML
Lewis Benson: and page 3 is there as well. I'll delete this last link. And let's see what this looks like on our localhost.
Lewis Benson: Okay, here's the Local Host. I'm not seeing my bootstrap now. Let's see. Where I went wrong here.
Lewis Benson: It looks like I put it on the wrong page.
Lewis Benson: Wait, I'm gonna put it on the wrong.
Lewis Benson: in the wrong repo
Lewis Benson: I did. So that's not the most common issue, but apparently it happens. So let me move these over.
Lewis Benson: to the correct repo new web page just drag this right in.
Lewis Benson: And then we'll close that other one out so we don't make that mistake again. Okay.
Lewis Benson: And again, that's not on my index. So I need to add that.
Lewis Benson: right, I actually Forgot to grab that piece of code, so I'll have to go in there and get that now.
Lewis Benson: And I apologize about that. It is another good example of things that can go wrong.
Lewis Benson: There we go about our nav.
Lewis Benson: The links here there in the drop-down. So we're going to page two.
Lewis Benson: Page two looks good. And I'm going to page three and Page Three also looks good. So I'm going to ACP this process.
Lewis Benson: And I'll show you the bug. I baked into my code once I die once I finish acping this get add period
Lewis Benson: I'm actually going to undo the staging so if I do get status it show you the commander to undo it I get restore dash staged in the file name to unstage. I'm not going to use that command. I'm going to show you the way I like to unstage things. I usually just come into the source control. And of course it opened up my other repo there. Once you're in the source control, you can just minus the ones you don't want to stage. So I'm just gonna minus the index.html and I'm only gonna have page one or page two and page three here.
01:10:00
Lewis Benson: And I want to get status. And we can see the index is not added. These two pages are added. The reason I'm doing it this way is because I added a navbar to my index. But I didn't add a navbar to page two and page 3 so my commit message would be kind of wrong. If I said that I added now and created two pages at this point. I'm just going to say Create two pages of content. Again, if I were to include the index. That doesn't quite fit with the commit. And you can push at this point. I'm not going to because it'll trigger a deployment. I want to add in the index now as well.
Lewis Benson: Again, I could do get push origin main at this point, but it wouldn't push the changes from index. So it'll only push those two other Pages up. I want to say html. get push Whoops, I forgot the commit so that push wouldn't work yet commit. - M
Lewis Benson: Add now bar with two pages and links. Get push or the main.
Lewis Benson: So that is pushed successfully. Let's watch this build and we'll see these bugs.
Lewis Benson: So it's currently building. And what I'm going to expect to see is my links are going to be broken. They work fine Local Host if I click on the drop-down. I can get to my two links. Oops that's calendly.
Lewis Benson: Expected right now bar to be there and get to my two links. And they're working just fine. But in my deployment, I'm expecting them not to work because of how I link to them into my file. And it's a very common mistake, especially whenever you start working. And I actually didn't make it in correctly. Even I put a dot there.
Lewis Benson: So a lot of times when you're working with Frameworks, you'll put a path with a folder there and again these should work locally.
Lewis Benson: And they still do. me There's one more time and there they should be broken now on GitHub, but only on GitHub and still work locally.
Lewis Benson: Just throw in a quick ACP push origin Main. Eyes put in for the commit message remove relative path from links just because I want to demonstrate what happens whenever you have just a slash. As your links and less GitHub patch this was a bug as of about a month ago.
Lewis Benson: So this should be building build number six a lot of times your actions, you'll have hundreds and hundreds of different build times in here just because of the amount of developers. You may be working on a project and every single commit is going to trigger these actions to run and sometimes you'll have more than one workflow happening at a time. You can actually create your own custom workflows. We do get into that a little bit whenever we get into level four. The custom workflows are really handy.
Lewis Benson: Yeah, it seems that actually is working out. Let me do a control shift R just to make sure. I still wouldn't advise putting up there. the control shift are broke it. So we get a 404 now because I have that slash there. but when I'm on My Local Host. I got too many of these openings close some of these.
Lewis Benson: Okay, this is So on localhost I go to page two page two works fine. I go to page three page three works fine. On GitHub I go to page two and I get a 40 And then I go to page three and I get a 404 not found and we could see in the URL. Actually What's Happening Here? Let me back up. This is the name of my repo right here new web page is my repo. When I go to the next page remember, it's my repo name. Slash is my index. When I go to the new page, it removes the repo name because I said go to the Slash the root repository if I were to put in here. the name of my repo which actually just forgot what it was new web page.
01:15:00
Lewis Benson: I'll just copy that so I don't mess that up. I can go to new web page slash page two dot HTML So this is a common mistake. You'll see whenever we start working. you'll come back to this mistake. It's probably not one you'll make right now. But whenever you start working with Frameworks a lot of times you're putting in a slash ahead of your links to indicate the root level of your files. And the reason you do that is because you need to tell the application where to start and again, this is a node thing with no Whenever you build a web application using node.js it actually has to take all of your code and create the HTML CSS and JavaScript manually, you'll be doing everything in JavaScript. You'll write a hundred percent JavaScript whenever you're working in Frameworks.
Lewis Benson: And It gets converted into HTML and it gets converted into regular the framework JavaScript during that build process. It needs to know where to put these files. So you're telling it to put this file in the level of your application on a framework But with GitHub Pages, you're telling it to go to the root level of your profile on GitHub. You're not telling it to go to the actual repo name. if I were to put the repo name in here. This is kind of interesting. I have to remove the slash at the beginning for this to work. I can keep the slash. I won't even matter. This should be broken.
Lewis Benson: calendly again, that should be what I put that on page through your page three should be broken now. But if I were to ACP this this would actually work on GitHub Pages even though it broke locally. So it's just one of those weird things because now I'm telling it to go. I put the slash at the beginning. Because I have the slash at the beginning and I included the repo name. This is actually where it will append this onto my username and This isn't something you'll ever do uh-huh. I just wanted to kind of show you it because it's interesting and it might help you understand kind of how this works behind the scenes. But basically anytime you're adding a link you want to make sure you're not putting the slash in at least with GitHub Pages if I were to deploy this on netlify.
Lewis Benson: It's a very similar process to get on pages. You just click three buttons and it'll actually deploy from your GitHub. You could have these slashes there because netlify will go into your GitHub code and then it will rebuild the entire application on their website and it'll host the code and the web page both. So it duplicates all of the code from your GitHub to their website. So in that case you could leave the slash there if you wanted to but with GitHub Pages, this is a really common bug that you'll find later because you get so used to putting a slash in front of all your file names and then you'll come back to build a basic static application like this. And you'll end up having a 404 and all of your extra rug pages and you might not realize why at first so hopefully this will tickle the back of your mind whenever that happens. for a four GitHub pages. I probably have a slash.
Lewis Benson: If you can't remember it, there's always just looking at and analyzing the stuff manually looking at your url. See what's happening. So on my Local Host I can see it's trying to go to this that doesn't exist. That's going to be a bug. I could create a folder with that name. And it would go to that. Page successfully. I'll actually do that. I could say new Dash web. - page and then I'll put page three in there. and then I'll undo my change there. And now if I refresh I get page three because I created that folder. That's something to keep in mind too. And that actually will go nicely into the next thing that I see. Common mistakes I see.
01:20:00
Lewis Benson: So let me rename this folder. I'm just going to call it HTML. So a lot of developers like to organize their code into folders and that's a great practice. You start getting a lot of stuff in here gets really messy. So you'll create an HTML folder and you'll just throw all of your HTML into this folder. So it's so all over htmls in there, then we'll create a new folder. This one we called CSS. And then we'll throw all of our CSS scenario. Let's say we had a reset and maybe two other CSS files. Again, good practice to have things in folders, but there is a pitfall here. So also notice. My source control just went crazy. It says I have 12 things happened.
Lewis Benson: It's showing that I deleted a bunch of files and that I created a bunch of files. So anytime you move files across directories with Git as your version control system. It will count that as a deletion and a creation just kind of a little side note not a big deal at all. You'll just put into your Commit message that you move the files and it's understood what that means. So I'm going to ACP this. Before I do I actually want to fix. This piece right here.
Lewis Benson: And now I'm going to ACP this. And I'm going to do them all at once.
Lewis Benson: get am restructure
Lewis Benson: I think that's structure stru C can't spell this today. That's okay close enough area my spellings off today. Don't worry about it. Just ignore it restructure all files into borders
Lewis Benson: push origin Main
Lewis Benson: so there's going to be a couple things going on with this change.
Lewis Benson: before I show that let me Get a little bit of a markdown file going for my readme here.
Lewis Benson: I'm going to grab a template for a readme file. And then I will add in here so that we have. Just some content and I read me while we wait for that to build.
Lewis Benson: still work just some random content you can use this is a very basic Bare Bones read me file that you might want to use in a application you built just another feature we added. I am going to ACP this again. Just so we have that content.
Lewis Benson: So that is committed.
Lewis Benson: So this readme file the reason I did this is because anytime you have a web application other developers potential employers. They're going to want to see documentation for anything you build. So this is just kind of a sample you could have a little setup section on how they could.
Lewis Benson: View this locally. here's how you clone it navigate to it and then any other setup instructions, if you have to run a command like npm start or open up vs code hit live server things like that is where you would put here. Technologies used e features I just stuff like that. It's good to have. And these can get a lot more elaborate. You can put contributors in here how to contribute all kinds of different headings. That should be enough time for this to have. deployed So let's take a look at our home page.
01:25:00
Lewis Benson: And we have a 404 not found. Let me go to the actions.
Lewis Benson: There we go. That's because I didn't have the Name there, but notice this is no longer my web page. This is actually my documentation one of the reasons. I just wanted to have some content in here to show you.
Lewis Benson: Does anyone know why this is my documentation and not my index.html.
Lewis Benson: So let's take a look at my four here. What do we see inside of the Explorer here?
Lewis Benson: looking at this file structure
Lewis Benson: I might be able to make this. Easier to understand if I can open up. See if this has the correct path. It does I can probably say tree.
Lewis Benson: So this is showing the file structure. This dot is So in my root, I have a license. I have a readme. And I have a script.js we can see that over there as well. What this is basically showing me is my index.html is not in the root of my project. I have it inside of a folder. This is a really really common issue. But the interesting thing is you can still access your index.html by going to slash HTML.
Lewis Benson: So slash HTML the reason this takes me to the index.html is because index is the entry point of Not just the root directory. and I'll show it another example of where this is actually a useful tool. But for here, I'm in my HTML. if I go to page two That one works. I can get a page three that one works and then if I delete this I'm back in here. So this is another thing here. The name of my folder is HTML. This is not a good practice naming your folder HTML for all your HTML files means your url path is called HTML. and if you think of this from a sales point of view or you're trying to make it professional web page for people to sell products. They probably don't want to have the word HTML in our URL.
Lewis Benson: It just doesn't make sense for Consumer standpoint. You're not going to go to You're gonna go to Google slash Gmail or whatever their email. I think it's actually mail dot Google, but regardless you're going to want to make sure that whatever folder name you use is related to the content that you're going to be displaying. So does everyone see how I kind of got that bug? And they're not kind of shows. Also. My documentation is my home page right now, which is interesting. You could use this whenever you're building portfolios resumes things like that. You could build your entire home page out of markdown. And have that be your readme file and then include links within that markdown to other web applications.
Lewis Benson: So you could create some sort of directory or table of contents to all of your web applications using a single readme file and then deploy that and you don't even have to have an index.html. You just have a single markdown file. So it could technically work for you in some instances. In this case, though. This doesn't make sense because we have a home page and we want our homepage to be our homepage not our readme file. So let me undo that. I would want to put my index.html in my route. that way when I go to
Lewis Benson: where is my localhost? Here we go. This will take me to the actual home page instead of to the readme file.
Lewis Benson: Okay, so that is a couple of those type of issues.
Lewis Benson: Where did my code go? Alright, so the other one is this file name here. We called this index.html. I'm actually gonna rename this to products. A product makes a little bit more sense. But because I did that all at the same products slash. I'll do that on both spots. I don't lead it with a slash. I just put product / and then And now when I go to a new link products slash page two, this URL makes a little bit more sense from a sales standpoint from a best practice a standpoint. I want to show you the interesting thing though. And this is where you can leverage your index.htmls. So these would be there two specific products. Now, we can actually create an overall products page by creating another index.
01:30:00
Lewis Benson: HTML inside of the products page and then I could do a ul and Li item one something like that. We'll do a couple of these.
Lewis Benson: And then changes to two and three. And then I'll put a heading here.
Lewis Benson: Just so we know this is the products page. And where this gets interesting is. if I go to my home page slash products I don't have to actually put anything in here. I can just see all of the products on this page. And then of course you'd have your navigation set up to where when you click on item one it would then take you to page. - one not HTML I spelled something wrong there.
Lewis Benson: Let me see what that actually is. I don't have a page one. I have a page too.
Lewis Benson: So page two dot HTML, so I'm going from products. And again, this is an index.html inside of this folder so I can have an entry level to this directory. And then I can have sub files within there and this is a really good for file organization and it works really well whenever you have your site deployed for organization purposes. So I'll go ahead on ACP it add period
Lewis Benson: hide that get net Dash. M. and we
Lewis Benson: add products pages. Because I renamed this folder that counts as deletions and Recreations.
Lewis Benson: And then we push origami.
Lewis Benson: So at this time, does anyone have any questions at all about these possible bugs these little pitfalls? You can run into these naming conventions anything at all that I've covered.
Lewis Benson: How's everyone feeling about this ACP process? This is getting kind of driven into your minds now all this repetition. I know this is a really repetitious week. I do apologize for the amount of times that we repeated the same thing over and over and over again. But it does help it's one of those things where the more you do it the better you get so we hammer it into you as much as we can. So hopefully all this repetition will help you with these workflows. And this is basically it for creating projects. You want to make sure that you have your index in the route. You can create your folders here for all of your sub files and everything. What do we got here this from that demo? I'm just going to revert all these. Hope that's a stash. There's revert.
Lewis Benson: There we go. Just a little notification there.
Lewis Benson: What I did there was I'll actually show that real quick too because that's actually a pretty useful thing if you were to create a whole bunch of content.
Lewis Benson: And you don't know exactly what you did because it was so much and you were weaving things in and out like over You have stuff down here. You're not sure which content was the old which is the new because it all looks so similar you can go into your Source control. And it has this back button here. It says discard changes when you click discard changes. It will actually undo everything you did. As long as you didn't commit you can use that feature. So just a handy little thing. I use that one quite a bit. You can do the same thing through the terminal that's just one of those commands. I don't like to use because If you type make a typo or something, which I'm very prone to making typos, it will mess it up. There any questions we do have some extra time we're going to be going into the assignment next that was actually all of the demo I have for today. So if there are any questions go ahead and get those out now.
01:35:00
Lewis Benson: Okay, so I'm gonna open up the assignment. So we're going to have an extra half-hour breakthrough out Rooms Today. I'll frowned upon by anyone who specially wants to get caught up on some things if anyone still needs to do their first two pre-work assignments, too. I think there was a couple out there still that need to get turned in you can use this time for that work on your previous assignments and as you're working on this today, Recap yourselves go through adding in some bootstrap add in some CSS add in some JavaScript. We don't really know enough JavaScript to do anything too crazy yet. If you want to take a screenshot of this to add content to your page and play around with this you can.
Lewis Benson: But you could also just add in some logs or some alerts maybe a document dot right something like that. I just try to refresh yourself on everything we learned last week. Everything that we've gone over in bootstrap CSS HTML just keep exercising those tools while you're working on this assignment. It's a really good opportunity for that where we having Robert instruct tomorrow. I'm going to be unavailable tomorrow. Tomorrow, I'm not sure exactly what his plan is, but he does. Insist on using the pair programming technique a lot so he may partner you up and have you work together at some point. So be prepared for that tomorrow. also
Lewis Benson: I believe he will be doing a full review of everything that we did this week including py the commands everything like that. So that's the plan for tomorrow. If there are no questions, I will get into the assignment then.
Lewis Benson: Okay, so this is a multi-part assignment. But it's all one thing. Basically you're gonna apply with the weeks learnings to create enhance and deploy a full project on GitHub Pages using local and remote repository management along with web content enhancements. So enhanced it with HTML CSS JavaScript. Deploy it on GitHub pages. So part one is create and enhance a local Repository. I know this says to use the initialization of a git Repository. I recommend creating your repository on GitHub first and then cloning it down. You can do it this way if you prefer this workflow.
Lewis Benson: This is where you would get in it. And then you create an empty repository without a readme file and then you grab that add remote line of code and plug that into your terminal. So there's two extra steps if you go that route, but feel free to just clone down a readme repository for this. Where it says to initial get repository whenever you clone something down it automatically initializes to get repository. So that will save you a step. You'll create an index.html with basic web page structure Elgin your question.
Elgin Sharper: You read day five.
Lewis Benson: Am I reading day five?
Lewis Benson: I believe this one's going to be similar still.
Elgin Sharper: or eight
Lewis Benson: practice deploying static site using GitHub pages Starting with a readme then transitioning into basic HTML. So it doesn't have the requirement for all the content. But if you do have extra time then feel free to add in the CSS and the JavaScript as well again, you think that's going to be tomorrow's assignment. So you can get a jump start on tomorrow's assignment if you want to. So this one is just going to be the main deployment thing so deploy a readme file first. That would mean you don't have an index.html created.
Lewis Benson: Prior to running your GitHub pages, and then you'll create an index.html afterwards after this is deployed with just a readme file.
Lewis Benson: So you'll create a new repository on GitHub the name of the repository should be my static site. Whenever you see my static site, this is referring to a site that the content is the same for all of your users. For example when you do a search on Google. You may not get the same results as another user. So that one's considered dynamic. But when you go to the Google homepage, that's a static site. Everyone gets the exact same Google homepage.
01:40:00
Lewis Benson: So just to clear up what static Means versus dynamic. You'll initialize it with a readme. So this is a really good point where once you initialize this with a readme. If you want to you can just start deploying it right there before you even clone it down. That'll knock out the first step. You'll have a site deployed with a readme.
Lewis Benson: once deployed provide the URL to ensure you read me is live. Part 2 transition to HTML. This is where you'll create your index.html.
Lewis Benson: Have some basic content you can do a portfolio if You can also work on. Building a static site for an imaginary business, like maybe a grass cutting company snow plowing company anything like that if you want. Pizza whatever you want to go ahead and build that and the reason I'm throwing these ideas out now is because the Capstone project you're actually going to be building a real web page. You can build a portfolio or you can pick from a business page. So just kind of have that in the back of your mind start thinking of ideas for a page. Until we get JavaScript completed though. You won't really be able to incorporate any real fancy functionality. Unless you've been studying that on your own.
Lewis Benson: Once this is built ACP and watch to see your changes are working. I'll also verify for bugs some of these pitfalls that I went over today. Make sure those aren't happening to you on your deployment. Just kind of go through and make sure everything's working the way it's supposed to if you create multiple Pages make sure your links are working correctly. If you have folders, make sure that anything nested within those folders is linked correctly. Basically everything I covered through the pitfalls and there might be some other ones that I forgot about but those are the most common ones that I see. especially the checking your live deployed site and thinking that you're in your local environment. I literally do that almost every day.
Lewis Benson: Are there any questions about today's assignment? And again, thank you also for reminding me that that was day five and not day four. So that's definitely going to be helpful.
Lewis Benson: Okay, so if you don't have any questions, I'll open breakout rooms. If you do have questions just send me that request to your room and we can work on those.
Lewis Benson: Yes, Omar.
Umar Z: Yeah, they saw the name of the website has to be my static page because I chose something else. I chose my web page. I didn't know about. The instructions so is it gonna work or do I have to do it again?
Lewis Benson: It will work. And if you wanted to change the name you can too. I believe that's in the danger zone. Let me double check. You can rename repos. It's not a big deal.
Umar Z: So then I don't have to make all the connections and cloning and everything. I don't have to do all that.
Lewis Benson: You'll have to if did you already clone it down? Okay. Yeah,…
Umar Z: I did everything actually.
Lewis Benson: so the only thing you'd have to do then is rename your folder locally as well.
Umar Z: Okay.
Lewis Benson: And there is that problem with If you have everything done, the easiest solution is to delete it locally. And then recone it down. as well after you rename it.
Umar Z: Or just recall on I get So just break learning it and then a little bit of ACP may be required.
Lewis Benson: Yeah, because the reason is your remote links, let me actually bring up my terminal and show you that if I say get remote - V. I'm not in a repo am I always say remove remote. This link here is linked to it on this repo name. And updating that is a little weird. You actually have to go into the file and change it. So it's easier just to after you get everything acp'd rename it delete your local instance and…
Umar Z: but
Lewis Benson: then recone it down and you'll still have all your get history and everything locally.
Umar Z: Okay. I'll do that then.
Lewis Benson: Yeah, I found it. That's the easiest way. Otherwise you have to go in here. I'm not even sure where it's in here anymore. I haven't done this in so long. I think I might be in Open vs code. This is part of it. This isn't even like the only part you have to change…
01:45:00
Umar Z: Okay.
Lewis Benson: but This is one of the lengths I'd have to go through and…
Umar Z: Okay.
Lewis Benson: find the rest of them.
Umar Z: you want me to delete it? Right and he do it make a knee depository. I just rename it and then clone it again.
Lewis Benson: It's easier just to rename it or just make sure you're fully ACP before you delete it. up
Umar Z: Rename it and clone it. Okay, I got
Umar Z: Yes, I get your blind. Yes. so I have everything on the development and then we just reflect it on the web page. I get it.
Lewis Benson: Yeah.
Umar Z: Okay. Thank you.
Lewis Benson: and that's also a good thing to practice because sometimes you have to rename your repos and you'll have that little bit of experience with that now, too.
Lewis Benson: Does anyone else have any questions?
Lewis Benson: Okay, so I'm gonna open these breakout rooms. I will say. In second. Let me wanna set a timer for these that way they end automatically this time.
Lewis Benson: Better with me here.
Lewis Benson: Perfect.
Lewis Benson: Okay, so the breakout rooms are open.
Lewis Benson: And let me in the recording.
Brian Kimbrow: Everything good?
Meeting ended after 01:47:57 👋