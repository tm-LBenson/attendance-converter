nia-amar-wfe (2023-12-04 19:30 GMT-5) - Transcript
Attendees
Brian Kimbrow, Chantrice L, Daniel Perez, Elgin Sharper, Gregory Robertson Jr, Iris Coats, Krystal Jefferson, Lewis Benson, Lewis Benson's Presentation, Ryan Arnold, Umar Z
Transcript
This editable transcript was computer generated and might contain errors. People can also change the text after it was created.
Lewis Benson: All right and Welcome to our review week or this week. We actually have no graded assignments that will be turned in this week all of our Review activities will be done in class only and if you don't manage to make it through them, it's not a big deal. The whole idea is just to get a recap of the week and during our Workshop time that'll be the time to get caught up on any assignments that you may have not got at least a 16 out of 20 on the minimum grade for an assignment to be considered complete is at least a 16 out of 20.
Lewis Benson: this will also be a time to catch up on any assignments that you might be missing at this time. So again, you want to make sure you have at least a 16 out of 20 on all assignments and any assignments that you're missing. This is the week to get caught up on those as well. Let me get my screen share going.
Lewis Benson: And we'll get started on this review. So day one of the review we're going to be covering our HTML. pretty much everything we've covered in HTML. I'm going to cover again today. So it's Gonna Fill A little bit more fast-paced than we would typically cover this. But again, we're covering a week's worth of material and about two hours. So just kind of bear with me if it feels rush but it should be feeling pretty decent about HTML with all the practice. We've had leading up to this point. So hopefully this feels like a good review and not too new information. one thing with learning this Is a lot of times you might have to relearn something a couple times before it sticks, especially some of the defined details that we don't use on a daily basis.
Lewis Benson: So I have my file here. Let me actually open this properly so I get my file structure.
Lewis Benson: There we go. I don't have to do the open new folder. So in an index.html.
Lewis Benson: A set of using the Emmet shortcut that we've been using all this time. I just want to kind of go back over everything just so we're all still really familiar with each of the elements and the building blocks on HTML. It is important that we understand the basic structure on how all this works. So anytime you're building a new HTML document. The first thing that goes into it is the doctype with this HTML attribute. And with this is for the browser the browser looks for this flag, and it tells the browser the HTML5 is about to be delivered to it and then it knows how to read this document properly and it will parse everything out the way that this will also allow it to use the new newer semantic HTML elements and understand those and be able to render those properly the page and notice. This is not encapsulating our document. It's just this one little element at the top we call this.
Lewis Benson: lag It doesn't wrap anything. It's just right there at the top. So anytime you have HTML that's going to be the first thing you see. And then the next will be the root element is what encapsulates your entire document. And this is HTML. and if I auto complete this It doesn't give me any attributes or anything. Typically whenever we do our autocomplete it also throws this language attribute on here and puts in the en flag for English. Let's just kind of tells it which keyboard we're using and what language to parse the Sim, I believe there's some search engine things too that go on with this attribute where Google will know which language your web page is in based on what this attribute is set to so if you were to set that to be
Lewis Benson: then whenever your page loads Google will say we detected, Spanish on the page. Would you translate to English? And that's typically where that comes from. Is that little flag right there? I was anyone want to take a guess at the next block. if you remember without looking what comes at the top of our HTML document?
Lewis Benson: Yeah Gregory.
Lewis Benson: What's that? so the body actually comes second.
Gregory Robertson Jr: body body
Lewis Benson: I'm going to put that in though, and there's a sibling element to the body that goes above the body. And this is where all of our metadata stored. Do you remember the name of that element?
00:05:00
Gregory Robertson Jr: he started with murder and they start with men.
Lewis Benson: it encapsulates the metadata. So we have a body because we have a body it's easy to remember we have a head. So it's kind of like the human body where we have. The body and then we could even put a footer in here. That would be the bottom. It's part of the body I guess. But there's the head. And the head gets a few pieces of metadata.
Lewis Benson: The two important ones is the character set and the viewport. So I'm just going to put these on manually. let's see if it UTF is the one we're looking for.
Lewis Benson: This actually gave me more than I normally would put in here. The main thing I want to see is charset 8. I'm going to remove this extra stuff here.
Lewis Benson: And the last one is the viewport. And I believe it's going to be VP. Yes, that looks like everything into this correct configuration. So these two pieces of metadata are necessary for your screen readers and your accessibility. This one is especially important for whenever you're using media queries through CSS if you don't have Piece of metadata then your media queries won't function properly and things won't resize the way they're supposed to because it doesn't know what kind of device you're on and it doesn't know what your current screen viewport is. And then the last one is anyone remember what the last one is. It's not a metadata, but it is an element within the head. It's one that I update every day when I create a new document.
Lewis Benson: It's the information in your browser tab.
Lewis Benson: You can remember what that element is called.
Lewis Benson: This would be the Ryan. I started this boil it there for you.
Ryan Arnold: that you
Lewis Benson: Yeah, so that's the title.
Lewis Benson: Is that where you're gonna say iris is the title.
Iris Coats: Yeah, that's what I was going to say.
Lewis Benson: Yeah, so this is the one that updates your browser tab. So I always like to put something in here relevant to the page that I'm currently on. That way I know exactly what's going on. Remember each HTML document you have can have its own title that specified to that specific page. So then we have our body. And this is the basic building blocks. This is the bear fundamentals. This is exactly what gets created whenever you use your image shortcut. So if I just redo that again. I can see that that comes up automatically through the image shortcut there. Does anyone have any questions about these basic building blocks or is there any confusion about them or anything like that? This would be the best time to ask just because we're in review week.
Lewis Benson: And for those who weren't here, whatever I started there are no graded assignments this week. when we do our Workshop. We're just gonna be working on individual practice things and using W3 schools to go through some exercises and it would be a time for you to catch up on your assignments and again any assignment that isn't at least a 16 out of 20, you're going to want to resubmit that to get at least 16 points on this so that you can get credit for that. Every assignment does need to have at least a 16 out of 20 in order to be considered past on each individual week.
Lewis Benson: Yes Ryan get a question.
Ryan Arnold: I can't remember from week one if we actually covered what viewport and 8 mean.
Lewis Benson: We didn't dive too deep into this and week one. We did a little bit in HTML, but this is the configuration of your keyboard and what language it's going to interpret everything in and what I mean is if you were to have let's say a Russian language. It's not going to be using the 8 keys or Isis take characters. It's basically just an entire list of all possible characters another example might be Japanese. You wouldn't have the Japanese alphabet within 8 this character set includes the English alphabet. It includes numbers uppercase all of the symbols that are on your keyboard or in utf-8 and there's a lot that aren't on your keyboard as well.
00:10:00
Lewis Benson: But it's basically everything you would need to write code in the English language. If you were going to write code in Japanese, then you might have to use a different character set for that. And then the viewport this is typically for identifying what kind of device you're on whether it be desktop or a mobile device and what your current screen size is. And the initial scale is also used to determine your font sizes. And that sort of thing based on your device type. so
Lewis Benson: if you don't include this piece of metadata, if I were just to remove this whenever I'm using media queries and CSS, they actually won't work. They'll just not function at all. So you do want to make sure you're including this for scalability and I'm pretty sure even like the bootstrap layout techniques also break whenever it's based on your screen size. So you want to make sure you're including this. Again, whenever you're using the image shortcut, it's always there and there are a lot of other metadata that could be included. There are analytical type metadata as well. Sometimes you'll be using third-party. Applications to integrate into your website for example Google analytics and they might tell you to include their own metadata.
Lewis Benson: And whenever this is read by the browser, it'll see that little piece of metadata and then Google can send that data back to their server and do whatever analysis that they are actually doing on your website. So there's a lot more metadata that could be included up here. A lot of it's for third-party things if you interested inspect random web pages too, for example, if I open up I'm sure MDM even Google probably has stuff going to bring a new tab over.
Lewis Benson: I'll bring up GitHub and see if they have anything interesting. so if I go all the way to the top to their head
Lewis Benson: So We had a lot of links in here.
Lewis Benson: We have some Scripts.
Lewis Benson: Notice if you recall we always put our scripts at the bottom of the body. They have their script in the head and that's because of this attribute right here Typically, you don't write it like this. You typically just do that and it works just the same whenever you defer in the script. It will make sure that it loads your body before it runs the script. That's all that is and that's just a way to put your script elements in your head so that when your page is inspected, they're not blasting your body. Some developers This other ones still one of the bottom of the body just comes down to preference. It'll work the same way. All I'm seeing is a lot of scripts in Here's all the rest of our metadata. So this looks like some stuff for servers. We have a route pattern looking for the home page.
Lewis Benson: A lot of the stuff we're not going to be able to understand just because it's going to be based on how the developer built the web page and what they were looking for when they build it. So a lot of the stuff is very specific to their own application to their own servers and it allows you to customize a lot of thing here. We have Google site verification. This has something to do with Google. I'm not 100% Here we have octolytics. I'm assuming this is some sort of analytics thing that they created. So again, there is a ton of metadata on here. Stuff that we never covered or got into and again a lot of this is customized metadata for their own applications. And a lot of this doesn't really matter to us anymore a lot of the newer development. Procedures don't require you to include all of this metadata like this.
Lewis Benson: So they have a lot of stuff here. And then we get down to the body. So just to show you that there's a lot more you can add through metadata. And this is a lot of things that your javascript's going to be interacting with so you could select a piece of metadata and then over here. We have an API URL so you could tell your JavaScript to find the metadata with the name browser stats URL and then grab the content which is this URL here and then you have your JavaScript visit that URL and get whatever data that is required for your application. So let's just an example of what you can do with metadata a lot of this is for JavaScript integration as well. Does anyone have any other questions about those?
00:15:00
Lewis Benson: So make sure I don't miss anything in my notes Here. All right, so I'm going to go over a few of the basic elements again.
Lewis Benson: I'm just to kind of just get that General basic recap. So we don't forget. The first one I want to talk about is the header element This is an element. I like to use at the top of my body or at the top of anything really it just implies that this is going to be the top and it's going to contain data that belongs at the top such as bold text that's going to have any sub information underneath of it. So one thing you could put in here would be like an H1. And in your H1, you could just say. Maine long tent or blog something like that. So there's the header. This is going to be at the top of this page. And then maybe we have a sub header. It's actually the title of the blog.
Lewis Benson: And then under the title of the blog you might have a paragraph element that says author.
Lewis Benson: We have our author there and then maybe we have another one that is published date.
Lewis Benson: And all of this is basically part of this This is all. Included in that and then anything else that goes into this article or in this title is also going to be under this H2 and that could also be an H3 and the H3 could be title of chapter.
Lewis Benson: and then within the title of the chapter We would have another paragraph element and we would have all of our actual content in here and I'll put a couple paragraph elements to show that.
Lewis Benson: And then perhaps in the middle of all of this content, you could also put another subheading. That's an H4. And this could be like a subsection of the chapter. It's still part of the H3 chapter. But the H4 is under the H3, so this is included into that. You could put another H3 in here. And this would be the title of the next chapter.
Lewis Benson: Anything I put after this is not included inside of this section here. So with that we could actually encapsulate all of this into a section could say section.
Lewis Benson: And then wrap all of this in there that way this is all wrapped together into one pace. It makes the search engines work better. It makes the screen readers work better. And we can do the same thing for this one here as well.
Lewis Benson: And then we can put a couple paragraphs.
Lewis Benson: And we don't necessarily have to have two subsections in every single chapter that could have been a one-off thing that we did here and even inside of the subsection we could have a div contain this it's be a generic container and then within here we could put a couple paragraph elements.
Lewis Benson: Something like that. I remember the div doesn't have any sort of. Identifying information about what is contained within this div. But the section tells us this information within this section is all related. Everything in here is part of this one chapter because it's in that section everything within this section is part of that as well and we can actually make this even more semantic. by including an article and encapsulating everything within that article.
Lewis Benson: And I'm just going to take all of this and put it in there.
Lewis Benson: So now everything's encapsulated within an article. We have our paragraphs elements and we have our subsections. Does anyone have any questions about what I'm showing here how I'm deciding to put these semantic elements on why I'm choosing an article here or a section or anything at all. Anyone need any clarification about any of this?
00:20:00
Umar Z: If we can just quickly tell us I mean when you're moving along you can just tell us why are you choosing it? the way you asking Yes.
Lewis Benson: So, yeah. The reason I'm choosing it doesn't come down to one way is more correct than another you could choose not to have an article on the reason I'm doing it this way is just because there is a structure laid out if you look on mdn there is some basic guidelines on how to lay out semantic HTML. And it comes really down to your opinion of it for the most part. So you don't necessarily have to have an article here or a header here. But what you want to do is what makes the most sense to you when you're building this because if it makes sense to you, then it's gonna make sense to web scrapers and Screen readers. And with that you should still follow some guidelines and I'm gonna bring up. DN on this and show
Lewis Benson: let's see. So here it's talking about the very basic parts of it. And it's comparing this H1 to a span and it's out saying the span is not semantic, let's see if we can actually find the breakdown on how you'd want to Nest these might have to look into SEO.
Lewis Benson: And I don't want to get too deep into a rabbit hole here for the most part again. you just kind of do what makes sense whenever you're laying these out. A lot of it will come with practice and a lot of it will also be up to who you're working for. Some companies will tell you to actually do this in a certain way. They might say don't put a header here. Just make this an H1. They might tell you to put the article under the H2 because they'll say that the title isn't part of the article again, it comes down to the opinion of who you're working on. But for the most part it's pretty easy to decipher how you would want to lay something like this out. So, you know that your articles gonna have multiple sections you want to make sure you're using paragraphs to describe a paragraph and just using the correct elements that describe what the content is.
Lewis Benson: One thing to avoid is if you wanted larger text on your page probably don't use a heading to increase the font size. I'm actually go live on this and we'll see what this currently looks like. So here we have this really large text. We have our author. And our chapter we have their little subsection here with our one paragraph and we have zero styling on this right now, so we can't really see how this is divided up as a subsection, but we could make that have smaller font size there. But again, I don't want you to use these heading elements just to get larger text. So if you were to want to create let's say a card component. I'll do it underneath of here. I'll do this one as a section. And within this section we're going to have a div that contains.
Lewis Benson: a header
Lewis Benson: and a quarter
Lewis Benson: and I can also put An article on this as well, if I wanted to this would be kind of like the body of the card. You could also make this a section. Again, it comes down to whatever feels right whenever you're making this do what makes sense. So in this header, I'm going to put some text in here that I'll just put my name. And then in the body, I will say JavaScript is cool. Just a little bit of content there and then in the footer. I'm going to do the right mbol. That's the Ampersand semicolon 2023 so it's just a basic little card there. And I'm gonna put an inline Style on this. So this will be equals
00:25:00
Lewis Benson: we'll do black solid one pixel So let's take a look. Here's that little card. We're currently a set is a block element. So it's going across the whole page. So if I want to I can make this into an inline block. So we could say display.
Lewis Benson: Inline block and then it only takes up as much space as it's current content. So it makes it a little bit smaller there and I'll just add just a little bit of padding so that it looks a little bit better.
Lewis Benson: But I forgot my semicolon.
Lewis Benson: And we'll go 10 pixels.
Lewis Benson: And there we go. So we have this card and again if I wanted my name to be really large. I wouldn't necessarily want to use the H3 or something here to make this larger and it might have large text it might have the Bold font we're looking for but it's not a good practice if this isn't a heading of some sort of section, this is just a card. So the H3 doesn't really make sense here. If this is a very basic card maybe I have 20 of these cards across my page and each card contains some sort of product that we're trying to sell and that case you wouldn't want to use an H3 just to get larger time here instead we would put the paragraph element or even a div if you think a paragraph is describing this incorrectly. And then we want to actually style this.
Lewis Benson: and say can't wait. This will make it bold. I'm just gonna say 900 which is the max. So here we're getting that bold font, and then I can change the size of this.
Lewis Benson: We'll go 30 pixels. And now it's bold and it has that larger font size. So again, I just wanted to iterate over that we don't want to use headings just to make things larger we can use that and CSS we can do that through styling. so it doesn't help your application as far as a search engine optimization point or from an accessibility point to use a heading element here instead of perhaps a paragraph element or even a div sometimes. So that's just something to keep in mind whenever you're trying to design this out.
Lewis Benson: Again, you just got to kind of think about how you're going to lay out a page and what semantic elements make sense to make this layout work. and again here I could probably include a paragraph element perhaps I could do that as here as well or even I believe it's called sub. I want or some component like that. To give us that small text.
Lewis Benson: So it actually will reduce the size. We don't really use this much anymore. Typically, we'll just use CSS to do that now, but it could be something useful from a semantic side to use this element just to show that this is just some subtext. It's not the So just another element to keep in mind and keeping your tool belt if you need it. Is there any questions so far?
Lewis Benson: All right, so I get into a few more elements here. I'm going to create a new page to work in just so this one. Isn't getting too messy.
Lewis Benson: Index two, I'm actually gonna call this page two. I don't like using index to because it doesn't make sense. You only ever have one index. Unless it's in another folder. So we'll call page two dot HTML. Use my image shortcut this time.
Lewis Benson: And we'll call this page two.
Lewis Benson: HTML demo
Lewis Benson: and some other elements that are pretty commonly used. We have the nav element. If you remember this is used for any sort of navigation. This doesn't necessarily have to be a nav bar. This could be side navigation. It could be Links at the bottom of your page. It could be in your footer. Maybe you have all of the pages that you've created linked at the very bottom of your page if you have an about page a let's say you have a 10 page application. You could just list every single link inside of your footer inside of a nav element and it's just a kind of a good way to cover all of that. So I'll have one at the top and in here. I'm going to create a list. I'm going to do an unordered list for the navigation just because that's typically what we use for navigation links aren't typically in any sort of order. So an honored list makes sense.
00:30:00
Lewis Benson: And then I'll put in a few allies.
Lewis Benson: within each of these These anchor tags aren't going to actually be linked to anything at the moment, but I do want to put some content so I'll just break the word link so I can copy and paste this down. Let me just copy the whole Li.
Lewis Benson: And I'll just make each of these a slash.
Lewis Benson: Let's look at that output.
Lewis Benson: And there is our side navigation with all these different links. And they all take us back to the homepage.
Lewis Benson: Again, we would use styling to get rid of these dots and to maybe lay these out in a horizontal manner if we wanted to. But we mainly want to focus on the semantic HTML and not necessarily The Styling. But one thing that does help with styling is laying things out correctly with your HTML. so if you wanted to have Two of these links on the left and three of these links on the right you may have to include a div here.
Lewis Benson: And wrap to those links in a div. that way you could push things apart in a way that
Lewis Benson: when you're using your flexbox. It would actually force all of these as far away as they can but instead of forcing the links apart, it forces these dibs apart and there's only two divs if I Collapse these down. Instead of forcing all the Allies apart will force this div away from that div and we can push them across the screen. And the reason I can do that is because in my HTML, I'm including the generic divider here. It's allowing us to separate these three links from these two links. keep that in mind whenever you're designing some sort of web application. A lot of times I like to draw this out using a whiteboard application such as figma or Remo Envision mirror. There's a lot of them you can use that are all free. There's just the drawing application and you can just kind of build out the page using squares.
Lewis Benson: And make it as low Fidelity as you like but it gives you an idea of how are you going to push these apart? And how are you going to lay this out? Whenever you're actually building out your HTML. So you do want to plan ahead and make sure you're putting your dividers in the correct places during the initial build so that you're not fighting it later. Definitely want to keep that in mind as you're designing these.
Lewis Benson: Does anyone have any questions about this? why I chose these divs here?
Lewis Benson: All So then the next thing I want to cover is the main element is where all of your content will go that relates to the page that you're currently on. So if our page two was let's say a car rental page. This might be all of the content related to deciding which car you're going to rent. you might have advertisements outside of the main or you might have links to other applications. Those will all be again outside of the main. So if you have your main and let's just put a few pieces of content in here. within my main I'm going to give the article some sections.
Lewis Benson: And then with each section, I would have the actual content of the page so I could have a couple paragraphs.
Lewis Benson: And Within These I'll put a little bit of lorem. Let's warm and this one as well.
Lewis Benson: And I'll just copy this down to the other sections here.
Lewis Benson: And we'll format that so this actually looks a little better. Alright, so we have our paragraphs. if we had something in here that was not related to the article, but it still made sense to have it in here. That would be your side element. And this could be like a fun fact. Let's say you were writing an article about George, Washington. And this would maybe specifically about his crossing of the Delaware. Then you could put in aside in here and talk about his wooden teeth. this would be unrelated but relevant information
00:35:00
Lewis Benson: again, so aside. It doesn't do anything as far as styling goes. So we can see that there's the random paragraph in the middle of all this. But it does allow your SEO to know that that's not part of the main article. So whenever the search is actually going through and trying to find what all this contents about. It will actually kind of skip over this one a little bit. And go on to get all the relevant information.
Lewis Benson: So that is important to where to use that type of element
Lewis Benson: another element we covered in week one was the block quote element. I believe it does give a little bit of style. I mean put one in just to check. If you had a paragraph that was a quote by somebody. I will just pull one right here. I would want to wrap that within that block Let me write the quote First. we'll say
Lewis Benson: you or do not there is no try. And this is a quote by Yoda. And now I can wrap this and the block quote.
Lewis Benson: And I believe it just adds a little bit of padding if I recall.
Lewis Benson: What my browser go?
Lewis Benson: Perio page 2. Yeah, so we get that a little bit of padding there it pushed the text over a little bit. If you were to do this in markdown, you would actually get a vertical line here. And you can get CSS that's pre-styled such as bootstrap that will also give you that vertical line. I'll show you that real quick. It's very similar. I'll create a readme DOT. MD here and we'll put a block quote here. It's just a carrot to make a block quote. And up the same one.
Lewis Benson: some page two
Lewis Benson: Like that, and now I'm going to bring that up.
Lewis Benson: and it seems that we got the raw instead of let me just go So there in the sample, I guess I'll have to deploy my browser doesn't know how to parse markdown. So I would need to use GitHub pages to get that but we can see in the preview here. It gives us that vertical line if I had some more text in here. I'll just duplicate this a couple times. on the same line
Lewis Benson: You can see that vertical line there showing that this is a block quote. We also get that little bit of indentation. So just one of those little things to kind of keep in mind whenever you're wanting to do block quotes off than they do have a vertical line there. So that maybe something you'll have to include through CSS. You could use some sort of styling library to get you a pre-style block quote, but they are useful and they do give a nice pop to your page with that little bit of indentation. There's a little tiny details definitely make the biggest difference. Whenever you're working with this.
Lewis Benson: Anyone have any questions about the block quote or its usage?
Lewis Benson: All right, so I'm going to go down to my footer. and within my footer I don't have a footer yet, but I'm going to create a photo right here. This is going to be the bottom information about my page. And something I want to include in here is a navigation. on this could be for social media to navigate across for example, Facebook Twitter and
Lewis Benson: Linkedin so I could say I'll put this into a subheading. We'll do an H4 here. And this will say socials.
Lewis Benson: and then within the nav I want to put a ul and a couple you allies.
00:40:00
Lewis Benson: And within the L's we're gonna have anchor tax. I'm actually going to do that all at once. so we'll put this with a three back in and there were three anchor tags and then each of these I'm going to put a different. social media
Lewis Benson: I'll use the old name for now just because it's easier to understand for me and Linkedin. And then I could actually create links to these here through the slash He's booked calm. This is World bug web. So if I wanted to I could include a link on each href, that would actually redirect me there. Let me drop these down. So they're multi-line. So this is easier to read.
Lewis Benson: There we go. And let's check a look at that output.
Lewis Benson: So there's our Links at the bottom. Again, this is gonna footer and I'm using a nav element and it just kind of shows you how you can use the semantic elements correctly and they might not be exactly where you thought they would be so you might have a side navigation. Then you might have a nav bar and then you might have a nav and your footer so you could end up with several navs on your Five six of them on a single page just because of the way you're laying it out. and then after the nav we might just have some basic copyright information. So I'll do the ampersand. copy 2023
Lewis Benson: we'll just put a random company name there.
Lewis Benson: And there we have our footer with our Social Links in there. And this is in a nav element and this is also part of that. It's not part of the nav element, but it is part of the footer.
Lewis Benson: Does anyone have any questions about any of that layout and the way I was planning that layout? So to make sure we're all in the same page with everything here.
Krystal Jefferson: So that's the copyright sign right there.
Lewis Benson: This is one way to do it use the and copy semicolon. I found this to be the easiest way. You can also copy and paste it. If you go to your browser and just say copy,…
Krystal Jefferson: Okay.
Lewis Benson: right symbol.
Krystal Jefferson: Okay.
Lewis Benson: And right here is one I could just control C on that. And then I could paste it right in.
Lewis Benson: So there's a couple ways to get it.
Krystal Jefferson: I see.
Lewis Benson: I just find this way is a little bit slower to reach it. Looks like there's a few different versions of it there.
Lewis Benson: So yeah, we have. three different sizes
Lewis Benson: something else you can do which is something I introduced. This is kind of a little bit of a tangent, but I want to show this anyway, there's a website called a quantify.
Lewis Benson: So it's a Quantified art design. I usually just Google search for a quantifying to find this. And you can hit browse icons.
Lewis Benson: And then here you can pick any type of symbol you want. So if I wanted to copyright. Here's a bunch of different types of them.
Krystal Jefferson: 
Lewis Benson: You can get your social media Notice, that one was animated. So if I wanted to put this in my page I'll scroll down you click HTML. And then there's a tag I'm going to copy the script tag in. And I'm just going to place this at the bottom of my page.
Lewis Benson: And once you have this script tag, you can grab any one of these icons you want as long as you're on the HTML View. You just copy this element here called iconify icon. And you can paste it wherever you want. So if I look at Facebook, I could paste it right beside the word Facebook. And let's see the result of that. There's that animated logo.
Krystal Jefferson: 
Lewis Benson: So you can get whatever you want off of this iconify site. It's kind of like a icon framework in a way. And they lay these out and a lot of different ways. You could also grab the SVG version of it. And copy and paste this SVG code directly into your HTML and that would work just the same. I've just found it easier just to go to HTML put the script tag at the bottom of your file and then use this customized element that they have here. and the script tag will it's using JavaScript to find this element. And then it just changes it to whatever one it'll download it and use it. So it's pretty handy to use this. Again, it's a little bit of a tangent, but I thought it would be a useful thing to know especially when you're wanting to put in your social media icons. I believe they have the new Twitter logo as well.
00:45:00
Lewis Benson: Yeah, they got the new X logo there. LinkedIn is on here some of these are animated, so I'm not But if we can't show all icons, I believe there's actually one that shows all of the animated icons on here.
Lewis Benson: Here we have some spinners.
Lewis Benson: And there's a lot to pick from.
Lewis Benson: for your animated icons and then you could pick between these. So if you wanted to make a weather application with animated icons, here's some options for that as well again, I know there's a little bit of a tangent but HTML could be a little bit dry. So I like to show little side things here.
Lewis Benson: All right, so I'm going to get back into the code here. so we have our Social media Links at the bottom. The one thing I haven't shown is linking to other pages. I mean I kind of did it up here at the top. We're linking back to the home page. I'm going to create a link on the home page to come back to this page. to do that I'll do that at the top of the page. under the header I'm just going to put an anchor tag. And this is going to link to page two dot HTML.
Lewis Benson: When you put it that one thing to remember, I actually almost did this is don't put a slash here. This will work currently if I go back up here. Hit page two this currently works. But remember when you deploy this on GitHub pages. If you have a slash right here, it will remove part of the path on your url. It'll actually take it back to your Base L which is your username. It doesn't have your repo name included. So make sure you don't put a slash there. The only time that matters is whenever you're deploying through GitHub pages, I have it covered any other deployment options. I'll actually probably cover one this week called netlify whenever you're using another deployment option. You can put the slash there when you start using Frameworks, it's almost a requirement to have slashes on your links. So just one of those things to keep in mind.
Lewis Benson: The slash will break on GitHub pages. So let's make sure this works correctly page two. back to link
Lewis Benson: So there's our anchor tag. I don't have this wrapped in any sort of element, but you don't always have to. Especially if it's only one link, you might not need to in that case. If you had this as a link that was let's say a call to action. Maybe it was like
Lewis Benson: sign up now. A lot of times you might be tempted to make this a button. So you would say button and then you put this inside of it.
Lewis Benson: I wouldn't recommend doing it this way for one that doesn't really look very good. You could put the button on the inside of the content. I guess let's try that. But it's still not really a good practice to have a button outside of a form element. Anytime you want to have some sort of call to action. So this might look like a good call to action button. What you want to do instead is use a give.
Lewis Benson: And then style this div to look like a button and you can do that with bootstrap. If you remember the class BTN Dash primary, this would make this look exactly like a button even though it's a div. So that is an option or you could do it manually. If I were to create a style element here. And say BTN anytime I have a BTN.
Lewis Benson: A BTN class what? That means is we're going to have a border. of inset
00:50:00
Lewis Benson: black one pixel
Lewis Benson: And then the BTM primary class. I'm kind of defining my own custom versions of bootstrap now vtm primary would give it a background it's kind of a blueish green. I guess I'll just do blue. And then kind of lighten it up in here a little bit.
Lewis Benson: Something like that. and then we also need to make sure that this is a display inline block so that it doesn't take up the full width of the page. And then it looks like we need to add some padding.
Lewis Benson: I know this is a lot more work than just using bootstrap. I just wanted to kind of demonstrate what I mean by you can just create your own version of this. Something else too would be a border radius of three pixels. color we'll set this to White.
Lewis Benson: And so that's starting to look more like a button now, even though it's actually an anchor tag just one of those things. Like I said, you don't want to use a button outside of a form just because when you do that a search engine scraper might find your page and think that you have a form there and It's actually a call to action telling you to go to their sign up page. and it might not find everything on your page whenever you have a button in place of an anchor tag.
Lewis Benson: So just a little bit of review too. We have our style element there any time you use style you can write vanilla. CSS directly in between these and the other I don't think I covered this much. I think I barely mentioned it all actually, but I just want to cover it now since we're covering over. HTML elements and that's the script tag for JavaScript. You can actually write vanilla JavaScript directly right here in between these script tags
Lewis Benson: So that's something to keep in mind. If you ever need to just put a real quick application. And you have two or three lines of JavaScript. You don't necessarily have to create a file. You can put your JavaScript right here. You don't have to Create its own Javascript file for that but keep in mind you can't use strict here. You could put it here, but it's not going to do anything.
Lewis Benson: Unless it's actually inside of a file so. It's one of those little side notes there. You strict doesn't really work inside of the script elements. So you are using an older? Not strict JavaScript, so I do recommend using the new file, but if you ever need to do something real quick, feel free to use a script element and you can write your vanilla JavaScript like that again, you can do everything here. You can function. add two
Lewis Benson: that takes in a and b
Lewis Benson: return a plus b you could do something like that. And then somewhere in your code. You could put another script element.
Lewis Benson: and do add
Lewis Benson: two five plus five
Lewis Benson: Let's do a quick refresh.
Lewis Benson: And I'm not going to see anything because I didn't log it.
Lewis Benson: Or write it or whatever it is you're doing with it.
Lewis Benson: Add to it not to find did I spell it wrong?
Lewis Benson: I might have to actually move this inside the same script. Sometimes it reads these at different speeds. So if it read this bottom one first and then it read the top one. And then it's not gonna find it. That's one of the…
Umar Z: You have W couper case.
Lewis Benson: why I don't like using these. good catch there. That is something to note that too is like sometimes these do read at different speeds when you have multiple script tags. But yeah, that will definitely solve that.
Lewis Benson: and there we're not a number because these are
Lewis Benson: not sure why it says not a number. Five because I put a five our plus there instead of a comma there we go.
00:55:00
Lewis Benson: Yeah again, you can write vanilla JavaScript right here inside of your HTML. It's not the best thing to do, but you will see this you'll run into this quite a bit actually when you're inspecting webpage. you'll see a lot of JavaScript written right in also you might run into. a third party sources that you might be using on your application where it tells you to actually put a script element in your HTML and include whatever JavaScript is required for whatever it is you're trying to do. For example, you probably seen them at my GitHub. I have that scrolling text. Let me just bring that up real quick.
Lewis Benson: If I go to my profile. I have this text here that scrolling. if I just clicked on it. This actually takes me to their documentation and I believe they're actually is a spot where you can include this. This one's only marked down.
Lewis Benson: I had one of these on an HTML page before. And it had me do exactly what I'm saying and put a script element and then whatever they had written this. I had to copy and paste it into my HTML and then it just kind of worked like that whenever it says that you can always create your own file, too. You don't have to Have it directly inside of your HTML. So there are more than one way to do it. Just one of those things to keep in mind whenever you're building anything out with HTML.
Lewis Benson: Okay, let's see where I left off here.
Lewis Benson: Alright, so I want to go over the ordered list now, so I'm actually gonna create another page for that. This will be a page three.
Lewis Benson: and I'll place my boilerplate
Lewis Benson: I'm not sure if I set these up exactly the same across all the pages. But if you're doing a multi-page application and you have some sort of template for how you lay out your titles. And I do look the same in this case.
Lewis Benson: Other than this one says where to go. This one just says document.
Lewis Benson: I'll just leave it at document for now. But sometimes you get these mixed up and it gives it a weird behavior when you're looking your tabs, and you're navigating so I just wanted those little attention to detail things make sure that if you do lay out your titles in a certain format that it's the same on every single page. That way you don't have that unexpected Behavior. Right. So for the UL. I'm just gonna go through a bunch of semantic stuff first and we'll put a header here. I'll put an H1.
Lewis Benson: hello from page 3 Also in the header, I'm going to put them now.
Lewis Benson: and in this nav I want to create anchor tag. That takes you to index.
Lewis Benson: And anchor tag that takes you to page two.
Lewis Benson: and one more that goes to page 3 even though we're already on page three. I like to have A navbar, that doesn't change its size. Krystal.
Krystal Jefferson: So instead of the index HTML you can just put the slash right there.
Lewis Benson: Yeah, so when you have slash this means root and index.html is considered root.
Krystal Jefferson: Okay.
Lewis Benson: That's a great question in the second half. I'm actually going to be going over kind of how this works. So you'll get a little bit more information on that then after our break.
Lewis Benson: I just want to go into I should say how index.html Works a little more.
Lewis Benson: And kind of deciding on how you want to plan the layout of your page. This needs to be dot HTML. Okay, so there's our navigation just for now. I'm going to do display Flex that way this is horizontal.
Lewis Benson: And let's make sure this is working.
01:00:00
Lewis Benson: It is horizontal, but it's all pushed together. So I also want to give it a gap.
Lewis Benson: There we go. I'm missing page two.
Lewis Benson: it is. Alright, so there's our little nav bar there.
Lewis Benson: So under the notices of 1 is in my header as well. This is something you'll see occasionally on web pages. They'll have a big heading up here maybe even an image underneath of it. We call that a hero image. It just kind of makes the page pop a little bit gives it some accent and then under the hero image. They might finally have their navigation set up so you don't always have to put your navbar to very top. Sometimes you can put a little bit of content above that. That's something you'll see. I think it actually maybe not MDM.
Lewis Benson: They do have something up here. They have this little Banner. So again, they have a little bit of content above their navbar.
Lewis Benson: Let's look at Wikipedia. They only have side navigation. They don't have an upper nav bar. Other than these two.
Lewis Benson: So yeah again, you can put content above your navigation. It's not a requirement. There's no set rules on that type of thing. But one thing you do want to just remember is to make sure if it is the top of your page probably put it in a header. If it has to do with navigation then use naviga use your nav element and only have one H1 per page. If you have two H ones that will throw off search engine optimization for sure and it throws off screen readers. I should only ever be one H1. if you need larger text in your H1 ucss
Lewis Benson: All right. So next And inside the main I'm going to create an ordered list. remember the UL. Which actually these should be in a UL? And allies I'm just going to leave them there for now. That's why they didn't have the little dots next to them. But again, those should have been wrapped in a UL with allies to be more semantic because this is a list of links. I'm going to create an ordered list now, though.
Lewis Benson: And we're going to create Ally times five. And we'll say item one.
Lewis Benson: Item 2 is probably quicker just for me to copy and paste these. Then change the number.
Lewis Benson: And let's take a look at that. And there we have our numbered list. I didn't put the numbers there that happened automatically and we do have some attributes we can use to change the list items. Let me actually bring those up here. We'll say.
Lewis Benson: And here are the attributes. We can change the start of the number we contains the type. So we wanted to we could use a capital letter and it gives us those Roman numerals. Let's try that out real quick. type equals capital i let's look at that output. And then we have Roman numerals instead of regular numbers. So again, I'm using the type attribute on my ol and let me show that again in mdn. So here we are in mdn with the Roman numerals.
Lewis Benson: All right, so I'm going to take a break now when we get back, we're gonna cover tables and then we're going to cover out just that basic structure I was talking about how do you lay out your HTML files so that they're easy to navigate through and so that it doesn't mess up your URLs whenever you're doing navigation like that. Let me start the 10 minute timer and we get back. We'll cover that.
Lewis Benson: Okay, I'll see you in 10.
01:10:00
Lewis Benson: All right, Let's dive right back into this. We're going to talk about. tables can be a little bit of a complex. Item other they're syntax can be a little bit hard to remember. but for the most part once you get the hang of them, they're not too hard to interpret in the code. They definitely can add a lot to a page as well. They can make things laid out in a way that it's really easy to read as a user. a little side note tables actually at one time were the number one way to lay out a page. They would actually have the entire body of the page as one large table element.
01:15:00
Lewis Benson: And they would put all of the content on the page in each table cell and they They were hard to understand and read you could imagine because of the amount of nested elements you got going on here. so instead of the main being your main you had a table element as your main. And then you had your tea head your body and your T foot and the table spanned the whole width of the page and you might have links on the right hand page you get to figure out exactly which cell those would be in and then put them into correct table cell and you would have hundreds and hundreds of table cells like that and then to fine tune things. You would have to Nest tables within tables. And move things around that way and it just wasn't a great experience to lay things out like that.
Lewis Benson: You might run into some Legacy code where they're still using a table layout if that's the case. Hopefully you're allowed to update to a more modern layout technique because that would be a nightmare to work in. So the table is broken into. Just a few parts here. It's very similar to the HTML. We have a t head which contains our data. a t body which is the main content of the table and then optionally a teeth foot. This would be the bottom of your table if you're doing something with numbers. Maybe this is where you'd put your totals at. It could also just be some general information about it. In order to make the table laid out in a horizontal manner you need to have rows and columns. So in order to build the row for every single row you make you need a TR that represents that row.
Lewis Benson: And then I'm going to use in my header that will make the font bold and it'll give it a slightly larger font size and this is also symbolizing that this is a header element. the top of the column not an actual data another piece of data, and it's also makes it easier when you're pulling tables with JavaScript. Maybe you're doing some web scraping and you're actually grabbing all of this HTML through JavaScript. It makes it easier to figure out what belongs where as far as data goes. So we'll use th for that.
Lewis Benson: And I'm going to put the Header here like this.
Lewis Benson: So let's take a look and see what it just looks like so far. This would be page four.
Lewis Benson: So there we have the table Nothing too special here yet. It's just a line of text. It looks like any other could have been like an H3 as far as the font size goes.
Lewis Benson: But they're inside of our HTML we could see all of those nested components and this is already getting a little bit kind of messy with the code. So again, if you had to lay out with one of these again, it would be a nightmare to try to do that today. You might have 20 tables nested inside of each other just to get things to lay out the way you want them to look.
Lewis Benson: So there is the table header. I'm going to put Some rows with some Kate cable data in here. So we'll do a TR. Inside the T body and then within this body. I'm going to put this is the sell on the left
Lewis Benson: I forgot my TD. Let me put this inside of there.
Lewis Benson: So each cell is called a TD for table data and then each row as a TR. And then I put one more TD. This is the cell on the right. Let's take a look at what this looks like now. So here This is the cell on the left. And this is a cell in the right but we don't have anything to distinguish them. As far as styling goes. I'm going to look on MD. And I think if I remember they do have some preset styles on here.
Lewis Benson: and I believe it's
Lewis Benson: I got some JavaScript. Here's some CSS. I believe this is for smaller screens, but I can always modify this to make it work. Lets what is a style. And I'll just paste that in right there. And let's see what this looks like Okay, so this is the cell on the left and this is the cell on the right and then our table header is on the left as So if we wanted this to actually go the whole way across the top so this was a title for The table we can use an attribute.
01:20:00
Lewis Benson: Let me get back into my
Lewis Benson: we can use an attribute columns band like this call span equals and then you just say how far you want to since we only have two data cells we can put that two there. This doesn't look very good with those lines.
Lewis Benson: And it doesn't seem like there's my span now we can see that's going the whole way across the page. The layout still isn't great because I didn't tell us to be centered or anything. So in order to get that I'll just do an inline style here. and say
Lewis Benson: text align Center
Lewis Benson: and that didn't move it over. it's because is where the actual text is living and it's not taking up the full width. So, I believe I would need to span that one.
Lewis Benson: So move this down to our th there we go. that's going the whole way across and we have ourselves on the left and right so that looks a little bit better. It's still not like the best looking table ever. But it just kind of gives you an idea of how you can make that span like that and then if we wanted to actually have A real headers for each of those cells. I can create a new row here. and then put new th's in this I have two of them and I would say left so sell like that.
Lewis Benson: And now these are bold these are headings for these columns. And this is a title that overlaps the entire thing. Again, you can this is so messy. But again, these are Essential to understand these are used all the time on different websites, especially if you start building Web Solutions for businesses that aren't customer facing. You might be building. some sort of table that they're going to be looking at for their database so they might have a database that is grabbing all kinds of user data and sending it to a business only web application and you may have to build some sort of interface that grabs that data and just kind of present it in a meaningful way. So this would be an example of
Lewis Benson: when you would need to use a table. They're also used client side as well. You might be displaying data. Maybe you're building a site for that has a menu on it some sort of restaurant web page. and in that menu they may have a table of Drinks that I might have the names of the drinks and their prices and then the different sizes you might have three different sized drinks in each. One of those has a different price and then their name, so that would be a spot where on their menu they want to have a table layout. So there is a lot of real world use cases for these. Does anyone have any questions about any of these? tributes or any of these elements Has anyone confused by any of this?
Lewis Benson: One thing to note about the table is I would never expect anyone to have every element on the table memorized unless you're using them every day. So again, you want to use your MDM sources here. You want to come to mdn and just kind of remind yourself of what the syntax looks like. I hear they have the table. the header we're using that call span and if I would have just looked at the documentation I can see that that's on the th and we have our TRS So again, there's a lot of good information here a lot of ways to remember. some of that syntax notice this a deprecated attributes here. That means you shouldn't use these attributes, but they still exist and because they exist you might run into them being used if you're in some older code bases
01:25:00
Lewis Benson: So just keep in mind you might see these. And a lot of these are being replaced with CSS. So we have our aligned there notice. I did that with inline styling instead of this align attribute. They're saying set margin left and margin right to achieve the same effect as the Align attribute. So they're telling you you CSS here in place of that. They had a BG color attribute at one time. This would have been to have each row on a different color. And now we can accomplish this pretty easily using CSS.
Lewis Benson: a lot of attributes here that are deprecated one thing I wanted to show as well. Since we got into the JavaScript and we understand some of the stuff. There's actually sort methods. that you could basically just copy and paste these right into your JavaScript and set up. A way to sort these tables in different ways and they have a demonstration here. We can hit play and it has the table being laid out one, two three. And they have the JavaScript here and you can interact with this.
Lewis Benson: If we change these around maybe make this one a b and this one an a we should be able to reverse this.
Lewis Benson: And we got three two one. So they have this built-in method here that you can use.
Lewis Benson: This is basically it for as far as how this works. You just change these letters around and it will sort it in a different way. I know that because I see the parameters here A and B. And I can see what it's doing. It's taking. The text content of a variable and it's using the local compare method on it and it's comparing it with this B text content. So it's kind of more of a complex way to look at Something else you could just do is a Less than b like that. And it should give us the same result and then if we switched us around. We should get the other result.
Lewis Benson: Maybe not.
Lewis Benson: with the a plus b, It doesn't seem to be behaving but you can't tweak these methods to make them work in different ways the sort method. They're like eight different ways. You can lay this out. You can use the minus plus the greater than less than all kinds of little things you can do with it. It's a very complicated method or can be very complicated method you could also just remove all of this stuff and not have a callback method and it'll just kind of pick for Self on how it wants to laid out. So it looks like it's by default already running it in the 321 format. So maybe I have to switch these from B to a again.
Lewis Benson: It doesn't seem to be changing now. It's not responding to what I'm putting in. Again, that's kind of a tangent anyway, but I just wanted you to be familiar that this is here and you can use this. You may have to get on stock overflow for more complex Solutions, but there's always something out there that can help you to get the solution you're looking for. So if you needed your table to sort in a certain way, somebody's probably asked the questions. I just give it a quick search see if there's anything on stack overflow. And it can usually help you get along with that. Here's some other. JavaScript stuff on here Again, if you ever need to use tables read through some of the stuff and see what you can do with this. It can definitely be helpful. There we have displaying large tables and small spaces. Here's that CSS that I took earlier. They're showing away where you can make it. So it's scrollable.
Lewis Benson: that can be really handy. In fact, I've actually used this a couple times. where I wanted the table to be able to be displayed on mobile, but I didn't want them to have to scroll on the entire page. I was one of them to scroll just the table and then if they scroll the entire page notice a table's not scrolling with me right now.
Lewis Benson: All right, that pretty well covers the table. Again, I'm not going to get into every single deprecated attribute like we did in week one. I just did that because we needed to have a familiarization with attributes during HTML. The main one here is the call span. This is the main one you'll want to use. You could use CSS to accomplish the same thing. Typically though I just use this one because you can tell it exactly how many columns that you actually want to spend.
01:30:00
Lewis Benson: So next thing is laying out your HTML we have a lot of stuff here. So you might want to start creating folders. So whenever you start sorting your files into folders. The way this works is part of your url is the folder name. So typically whenever you're deciding on a folder name, you want it to be something that you're going to be navigating to so if this is going to be Say the user's information. You could create a And then within that user folder you can create an index.html. And this result here would be the same. As if I were to on my homepage here, it might actually yell at me for this. I could do a user dot HTML.
Lewis Benson: So having a folder called user with an index.html. This is the exact same thing and let's see what happens whenever I actually want to see if this will argue. We're gonna do an H1. And this will be inside folder.
Lewis Benson: And we'll do an H1. And this will be inside root. And let's see which one wins when I go to HTML. I already know which one's gonna win if I type I get inside folder. If I type slash user dot HTML and I get the file name, but if I didn't include the dot HTML and it's one of the navigate to that folder. That's a good way to organize all of your HTML, but then have an overview file that just kind of gives you the high level. what's this for about? What's everything in here going to be related to and then each link that you navigate within this folder. That would be your sub data, so this would be a really good place to use bread crumbs if you remember that from bootstrap.
Lewis Benson: It was just a series of links that basically broke down your url path and how to get here. So for this one it would have a dot dot and it would have user telling me that I'm currently at user if I was doing breadcrumbs. If I started creating more files and folders nested within here and I would obviously have more breadcrumbs to navigate through. But again notice I have two indexes here and I said earlier. That if I wanted to create a link.
Lewis Benson: I'll go ahead and let's go to page two. I believe it does. So if I create this user
Lewis Benson: I'm just going to put in the word user like that. What this will do is it'll navigate to the root of this folder is index.html.
Lewis Benson: So let's hit that link. and see that in action. Without page two on HTML and the second link should take me to user. And there we are inside the folder. So where this is important is whenever you're planning these web applications, you're going to be wanting to plan your url path as well. So something I've seen students do before is They'll create a folder CSS And they'll create a folder called JavaScript and they want to place all of their files within this because some applications might have five six JavaScript files 30 40 HTML files and maybe five or six CSS files. You might have different themes going on dirt mode light mode and all of that would be done through different files. But what they'll end up doing is they'll move all of the into this HTML folder.
Lewis Benson: And if I do that, I'm actually just going to move this one here. This turns into slash HTML and that's a really weird URL. If you were going to be visiting a professional web page. You probably don't want to go to slash HTML. Let's just on You want to go to something that makes sense? The URL path is part of the web experience. So it should be taken into account whenever you're designing these and laying out your actual HTML pages. So I would call it something like user and then I would have all of that user related data within there. Does anyone have any questions about that?
Lewis Benson: So I'm gonna demonstrate a more extreme version of this I can have another folder in here. called admin
01:35:00
Lewis Benson: And then this one could be another index.html.
Lewis Benson: And I'll just put an H1 that says inside admin. And then we can put another folder. And this one would be called.
Lewis Benson: Hidden page I guess just kind of making these up as I go. And then another index.html. So I have a ton of index.htmls but one thing to note is each index.html It's the root of whatever folder it lives in now your overall route is your most outer index.html, but it is living in this. few week folder So this does live in a folder and notice whenever you're on GitHub pages. The name of your repository is part of your url path. So whenever you go to slash. It actually will try to take you out of your repository because it's trying to take you back a step. And again, that's why you want to make sure on GitHub Pages. You're not including that slash inside of your url. So, let's see all these in action here. This is our hidden page.
Lewis Benson: Okay, so that we have slash user. And then we have slash.
Lewis Benson: admin And then we have slash. the hidden page
Lewis Benson: Like that, so there's our URL path now. because the way I navigated this Each of these is an index.html but within each of these directories I can have a lot more files. I could put tons of HTML files So inside my admin folder I might have another admin page two dot HTML and this is part of the admin directory. But it's not the root level of the admin folder.
Lewis Benson: I'll put an H1 here.
Lewis Benson: Should be from admin page two and we call this admin hyphen page 2.html. So I'm going to back this up a little bit. And say slash admin page, I believe there's a hyphen page 2.html like that. So we're in the admin directory, but we're accessing a different HTML page there. And I would not be able to access anything within the nested directory. If I'm on the admin page too. I still have this hidden directory here. With this other index in there. So I just wanted to make that clear on how these index.htmls work and why they're important. They can be used to leverage within your pages
Lewis Benson: So we call it the entry point or the root level just allows you to access whatever folder you're in. So this one's review week is actually my most outer folder. So that's why because my Current directory is review week. Then. It just becomes whatever slash is the directory It's your working directory. So if I actually go to my terminal here. And I type PWD. We can see. all of these folders and files here, but the only one I'm actually working in for this project is this review week for so the name of this folder from the perspective of my application is just a slash.
Lewis Benson: More specifically it's actually dot slash if I'm currently in the review week older. I remember current directory and slash means folder. But you don't have to show that whenever you're inside of your HTML. but if you want to you can Let me go to page two again. I could say dot slash. I'm actually not sure if this should take me to my root level still. So let's just test that out to make sure that's working the way I think it does.
Lewis Benson: That's the third link. Yep. There we are back to the root. So again dot means current directory and then slash means the first folder in the current directory because my current directory is the review week folder. This is the same but something to note this shouldn't behave the same. if I'm inside of the admin folder Let me just throw that in here real quick. This should take to the index of the admin folder
01:40:00
Lewis Benson: I'm actually in the wrong spot here. I'm actually going to put this in admin page two. I think that'll demonstrate how this works a little better. So I'm going to go to admin page two again.
Lewis Benson: And that is second user. Admin page 2 and when I click this link, I would expect that to take me to the admin page. So there we are inside of admin. Because the dot is relative to my current folder and my current folder is the admin folder. So when I say dot slash I'm saying take me to the root level of my current folder.
Lewis Benson: Are there any questions about that? I know that's probably a little confusing. I just want to make sure that everyone understands how that works. This is an important concept because this is something we're definitely going to be diving into more when we get into Frameworks.
Lewis Benson: All right, if we have no questions. I'm gonna move forward here with I want to call it assignment, but it's just kind of a way to practice some of the HTML for one thing. It doesn't hurt to just kind of build out some pages. But I want to show you a resource again. This is when you're learning how to code. This is something that's life long. You're always going to be learning you could Master HTML today. Know everything there is to know about it and in a year, you'll know nothing about HTML because it's all changed. So you're gonna have to continuously learn and a good example of that is on the table here. We can see let me scroll the way back up.
Lewis Benson: So all of this stuff here is stuff that everyone learned at one point and now you don't use this anymore. There's a whole new way to do it all so I want to show you another resource just to kind of practice this stuff because you need to be continuously practicing and using and learning. One of the resources I like to use is YouTube but for today's assignment or Workshop, I'm gonna have us go to W3 schools right to their home page. I'm not like searching anything in particular on here. But they have these references on here which are great for reviewing HTML and making sure you understand all of the syntax and everything. It's just a great way to practice. So we can learn HTML here.
Lewis Benson: And there's two parts to this that I want you to look at if you make it through the first one then you can get into The first one is the HTML exercises. So we scroll down to HTML exercises and we can start the exercise. I'll bring that up in just a second and the next one is the HTML quiz test. So it'd be a great way to just test your knowledge and By coming in here and just taking It's a 40 question quiz. It goes over pretty much everything. We went over in class. There might be a couple of little Concepts in here that I didn't cover or maybe cover all that much. So just kind of go through this stuff and practice that way you can reassure yourself that you understand what's going on with HTML and then you can ask questions if you're uncertain about something or if you come to a quiz question, you have no idea what the answer is.
Lewis Benson: You could try to guess on it and then look up the answer or just ask your TA or your instructor. Hey, what's this concept about? So this is something that we can use for practice today. If you're behind on any assignments though, I'd ask that you probably should get caught up on those assignments because after this week. We're running into Capstone project. And then after Capstone project, that's it for level one. And if you're missing assignments, you won't be able to roll into level two. So you need to make sure that you have all of your assignments turned in. I believe we have five weeks before the official start date of level two.
Lewis Benson: I have to check my calendar. I believe it's the second week of January. So Monday was January 2nd, so I That's the second Monday in January. So we get a pretty big break for the holidays. The main reason for the break though was basically to get caught up and review on a lot of this stuff and to give you a little extra time on your Capstone projects. you might have questions and I might take you more than a week to actually build what you're trying to build. So that'll give you that little bit of extra time to work on that as well. So yeah come into W3 schools. And we have the quiz here. But before we do the quiz try out the actual exercise. there's quite a bit of a pieces here. It started me at attribute. So I'm gonna go back up the basic.
01:45:00
Lewis Benson: And all you do is you just complete the send packs basically starting off. These are really simple. They do get a little bit more complex as we go. But you just put these in like that. And then hit submit answer and it tells you if you're correct. You can go to the next one. This would be an anchor tag. So I'd put the lowercase our closing tag is here, so I can't put a closing tag there. and then we need our closing slash a and close that out submit answer and then if you get to one that you're not sure about this one we know is 1. With the slash in front of it to close it. This might feel a little bit tedious at first, but this does get a little bit better.
Lewis Benson: Let me get into headings. I know this one. Threw me off the first time. I looked at it. So it says I actually skipped this part here and just start with Of the largest and end with the least important so it could be a little confusing what you're supposed to do here. You might put H1. And then put H2. But that's not actually what they want. They actually want you to write the word. Hello here and put the closing.
Lewis Benson: The closing text. So if you're not sure about something you can always show answer and it shows you the final result like that.
Lewis Benson: And I was actually able to copy and paste one of them. So for some of these more tedious ones like this if the answer you could do something like this. That one didn't give me the H5, which we'll see. control V could I wouldn't call it cheating as long as what the solution is. And obviously that one bh1. Yeah these start to get a little bit more complicated. Here's our Scripts. This one actually has a little bit of JavaScript in it here. So you have to use JavaScript to change the text size of the paragraph element to 40 pixels. So it'd be really good practice to just run through all of these. Maybe you'll pick up something you haven't seen before. Here I could see we have VAR.
Lewis Benson: To find the text bar person as programming code.
Lewis Benson: So, let's see what they're showing for that also. They're using the code element. Which is just a way to show that this is going to be code in your page. And then CSS what we applied to this text that way or you could have pre-written CSS that'll find these and actually do the proper syntax highlighting and make this that blue color and then make that white color that you would normally see.
Lewis Benson: Does anyone have any questions about this little exercise? Again, it's just a good way to review the HTML and if you're already all caught up on all of your assignments then. You can work on this but if you have any assignments that you don't have at least a 16 out of 20 on you'll need to redo the assignments that let's say you got a 15 out of 20, you'll need to resubmit that with the discrepancy corrected so that you can get at least a 16 out of 20 to have full credit for that. And then if you're missing any of the previous assignments, make sure you got those in and I think there were still a few on the work that needed to do I believe it was the developer tool so Make sure you get that in as well. That way you can get the full credit for every part of level one. Are there any questions at all about the requirements or about this exercise anything at all?
Lewis Benson: Yes, Ryan.
Ryan Arnold: How do you find that exercise again? Sorry.
Lewis Benson: Yeah, so we just go to W3 Schools homepage. You can go to Google and just type W3 schools. And it'll be your top link. And here we have the HTML I clicked learn HTML. And then to get to the actual exercise if I scroll down they start the exercise link right here. That's how you get to that and then here start ghtml quiz do whatever one you want to do. Maybe start with the quiz if you feel like this is going to be too tedious on the exercise. But It's a really good practice. The quiz can give you some insights maybe on some of the stuff that I didn't cover in that depth like Aria labels things like that.
01:50:00
Ryan Arnold: Thank you.
Lewis Benson: Yeah, no problem. And this is the kind of the tool we're going to be using this week because we have our CSS here. We have JavaScript we do get into some other stuff on here as well. We're not going to be going over. These other things we do have bootstrap. So we'll use the bootstrap toll whenever we talk about the JavaScript tool and again, that's as pretty much what the workflow is going to look like this week. We'll have our basic review and then we'll go into some sort of exercise using W3 schools in order to kind of get some practice. You don't have to use this tool if you want to practice by writing code feel free to use your vs code. If you feel like you want to be making repos building out little websites, that's also great practice. And while I have everyone here, too, I also want to show you.
Lewis Benson: Just some sample ideas for possible Capstone projects. Just so you kind of get an idea of what that looks like. Let me bring up the repo for that. I believe there's four different projects. And again, you don't have to pick from these poor projects. It's just kind of an inspiration thing.
Lewis Benson: I'm getting the live site pulled up here.
Lewis Benson: Okay, so here were some ideas that you could use here's a portfolio idea. It's a very basic stuff, but it covers all of the skills that we covered. this is all done with bootstrap. We have some. For these are called testimonials Here's where the different projects you could add. So this could be a good template. If you needed the portfolio, you could use this as kind of some inspiration on how you might want to do that. I'll see if these aren't connected anything. Typically when you have a project on your page, you would click the learn more button and it would tell you all of the details about what you learned when you did that project.
Lewis Benson: For example this project one might have been a web page for a pizza company that you made a clone of Pizza Hut's website or something like that. And then in the learn more you would say I used HTML JavaScript CSS to build web That was to Mere Pizza Hut's website doing this here were some Blockers that I ran into I learned how to do this, you just give all kinds of information about it your thought process how you laid it out and as much information you can employers love that stuff. They want to know what you learned. They want to see that you're growing. So just an idea. This one for the JavaScript implementation. We have a dark mode. You hit this and it toggles between the two style sheets. So it's using JavaScript to toggle between them. We have an about page here.
Lewis Benson: I thought there might be a modal on this one. doesn't seem like there is let me get back to the Other ones so here is a store landing page. This is Ryan's Rough River. So we sell kayak Pages. It looks like one of the images broke what they'll get a new image uploaded onto here. So this one has a pricing calculator for the JavaScript? So we could pick from canoe how many hours number of people and now it's starting to calculate because we have enough information to actually get calculations. Could say yes, we want to have life jackets and that for coolers and it's kind of just building all of this out using what we learned in JavaScript. It's automatically using an on-change event.
Lewis Benson: here is the other page on here. It's just three little tab laid out with bootstrap. And then we have a contact modal. This is through bootstrap as well. And it's just kind of gives you an idea of what you could make. If you wanted to build some sort of store application. Again want to fix that broken image there? So that's not like that. Let's go back. Here is a guessing number game. I'd probably expect a little bit more content on your splash page than this. I don't think this even took me to a splash page. this is the splash page. So yeah, this is kind of bare bones. Maybe have a little bit more content. This one does have an accordion here. We can make the game rolls appear and disappear. Then we have our start game.
01:55:00
Lewis Benson: And we put in a number between 1 and 100. press guests says we're too low. So we'll put in another number. Notice the guess is remaining went down. Too high at 75. So we'll do 67. That's too low. 71 and we got the right number. So I can hit restart game and continue to play. So it's a very basic application but it does cover everything we did. It has bootstrap. It has HTML at a CSS. It has JavaScript so it does meet all the criteria. But as far as something for a perfectional portfolio if you want to include this on your portfolio one day. You're probably going to want to fill out the content of just a little bit more. Maybe have some images on here as well. so it hasn't like that nice stylized look.
Lewis Benson: And then we have a car rental service web page. So we have a navbar up here. The navbar takes us down through the different parts of the page. It auto Scrolls when I click on them, and we have a parasail showing us our testimonials here. I can click on that to make that navigate. We have some images looks like they're fairly old decent ones a little bit larger than the rest and then if we get started. it takes us to some sort of calculation here. Picking on sedan change this text here. So if I switch this to SUV, we can see that's changing the information on what's being displayed based on what we're selecting. And if we check the number of days, we'll say seven days. We're grabbing luxury car Calculate cost. And here we have a cost breakdown.
Lewis Benson: We have a tax included. So we have a lot of calculations going on behind the scenes and we get this little total showing up here. So some basic JavaScript. To get that to pop up there. So again, this is just kind of some inspiration. I'll throw these again. Before we start to Capstone, I'd probably build a couple more before them too. Just to get some more ideas. Again, you'll be able to build whatever you want. It's just the idea is you're using all of the tools that we've learned throughout level one to build some sort of website that has an aesthetically appealing appearance something that you would want to show to an employer and be like look, this is what I can do. This is what I built. And we'll have the Capstone week to work through that. Are there any questions about that?
Ryan Arnold: I was going to ask how long we would have for the Capstone, but you just said it in your last.
Lewis Benson: Yeah, so It's a Capstone week. It'll be similar to what we're doing now, but each week I'm gonna probably talk for 30 minutes before we go breakout rooms. And then it'll be similar to just an Workshop so I do like a 30 minute where I talk about maybe something that we didn't get to cover for example. Let me go back to. That portfolio page something I didn't cover is notice. I'm in I loaded in dark mode. I refresh them in dark mode. I switched this to light mode. It's still in light mode every refresh. So this is data persistence here. That's actually using something called local storage. That's not something we covered in JavaScript, but if you wanted to include something like that, I'm gonna spend 30 minutes talking about it. It's about three different methods. You would use in JavaScript to include that.
Lewis Benson: And then in your tools here, we can go to application. The local storage and we can actually see all that data. I got a lot of different sites that use this webpage But one of them is my dark mode right here, and it says it's currently If I switch my dark mode now, it's set the true. So basically jav. Just comes in here grabs this variable and says this dark mode true or false and then if it's true, it it has a different styling sheet different CSS. For dark mode versus light mode. It'll just switch out the link inside the HTML. So again, that's the kind of stuff. We'll be covering in this 30 minutes. It's like hey, this is how you do this. You want to use it take it if you don't worry about it.
Lewis Benson: I'll be covering chat GPT on one of the days. This is how maybe you could do some effective prompts and get some information Google board. I'll cover a little bit of the AI for 30 minutes how to use those effectively for those who aren't currently using them. Yeah, just little things like that. Let me get the breakout room started so we can get practicing and get caught up on our previous assignments. Does anyone have any other questions before I open them up?
02:00:00
Lewis Benson: All right, I'm gonna start the breakout rooms. I'll stop the recording.
Meeting ended after 02:00:28 👋