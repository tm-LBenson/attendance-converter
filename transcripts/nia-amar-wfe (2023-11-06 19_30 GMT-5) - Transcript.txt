nia-amar-wfe (2023-11-06 19:30 GMT-5) - Transcript
Attendees
Brian Kimbrow, Chantrice L, Daniel Perez, Elgin Sharper, Gregory Robertson Jr, Iris Coats, Justice Miller, Krystal Jefferson, Lewis Benson, Lewis Benson's Presentation, Reece Renninger, Ryan Arnold, Umar Z
Transcript
This editable transcript was computer generated and might contain errors. People can also change the text after it was created.
Lewis Benson: And I'm going to share my screen.
Lewis Benson: If it lets me. There we go.
Lewis Benson: Okay, welcome to week four. This is day one of JavaScript. We're going to be diving into what JavaScript is how it's used why we would want to use it. Has anyone done anything with programming languages in the past anything like some sort of interpreted scripts, maybe bash scripting python anything like that? Or is this everyone's first time to see actual programming language?
Iris Coats: It's really my first time since I started this class.
Lewis Benson: Okay, and that's perfectly fine that we're starting at the very beginning. so you're not going to be behind or anything if you don't have any prior experience, I was just curious because anyone who does have prior experience a lot of the stuff Okay, Ryan. I'll keep that in mind.
Lewis Benson: Any of these stuff that you learned in other languages kind of translates over but some of it could be a little bit confusing because there are some differences between other languages. So I just wanted to see if anyone had that prior experience. So JavaScript, here's the MD and documentation on it. It's a lightweight interpreted or just-in-time compiled programming language with first class functions would probably have no idea what that means yet. Basically it's trying to tell us that it reads the script from top to bottom. And it doesn't have to build all of the code ahead of time. That might make sense later and it doesn't really matter.
Lewis Benson: Under the hood what it is you can dig in deeper. If you want to compare the difference between a compiled language versus an interpreted language as far as what we do with JavaScript. We don't even have to know any of that. We just have to know how to use it. That's the important thing. It is a programming language. So how would we incorporate this into a website? I actually prepared a little snippet here just to kind of show you something we can do with it. If you open up your Dev tools, there's this console tab. So here's our elements and we can switch over to console. You can write raw JavaScript inside of your console. And this is the Google homepage. If I do a refresh there's nothing in here right now. You may see some Messages in here from your extensions if you're on other websites, sometimes a lot of stuff can pop up in here as well.
Lewis Benson: Sometimes there's apis going on and they're just spamming this and you can't even see what's happening in here. The Google homepage though that doesn't have any sort of noise going on. So that's why I chose to use this tab to show you this. So I can declare variables we'll get into what that is. I can do anything in here that you would do inside of vs code. So I have this little snippet here. I'm just going to plug this in and show you what you can do. And all this does is creates a button. I have to move my
Lewis Benson: here because I didn't actually set this up for styling and it says change color and when I click it it's changing the background color on the Google homepage. And that's all this little code Snippets is doing right now. It's also used for this little thing here to open this little menu up and close it. That's JavaScript at work. It's actually creating an element with your HTML to generate this here and show it on your page. And then when you click it again, the JavaScript will close that element. So I just want to kind of give you an idea of what this can do and what we're going to be learning to do with it. However this week we're not going to learn to do any of this yet. We got to learn at the beginning. So we got to learn how to type it out how it all works and what all the rules are first before we can get into actual manipulating web pages with it. We will still link it into our HTML because our HTML is going to read it.
Lewis Benson: And if you want to explore this a little bit on your own in the meantime, I kind of work ahead feel free to look on YouTube and things like that. But again, we're gonna be sticking with the bare bones for this week. We want to take this really slow and make sure that we understand all the fundamentals before we dive into what we call Dom manipulation, which is This elements are here. This is your document object model. And when you start manipulating this using JavaScript that's considered Dom manipulation. And that's what we're doing here by me spam clicking this button to change the background So that's where we're going to start. Let me get my notes or sorry my vs. Code opened up here. I haven't created a 4 yet for today. So let me do that. And this will be demo. 11-6
00:05:00
Lewis Benson: and I'm going to open this up with Let's open a new vs code.
Lewis Benson: And we will open folder.
Lewis Benson: All So this is going to be starting off kind of similar to what we've seen. I got some weird stuff going on here. Let's create a new file. I'm just gonna do an index dot HTML again. We need the HTML so that the browser has something to attach to all this javascript's gonna be read by the browser. So in order for the browser to read it, we need some sort of a web page to attach to it doesn't have to have any content though. This technically could be written all the Google tab inside that console. but working in the Google tab is a little bit tricky because you can't just go in and change your code on the Fly you have to overwrite your code. So it's a lot easier to work with here. So in the index.html, I'm going to create a body. I'll give it a title still just so I know where I'm at when I look at my browser tabs.
Lewis Benson: And in the body, I'm gonna put an H1 that just says hello world. That way I can see some content on the page and it's not just a blank white page. And then this is where we would actually write the JavaScript now, so I'm going to use a script element and I can write it inside of this script element here. So we're going to talk about variables.
Lewis Benson: This is how you would declare a variable in JavaScript and I'll explain what this is. So you would use the let keyword. And you type in a value of whatever you want. You can make any name up you want I'm going to say username. And equals and then I'm just going to put a word in here and I'll just put my name. And this is the first line of JavaScript and all I'm doing here is creating a variable that says my name it doesn't do anything. It's not All that fancy yet, but let me show you in the browser. Let's hit go live.
Lewis Benson: And I'll go through the syntax there and what each part of that means. So I'm going to go to inspect I'm going to go to console. and I'm just going to type in username the way I had it in my HTML so user name like that and we can see my name is right there. So this variable exists and all I did was took this string of text and I stored it in this word. And that's how you want to look at a variable is it's a box that contains information. So let me go back into the vs code.
Lewis Benson: so This is just an example of how you would write a variable. I don't want to continue to write my JavaScript inside of the script tag. So remember with HTR CSS. We did it in its own file. I'm gonna show you that now because this isn't considered to be the best practice when you're writing JavaScript. You want to make sure that you're in a JavaScript file, so I'm just going to create a new file. I'll you can call this Whatever related to what you're working on. You will sometimes see people use index.js app.js page dot JS. There's lots of different names you can use and conventions. I'm using script because this is a script element. It of makes sense to me. It's just a personal choice. I'm going to delete this out of here. And then I'm going to read I'm gonna bring this element back in just to show you the image shortcut. Script and then we have SRC right here. I want to click on that.
Lewis Benson: And this is where you just put in your file name.
Lewis Benson: And I'm going to put that variable back in but I'm going to change the variable name. I'll change it to my name just to show you it can be whatever you want. And I'm gonna put a different name here just to show you that it did change, too. So I have my let keyword telling this line that This is the name of the variable and this is the value of the variable. This is called an assignment operator. This is what assigns this piece of data to this container. And again, I'll get into more detail about all this as we go.
Lewis Benson: And I lost my browser. There we go. And then I'm just going to type in my name. And we can see the name Bob comes up.
00:10:00
Lewis Benson: So this is wired up correctly. I have my Javascript file linked to my HTML. Anytime you're writing JavaScript. I'm going to delete this out here. The first thing you do when you create a new file. It's kind of like your HTML boilerplate code. But this is a little bit shorter. There isn't a little shortcut to type it in but you have to type this at the top of every file and I'll explain why so you type in quotes you can use double quotes or single quotes, even though these are apostasies we call coats in the JavaScript world you put in your quotes and you type in the word use strict whoops not script strict strict
Lewis Benson: And then you put a semicolon and this was created this little tag you put at the top of your file. So that JavaScript uses it's kind of like the latest syntax JavaScript was originally written in 10 days and it's a very Loosely written language. There's a lot of pitfalls with it a lot of mistakes that can happen and as they would update JavaScript they wouldn't overwrite those problems they had with it because they didn't want to break web pages because this was used in web development heavily when it first came out so they kept all of the old broken code in the language. And they made it so that you could use the old syntax you could pick whenever you use strict at the top of your file. It'll use the newer syntax only and it doesn't allow you to use some of the old broken versions of the JavaScript. So I'm going to create another variable here.
Lewis Benson: On this line. I'm going to say let username equal. I'll just do Alice.
Lewis Benson: And I'm going to end this in a semicolon this semicolon is indicating that you're ending your statement. If I don't include the semicolon, it's not going to hurt anything. It wasn't originally it would throw an error but with the newer version of JavaScript, it'll still run the code just fine whenever it actually writes it it'll add that in for you best practice is to put the semicolon at the end of each statement. But if you do forget it's not going to be a big deal and prettier will add to semicolons for you as well if you forget them, so it's okay. If you forget to put a semicolon in just keep in mind that'll add that in. Can anyone tell me what this is again? I mentioned it once already this equal sign what it's doing.
Lewis Benson: So this is the assignment operator the equal sign. So we start off with the let keyword.
Lewis Benson: So we start off with let keyword to declare the variable. We have the variable name.
Lewis Benson: And then we have an assignment operator.
Lewis Benson: And then after the assignment operator, we have the variable value. So this is being stored on this container. this might not seem all that useful just yet. But these variables will be used everywhere throughout your code once we get rolling with this. But what's important that we understand how all of this works? So I'm going to use the browser again to make sure that variable took so I'm just going to type in user name and we can see Alice shows up inside of our console. And it has the quotes around it. That's an important note that I'll get into when we start talking about data types.
Lewis Benson: I'm going to do something here real quick where I remove U strict and I just want to show you something about this in case you forget it and I'm gonna say user name equals Bob
Lewis Benson: And now I'm going to type in that variable again. And we can see that it is Bob. But if we look at my file I notice I didn't use the let keyword here. That's because this variable exists. I'm not declaring it. I'm just giving it a different value. So I don't have to use the let keyword. what I want to show you is if I put this is a capital letter and I go back to the browser and Name still says If I type in username with a capital we can see Bob there notice. I didn't use the let keyword, but it still declared this variable. if I put U strict back at the top of the page It will actually throw an error.
00:15:00
Lewis Benson: And we see uncaught reference error username is not defined. So what this is telling us is that username is trying to be used but we never put a let in front of the word username so it doesn't actually exist when we look at our file. We see username and even has these three little underlines here. If we highlight over those three dots it says could not find Did you mean username? So the tools are trying to help us, but when I don't have you strict it doesn't care. It just creates the variable and let you use it. So if you have a lot of complex code and you have a lot of things going on and you accidentally put a capital letter instead of a lowercase letter. Instead of doing what you think it's doing. It's now creating a new variable and you strict is just one example where that could prevent that type of issue.
Lewis Benson: And using your Dev tools to make sure things are working is going to be essential. So when I look at here, I see we have this uncaught reference error and it even tells me what line it's on. So if I look over here on the right This says script js7. That means online seven this air is happening. So if I look back in my file. We can see online 7 I have this variable that has a typo in it and it's an uncaught. It's an uncaught reference error. So let me just put that back now I'm declaring this variable as Alice, but I'm reassigning it to be Bob.
Lewis Benson: This could be useful on your page. If you have some sort of authentication where you have to log in, let's say you have anything like Google sign in you want to assign your username on the web page to be one but if you log out this might change to somebody else later somebody else logs into your page. So each person will get their own variable name assign to whatever their name is. let me show you how that would work on our page here. I'm going to use something called document. dot right and I'm just going to type in user name like this. This is a method right here this dot right and it's coming off of this document. It's not that important yet. We'll get into that later. But I want you to know is there are some methods I'm going to be using. And they're going to help us to see some sort of output and see what's going on with our code also notice. I have a typo here does anyone see what that is?
Lewis Benson: And with my username.
Lewis Benson: Because I can see the three little dots there. It's kind of yelling at me a little bit.
Justice Miller: Is this the lowercase in?
Lewis Benson: Yeah, it's a lowercase end. So capitalization as I showed earlier too with the reassignment capitalization matters. the way I named this variable all one word or the capital N. This is called camel casing. It's whenever you start with a lowercase letter, and then every word you attach to it you use a capital letter. I'll do one more just to show you another example.
Lewis Benson: So this is a camelcased variable name?
Lewis Benson: And you can put whatever you want in here. You can have spaces. You can even use emojis notice. I'm using double quotes when I type it in my prettier switches. It's a single quotes. It doesn't matter which one you use you just have to be consistent. So if you're prettier giving you double quotes, that's perfectly fine. The time where that does matter is if I were to try to do something like this if I start with a single quote I need to end with a single quote. make sure you're being consistent with that. All document.right and I typed in my variable name. And we can see it comes up on the page here now. So all that does is just write it to the page so we can see some sort of output. And I'm going to show you a couple different alternatives. for getting some output so there's our document dot right?
Lewis Benson: Here's another way to see the variables that you're wanting to look at. You can use console.log. And then we put in our user this is a variable for the console.log.
Lewis Benson: I'm just going to paste that in there. and I should be a capital and this should be a capital M can be properly camelcased. Every other word except for the first word is capitalized there is a time when you will capitalize the first letter, it's called Pascal casing. Don't worry about that at the moment. Just keep in mind that it should start with a lowercase letter and every other word should be capital and this is just a convention. We follow it's not like a set roll. It's not going to break your code. If you do something like that or the minus will if you do underscores you can technically get away with doing this but in JavaScript, we use camel case and by convention so that everyone's the same across the board. So we have And for log it shows up here inside of the console. the other one see that
00:20:00
Lewis Benson: you zoom in down there. So here is my first output and then up Here's my first output down. Here's my second output. So this is a document dot right? It actually writes it to the browser page and then log puts it in the console. This is typically used these logs during development to figure out what's kind of going on with your code. what is the value of your variable at this time as your code changes as your script is running as we've seen a little bit ago. We have this variable here is called Alice and then down here. It's called Bob so I can do Remember this reads top to bottom line by line. So it's going to read this line first and then it's going to see this console.log. I'll put username. And then I'm just going to copy and paste this to line 9.
Lewis Benson: And I'm going to put some extra space in here. This is another thing with JavaScript. It's similar to CSS. I could put all of this on one line. It Prettier does care so it's going to put it back on two lines. You can split things apart. I could make this look like that. Because I'm inside of a string while I may but I could go like that and it still will read just fine. So it doesn't matter about your space and just HTML as well. So that's just one thing to keep in mind. We just space things a certain way to make it more readable. All right, so I have my second log online 12 and I have my variable declaration above the two console logs and this reassignment above this one here. So, let's see that.
Lewis Benson: So the first console.log is showing us Alice and then it gets reassigned to Bob and then we have another variable down here underneath. Does anyone have any questions so far about anything I've shown.
Lewis Benson: So that is how you declare a variable does everyone understand. What a variable is.
Lewis Benson: And just a quick recap think of a variable is just a word that contains data that word could be any type of data within it and I'll show you that Going to comment all of this out and this is the same as CSS and HTML you just highlight hold control forward slash and for a JavaScript comma it's just two forward slashes.
Lewis Benson: As I also shared that up here. I forgot to mention that. So I'm going to create a new variable and we're going to do instead of a let I'm actually going to do what's called a constant. It's still the same thing a lot in a const are very very similar. Except you cannot reassign a const like we did up here. So this variable can be reassigned to Bob whenever you use const whatever it is. Can't be changed.
Lewis Benson: So I'm going to use a number here notice. I'm not using quotes. I'm just putting the number in. That's because this is a different data type than this and I'll explain that when we get into the different data types. I just know that when you have numbers, you don't have to put quotes around it. Unless you put a letter in the middle of it, then it becomes something else and it doesn't know what to do. So we have our const birth year 1994 and I'm gonna show you the last way to Output this I'm going to use alert. And I'm going to put birth here.
Lewis Benson: Make sure we get that capital Y in there or it won't work. And we'll check the browser now. And we can see we have a pop up here, but there's nothing in it apparently. that's because I wrote it and then I typed it in. So here's the thing with the alerts whenever you write code inside of your vs code as soon because I've autosave turned on as soon as I write something it's going to try to refresh my browser when this alert is running. It pauses all of the activity on my browser and notice. I can't even refresh it right now. It has this little X going on. So what you have to do is you have to press And then refresh the browser and now it has the latest code it gets stuck at a certain point where it doesn't have everything you're writing. So right now I have this alert 1994 and I'll just demonstrate what I mean here real quick. I'm going to type in document dot right?
00:25:00
Lewis Benson: And I'm going to just type directly in here with the double quotes. Hello world. And I'll do it again with log. Hello world.
Lewis Benson: And then we'll do an alert.
Lewis Benson: Hello world. So that's three different ways. I'm outputting this hello world. Let's take a look at the browser and all we see is 1994 and that's because one this is That script never stopped running. It's still the original script running so vs. Code cannot refresh your page if your script is currently running. There may be some times where your script gets stuck and you end up having to close your browser tab in order to get it to refresh that can happen.
Lewis Benson: But when this is up you just hit refresh and now we have the latest code. So we see the alert for hello world and we see the console.log. I press OK and now we get the rest of the browser loaded up as well. That's the one thing about JavaScript is unless you tell it to it won't load your entire web page before it tries to start running so notice we didn't have this hello world. We didn't have this hello world until the script finished we'll get into how to do that. That's a little bit more advanced. Just keep that in mind in the back of your mind that if you have a good looking web page that you're working with right now, maybe you're using an old project and you just wanted to work in there your page might not load all the way until the alerts are finished running. Does anyone have any questions so far about the outputs about the variable declarations?
Lewis Benson: Or about the constant. I'm going to try to reassign this constant variable just to show you what it does. We'll say birth year. Is equal to 12?
Lewis Benson: And Let me refresh the page. as all these alerts
Lewis Benson: and here we get a uncut type there assignment to constant variable. Somebody have a question.
Umar Z: Yeah, I wanted to know what's the purpose of alert them?
Lewis Benson: The purpose of what? alert It was a built-in function.
Umar Z: alert
Lewis Benson: Sometimes you'll see this on routers whenever you have a web page to go in and configure them. they have a very basic version of functionality to it. They'll use the alert to be like, hey, you're running on this IP address. You just press I've also seen it come up before on web pages where You'll see it sometimes won't spam Pages too though. I actually create an infinite Loop and say you have some sort of problem. You click OK and it's like okay, you still have that problem or whatever. But it was just a basic way to the alert you user of something.
Umar Z: Okay, okay.
Lewis Benson: I can't think of any web pages off the top of my head that use alert. I did see it. The only place I can think of off the top of my head was when I was setting my SSID on my router in my password for my router so that people could connect to my wireless internet at my house. I had an alert pop up to tell me that what my IP address was. And then I had something else pop up too that looked like an alert, but it asked me for my username and password to log into my router. And that's called a prompt and I'll show you what a prompt is as well. I think today that might be tomorrow that we go over prompt. Yes tomorrow.
Umar Z: So what I understood that until you satisfy the requirement of the alert, it's not gonna load the page.
Lewis Benson: It won't load the page unless you set up some code ahead of time to say Don't run any of this file until the page is fully loaded. You'd have to have separate code for that though.
Lewis Benson: Yeah, so It goes into a lot more in-depth stuff that I don't want to get into right now, but you can stop the page from loading. You might be able to do it in your HTML if you say defer as an like this that might do it, I'm gonna try I haven't actually tested that with that before. We get through all these alerts refresh now, it still didn't work. So. Yeah, the only way I know to do it is to write a JavaScript function that says don't load to page until all of the content is on the page. I'm still getting this error here and that's because I'm trying to reassign a constant variable on line 27. Good question. Brian you have questions
00:30:00
Brian Kimbrow: But I just want to add it at something. you using a alert? It's really good when you're asking a pump or question inside of your when you're developing your project, it's very handy to users when you accidentally caution and trying to get an answer for something.
Lewis Benson: All right, and if anyone hasn't heard yet Brian is the new creating ta so if you do have any questions about grading on your assignments, Brian will be your point of contact for that.
Lewis Benson: He'll also Brian. Do you have a calendly link setup yet for tutoring?
Brian Kimbrow: I do not work probably get that done today.
Lewis Benson: Okay, cool.
Lewis Benson: All right, so I'm gonna remove some of these alerts just by commenting them out. Just so that my page is fully loading. I'm gonna typically use either I'll use log more than anything, but you'll see me use document right? And the reason I'm focusing my use on log Is because it's something you'll use forever document right? You're only going to be using during this first week of you learning JavaScript after this first week. This is kind of useless because you'll learn more powerful ways to write to the document. This is just a quick way to kind of put something on the page without having to do a whole lot of complex coding. So this is the easy way, but we'll get into the better way later. I'm not gonna say it's the hard way because it's not any more difficult than anything we've done. it has features more bells and whistles.
Lewis Benson: Okay, so we're currently still trying to reassign a variable there anytime you have an error in your code. It'll stop running at the air. because I had this reassignment going on line 27 any code I write after line 27 isn't going to run because it's going to break online 27. It's no longer going to be running. So that's something to keep in mind when you're working in JavaScript that things will break and you'll have to figure out which line number they're breaking at and from there get rid of the bug so that you can continue to work in the file and that's where logs can be useful. You can start throwing these off as you seen me up here. I have the log of the username on Alice and the log on Bob and get all four lines there. This little section here.
Lewis Benson: So if I wasn't sure what was happening with my username, I could have all these logs in here just to kind of keep track of what's going on because this can get pretty messy after a while. It's kind of like with HTML when your elements will be nesting stuff in JavaScript as well and it'll start getting that indentation going on that you see an HTML. Just something to keep in mind. We won't work too much about that at the moment. But I do want to show you something else with this.
Lewis Benson: with this console.log and it also works with a document dot So I want to do console.log. and I'm gonna put in some quotes and I'm gonna say username.
Lewis Benson: Is I'm going to put a colon of space. So this is all one string. Whenever you have quotes inside of JavaScript, that is called a string. And then I'm going to put a plus sign. And then I'm going to put the username.
Lewis Benson: And then I'm going to put another plus sign. And another string a space. and I'm going to say and their age is
Lewis Benson: space plus sign and then I'm going to say
Lewis Benson: birth year Actually, I want to just change this to age.
Lewis Benson: Because I don't want to add math into this as well. And we'll say 19. So what this will do is it will this plus this plus this
Lewis Benson: this is called string concatenation. Don't worry about the terminology just yet. We'll learn that as we go as I use it. And I still have these alerts when we do a refresh. All right. So username is Bob and their age is 19. So I forgot to put a space here. You can see what happens when you don't have the space. Because a string has to include spaces in order for it doesn't know that I need the space now. There's a cool thing you can do with the console.log.
00:35:00
Lewis Benson: Instead of using string concatenation. I'll show you an alternative. If you're just wanting to check variables like how I'm being here. I can remove these Extra Spaces. And remove the plus signs. and then put commas in between each thing and this only works inside of log and document outright and you anywhere else. It doesn't know what you're trying to do. But in these two functions, you can separate your parameters your arguments. These are called arguments. and we'll get into why those are arguments later but I keep saying that That's just the way this language is you have to learn one piece at a time. So these arguments are separated by commas and it'll put the spaces in for us that way.
Lewis Benson: So we can see username is Bob and their age is 19. So that's just an alternative to using the plus signs and then having to add in the spaces manually the concatenation is useful. There are times where you are going to want to do that. so I can say let hello equal.
Lewis Benson: Hello. space let world equal
Lewis Benson: world and we already have a space here.
Lewis Benson: So we don't need another one. And I'm actually gonna move this up a couple line. Sorry.
Lewis Benson: And then I'm going to say Hello Plus World.
Lewis Benson: And then we'll look at our console. And there we get our hello with the space in the middle because I included it right here and again I can replace this with a comma. And it's the same result except I have that extra space. So I have to delete that. There now it's the same result. Without the space so you can do multiple variables at once to see what all their values are. Just by comma separating them or using a plus sign. Has anyone have any questions about that? So everyone feeling pretty comfortable with the console.log document.right and alert?
Lewis Benson: so the console if you remember any of them remember this is the most important one. It's logging a value to your console. And your console is in your developer tools under the console tab?
Lewis Benson: Okay.
Lewis Benson: I do want to show you there is something you will run into eventually this is the old way to declare variables in outdated variable equals This is old school. This VAR keyword works very similar to this let keyword but there are some bugs with this that will run into and I'll demonstrate what the bug is on day five when we covered enough material for you to understand what I'd be talking about. But basically if you see
Lewis Benson: if you go to stack Overflow for a solution, you're looking for some way to order some components on your page or whatever and you found a code snippet where somebody was asking the same question. A lot of those old questions will use Devar let Q sorry the VAR declaration keyword just do this when you see that instantly replace it with let and everything should work fine. If it doesn't work fine if it's broken and the code snippet you found is two outdated and you'll have to come up with a different solution. Using VAR is very deprecated. Just don't use it if you see it change it. just so everyone is aware of it that is another way to technically declare variables. And without you strict you can do it without any keyword at all. Definitely don't be doing that.
Lewis Benson: All right, I want to talk about data types now. what is a data type? Yes, Elgin. You have a question.
Elgin Sharper: I see in your console dialogue with the username is. No, go back.
00:40:00
Lewis Benson: It was in the code. Yeah here.
Elgin Sharper: Yes, you have What's that called the coats I mean quotations. only on username is and their ages It only goes on those two.
Lewis Benson: Yes. The reason I have it on these two is…
Elgin Sharper: That's it.
Lewis Benson: because I didn't store this ring into a variable. I just So here string into this variable. I'm not saving this information anywhere. I'm just writing it out. We call this hard coding the string.
Elgin Sharper: Okay.
Lewis Benson: So I could even do that here I could say. Hello, my name this is valid code this will execute but it won't do anything when I pretty or did the parentheses. You don't need parentheses for this to be valid. This won't do anything but it is Red by the browser. It sees It just says okay. There's a string let's move on. It's not being stored into a container and I'm not putting it into a console.log to Output it anywhere or into anything. So you can write a string like this. You can write it out and you will be writing out strings occasionally. not without using them in something you will be writing them out the storm and variables and actually the proper word for what this is is a string literal because we're literally writing out a string.
Lewis Benson: There's some other data types that are more advanced that also have arrays objects. There are literals for those as well. But with strings this is a string literal. And that's all we really need to know under the hood of that. So let's get into some data types here. So I'm just going to put a code comment for each data type. And what a data type is and more specifically we're talking about primitive data types. I believe there are seven currently. We're only going to go over five data types. the other two big and symbol I'm just going to tell you they exist. We don't really use them for anything. We do in this course at all.
Lewis Benson: If you want to dive into that on your own later, once we learn more about data structures and algorithms feel free to do that. But I don't really see much of a use case to use those outside of coding competitions and stuff. maybe for data science So numbers is the first data type and I'm going to store these into variables. This would be an example of a number and it's just digits. You can be negative numbers.
Lewis Benson: We'll say negative. Bulls minus 1 they can be floating numbers. So that would be like 5.2345. I forgot this equal sign we always refer to it as an assignment operator. It's a good habit to try to get into the habit of using the terminology. I'm not saying you have to memorize it all at once. But if you hear me call this an assignment operator, you'll hear me call it that all the time just try to get into the habit of using the same terminology as I'm using. It's not something you learn in a day. It takes a long time to learn all of the terminology, but this is all one data type. This is all numbers. So I'm just going to log all these out. And we'll do score and I'm going to do separate console.logs for each one so that they're all on their own line.
Lewis Benson: negative and floating
Lewis Benson: Okay, so let's see those in the browser and here they are 5.345 minus one ten. And remember you can also access these in your browser because the code ran through your browser so I can still access to score variable. It lives in my browser right now. Does anyone have any questions about numbers?
Lewis Benson: So the biggest takeaway with numbers is they can be negative decimal and they don't have quotes around them. Those are the three things to remember about numbers. They can also be used to do math. I'll show that after we finish the rest of the data types. All right. So next we have strings. We've already seen strings. So I'll kind of go over this kind of quickly. Strings are just letters and characters. You can use even emojis in your strings.
00:45:00
Lewis Benson: You can use symbols as well spaces so I can say pound sign three one five or six five or whatever. So you can do stuff like this with a ring. We're actually going to Deep dive into Strings a little bit more. Let me find an emoji to copy in here to show that.
Lewis Benson: Paste a happy face there that's considered a character. So this is a valid string. Let me show that in the browser and I just want to a website that has copy paste emojis on to get that. You can just Google search if you want to see it, and I never log that so I'm not getting any log greeting
Lewis Benson: and there's our little Emoji in the console. That's always fun to see. Some developers get really upset when you use emojis others love it. I don't really care either way. I haven't had any issues with them. I've actually used them in actual tests for code and they would pop up in the console occasionally. But they never threw me ears or anything. So I'm gonna keep using them you do what you want to do. If you don't like them don't use them. So next we have booleans. Does anyone know to bullion is?
Lewis Benson: everyone who ever heard that term So this is the fancy coder way of saying is it So typically when you name a Boolean by convention you start with is and then we could say something like logged in. So this looks like a question is he logged in? true So it's a false and notice. There's no quotes around the true. It's just plain text without quotes.
Lewis Benson: Is 21 you can use numbers in your variable names too, as long as it doesn't start with a number. false
Lewis Benson: so that's how you would do ball answers. Not much to these at the moment. It's just a false and this could be useful later when we start getting into different types of logic. We won't really Touch Too Much on these though this week. Just know that they're there and when we get to them. They will make more sense. Has anyone ever heard of a null value? I have a comment here.
Lewis Benson: Looks like this. null to know is a data type. You'll see this in databases. You'll see it and other programming languages and it means empty and I don't mean that it means so if I could say this string doesn't have any characters in it. It's just an empty string no means it doesn't exist. It's nothingness. It's avoid This could be useful if you have A sign up page and somebody didn't provide an email. You could then put no in the database saying that their email is no they don't have one or maybe you have a work phone a cell phone and a home In your database, but most people only have a cell phone these days. So there are other there is no value. They don't exist.
Lewis Benson: Another example could be if you have a user profile and you want to include children. Maybe they don't have children. So you're not just gonna leave that empty. You're just gonna say no for that. Yes Justice.
Justice Miller: So that would be good for forms when we use that performance.
Lewis Benson: So forms kind of they give you an empty string you'd have to convert it to a null. But after you get the data from the form,…
Justice Miller: Okay.
Lewis Benson: yes, you could use no there.
Lewis Benson: Yeah, good question as far as use cases go. You don't see it as often as you would think it typically is used in more backend stuff than in front end type of code. So databases is a big use case for it. There are some front-end use cases, but it definitely used a lot and back end. So Knoll was just empty it doesn't exist. next I want to show you undefined. and if you notice in my browser here, actually it hasn't popped up if I declare a variable let number equal five we see that show up right here undefined.
Lewis Benson: That's because when you declare a variable, it doesn't return anything. So it's return is called undefined. That's all that means. When you see that pop up inside of your console at least whenever into con text of declaring a variable in your content and your console when you see this undefined, it means it returned undefined. Let me show you a use case for this and I use this quite a bit. I create a variable and I don't assign it to anything. I just say this is going to be the variable name and then later on I reassigned this empty variable and I wouldn't call it not assigned if I want to say a cop person let person so the variable exists. But if I call this variable. It's undefined. And then we log that as well.
00:50:00
Lewis Benson: and Let me refresh because I didn't type it in we get undefined there. I'm just going to alert it just for good measure just so we can see that in the ert alert person. So I'm calling the alert function. I'm passing in the person as my argument on the alert function. And we see So undefined just means that it doesn't know what it is. It's kind of self-explanatory. But at the same time nothing in many coding is self-explanatory. So undefined just means that it hasn't been defined and there's other times you'll see this come up. Maybe you're trying to access properties later that don't exist yet. And you'll see this undefined come up with that. You'll see an errors quite a bit as well. You'll learn to hate this seeing that word show up in your console.
Lewis Benson: So that's the undefined. Data type and I just want to do one more here. There's just one thing. It's still. Considered a number data type but it's kind of in its own realm. So if I tried to do
Lewis Benson: eight divided by 0
Lewis Benson: that didn't work out.
Lewis Benson: Because I have this going on. Maybe heard that alert if I do eight divided by zero. We get infinity there. I've actually never seen that usually it shows me not a number I could do eight mod zero. and there we get Na and So Nan means not a number if you ever see this when you're working with JavaScript, all this means is something went wrong with your equation. And by this percentage sign is a way to get the remainder and division. I'm not something we'll go over later. But this is trying to do 8 divided by zero and get the remainder and it's saying that So if you ever see Nan, that's all that means. It's not really a number data type. There's actually a way you can check your data types by type in pipe. of
Lewis Benson: I spell it wrong. of and then you just type in whatever. So I in We can see that if I type in pipe of six that is a number and notice this as being returned as a string. It's typing this in quotes. So anytime you have a string that gets wrapped in quotes. But even though this is saying type of six number being returned from the type of function is a string being returned to you, but it's telling you as a string that this is a number so that can be a little bit confusing. if I do type of true
Lewis Benson: I see that this is a Boolean. and this can be a useful thing to know but we can see that not a number is a number but it's not technically a number because it's not a number. So this is one of those confusing JavaScript things. Again. This language is written in 10 days. Bear with it. If you want to do web development, you don't have a choice you have to use JavaScript at some point. There are ways to use Python to build an develop, but you still have to turn that python into JavaScript at some point because the browser only reach JavaScript.
Lewis Benson: So does anyone have any questions about these data types or anything that I've brought up so far?
Lewis Benson: Yes album
Elgin Sharper: Yes, my computer was lagging in the beginning I missed. How did you set up index?
00:55:00
Lewis Benson: yeah the index. So this is similar to what we did with bootstrap. We have a script here. Let me take this defer off that doesn't actually do anything. So we have this script and I just Linked In My JavaScript file. Also. Keep in mind you can write JavaScript in between the two script tags so I could say alert.
Lewis Benson: Hello And I'll see that hello world pop up after I refresh my page. I didn't put it in quotes that I did.
Lewis Benson: what's wrong with my alert? Let me find my sorry about all the screen flashing there. Let me remove this alert.
Lewis Benson: save refresh Yes, Omar.
Umar Z: Yes, so for this one, we don't need to insert a link in the qualifrake like we used to do with CSS, right?
Lewis Benson: It's not a link. It's an SRC and it's just the file name. Is that without your question was?
Lewis Benson: it's the last thing that's written in the body. So anytime you have JavaScript and All your content is above the JavaScript and then the JavaScript goes last just with bootstrap whenever we went over a linking that in but one thing I'm glad you brought that up. So I'm actually gonna do this real quick. I'm gonna hit link CSS and we see you have an H ref here and it's getting linked to CSS. But when we look at script, it says SRC is equal to script.js and there's some other examples of this too. We had an anchor tag. We have an href if we have an image. We have an SRC. So what the difference between an SRC and an HF is the atre and linking it to a file and then it's gonna read that file. The SRC is embedding whatever this is into our current file so image is going to be downloaded into this HTML and it's going to be embedded onto Line 19. This is where
Lewis Benson: Lives line 21. This JavaScript is embedded on the line 21. So it is living online 21. And that's important to think about because just JavaScript is read from top to bottom. So as it's going down this file. It might hit this link and it's gonna just reference this file as it goes. It's not going to download the entire file to the Java or to your HTML. It'll reference it. as it's getting through here, it'll see this anchor tag it'll reference that if it needs it, but it doesn't download the page that you're being linked into for example if I put
Lewis Benson: Google.com right here. I'm not going to download google.com. It's a reference to google.com. But if I put an image in here and I actually include some sort of URL to this image, then it's actually downloading the image to my page and embedding it. So there's an SRC for the image and there's an SRC for your JavaScript. And then also you can write your JavaScript between two script tags like that and I just want to make sure that We got our hello world. It didn't like me writing in the one that I was using as a link. So if you have to write JavaScript inside of your HTML, make sure you write it in a separate script tag like that. So I have one script and then I have two script because this one doesn't like that. I'm just going to make this a self closer like that.
Lewis Benson: Never mind, the body doesn't like that. So, yes, we'll have to look like that. That's ugly but it is what it is. There are times some Frameworks let you do that. arly vanilla HTML is not one of those. Does anyone else have any questions about how to link this in or about any of these data types?
Lewis Benson: there we go. So we got our strings booleans and all of our numbers.
Lewis Benson: And JavaScript is a calculator. I did mention that whenever you have two numbers you can add them together. So if I say six plus six, I get 12, I can do one Whatever number that is divided by 3 gets that big decimal. There are some weird things with it. Trying to think of this. There's one I seen recently post. It was one point one minus. like that There are some weird stuff that'll happen. whenever you're doing decimals because it does some sort of weird rounding. I'm not sure 100% sure what it does under the hood, but it has something to do with the way around. So you'll sometimes see things like this. And that can be solved using different methods within JavaScript different functions to tell it round to two decimals.
01:00:00
Lewis Benson: But just keep in mind that this can't happen and you can get unexpected bugs like that. So that's where the console.log comes in handy. If you're expecting a certain number you may have to log part of your equation to see what's going on because maybe something like this is happening and you're expecting it just to be point one.
Lewis Benson: Does anybody have any questions about this right here This is one of those 10-day things. Yes, Elgin.
Elgin Sharper: Yes, not when I do my inspect I don't see console.
Lewis Benson: It should be right beside your elements. Let me zoom out. So here's my element. So here's on the side or is yours on the bottom like mine?
Elgin Sharper: It's on the bottom. I need to move to I mean,…
Lewis Benson: Okay.
Elgin Sharper: it's the side. I need to move to the bottom.
Lewis Benson: No, no, I can put mine on the side. So it's the same.
Elgin Sharper: All I have is Styles computed layout and events listeners.
Lewis Benson: These are right here on mine. Styles computed layout event listeners like this.
Elgin Sharper: Yes. Yes.
Lewis Benson: Is this what you're saying? And then at the top I have elements console sources. I click console.
Lewis Benson: Or maybe yours is laid out a little differently. this
Elgin Sharper: Yeah, I haven't had to do a Dropbox.
Lewis Benson: You found it then. awesome Yep,…
Elgin Sharper: Yes. Thank you.
Lewis Benson: no problem. Anybody else have any questions?
Lewis Benson: Yeah, I know. This is a lot of stuff and this is all going to be fairly dry. But again, we want to go slow and make sure we're understanding all of these fundamentals. But JavaScript is powerful. You can do a lot with it. It can be used in data science backend development. You can literally do almost anything with it. You can make games with it. They're not as good as something pythons even better than that, but something just like C plus plus C sharp. Any of those type of languages are definitely better for game development. But the cool thing is once you learn one programming language, the fundamentals between the different languages never change. So when you learn what a a variable in every language the way they're declared might be a little different across the different languages. But once you learn one, it's really easy to pick up another because the fundamentals are what you're mainly learning.
Lewis Benson: Also awesome awesome resource for JavaScript. It has more than anything else on here. So if we wanted to look at this alert function, we just type in alert. And they're showing it as That's a little bit more. Down the road. We'll talk about what the window is and why it says like this but here is the syntax and this is what we want to look at so alert and then you can put in a message. Here we're talking about parameters. The message is a string you want to display in the alert dialog? So this tells us everything that even explains how to use it here. It has two different options for how to Just use this one. This is just more writing. It does the same thing.
Lewis Benson: Let's take our 10 minute break. And we'll go over some more of this whenever we get back.
Lewis Benson: And I'll see you in 10 minutes.
01:10:00
Lewis Benson: Hey, welcome back, everyone. And if you're able to turn on your webcams, that would be helpful. If not, that's still okay. I understand. Some people can't or don't have the bandwidth or even if you're eating and don't want to be on webcam. That's fine. So the rest of the lecture is going to be on strings everything. That I can tell you about strings. I guess we don't have enough time for everything. I could tell you about them, but it's going to be everything. You need to know about strings in this next hour. So just a quick recap can help someone tell me what a string is.
Daniel Perez: a lot of words of the quote
Lewis Benson: Yeah, it's a line of words inside of a quote. So if I just type right here, I do these type of quotes and we can actually see that the browsers converting at the single quotes again. It doesn't matter if you're using single quotes or double quotes. but what does matter is that you're consistent so you can't do That we get an invalid or unexpected token and what this really means is we never closed our double quotes here. What it's expecting would be that.
01:15:00
Lewis Benson: It thinks that it's still ended here. All right, so Let me open up the script. And I'm actually gonna create a new file. I'm going to call this Springs dot Js. and I'm going to import our script into our HTML
Lewis Benson: and this will be Springs thought Js.
Lewis Benson: Also, these will read in whatever order you put them in here. So keep that in mind when you have multiple JavaScript files. They do read from top to bottom. All right. So, where do I start? What's the first thing I put at the top of this file?
Lewis Benson: I put in our quotes.
Iris Coats: Yeah.
Lewis Benson: and then use strict and again, this is
Lewis Benson: so you have a question Iris.
Iris Coats: no, I'm sorry.
Lewis Benson: Okay, I like to call it strict land JavaScript. It's where every thing works better because you don't accidentally have errors occur. It's using the latest syntax. All right, so we're gonna go over concatenation again, and I'm going to show you a couple different approaches to concatenation. So we'll say let first name equal
Lewis Benson: John I try to use these single quotes. That doesn't keep changing on me let last name equal no. I spelled that wrong. Okay.
Lewis Benson: What all name equal what should I put for the full name?
Iris Coats: Bondo
Lewis Benson: We already have John and doe inside variables. So this is where we can use our concatenation. So we can do first name last name remember though when you're using concatenation, it doesn't include spaces. So let's take a look at this. I'm going to full name
Lewis Benson: and let me put a code comment here just to clarify what we're working on at the moment. So this is our concatenation demo. We have two variables and we're adding them together to get the full name. So let's take a look at that. And let me get rid of all this extra stuff first. There's so much noise in there the comment And our script I'm just gonna comment out our script so that it doesn't run that and we're only running the strings file now.
Lewis Benson: Okay, let's go back to the browser. And there we go. We have John Doe that we don't have any space in the middle. What is this here? Styles dot CSS, let me get rid of that air too. Sorry about that. That's because I linked in a style sheet that doesn't exist. So through an error. There we go. So we have our John Doe no space in the middle. Using concatenation, how can we put the space in between this does anyone know?
Elgin Sharper: with the commas
Lewis Benson: If I put a comma here. We're going to get an error. is put the commas in my console.log, but I'm not trying to have my console.log be my only form of manipulation. I want to create a variable called full name that has the last name and I want to space in between them. So I can't use commas here just because this is invalid syntax commas are used for a different thing. Yes, Omar.
Umar Z: So we can add another string a space between commas with I mean it apostrops. It's gonna read. other space
01:20:00
Lewis Benson: like this
Umar Z: yeah, I think so. It should work.
Lewis Benson: Yeah, I could also add one in here like that. That's typically not. How you want to do it though? Because then if you wanted to use the first name somewhere in combination with another string then you're going to have an extra space. So this does work. This is valid. We have the first name John. And we have an empty space in the last name. So this is one of those things where you have to kind of use your imagination when you're looking at strings you have to think about this. as a process and kind of reduce it down, so What I mean by this is if I have a fraction 4 / 8 what is this fraction representing? what does this reduce down to?
Umar Z: I said let's go why they need?
Lewis Benson: so Yeah,…
Umar Z: yeah, okay. I see.
Lewis Benson: so I'm reducing this 4/8 down to one half and I kind of do the same thing in my head when I don't look at this variable name. I don't care what the variable name is because this could be anything I could call this X. And I just have to call X here. So they should be something meaningful, but they don't have to be. So looking at this, I don't care It's just a letter What I care about is this here? I always reduce this stuff down to its most base form. So when I see X John wide dough, I think I don't think a y and then we have this empty string here. So when I look at full name all I see is this Whenever I kind of Envision it.
Lewis Benson: Okay, spell things correctly. This will reduce down. To this so it's kind of like reducing down your fractions. Whenever you're looking at your variables. This is called an expression because we're doing a couple different things here with what the plus signs your Expressions should be reduced down to their base form in your mind. It's not something you're going to see in your code. but you do want to think of that whenever you're actually using these variables you want to continue to reduce them down and it gets hard to do because these variables will get passed around they'll get past through things. They'll get manipulated somehow and thinking about the end result could be in the front of your mind, but it's very difficult to do until you get the hang of it because you'll see this first name variable and that's what you'll be thinking about. You won't be thinking about what it's actually being assigned to. And it's kind of like when you're using.
Lewis Benson: algebra You've probably seen. a squared plus b squared equals c squared you got to think of those letters as numbers whenever you're doing those type of formulas. And it's a very similar concept. So first name, this is John. I don't care what this word is here. this is This is doe and this is So this is John Doe with a space in between. And that's what we're going to see in the console now when I look at it. And We have our space in the middle. It was reduced down to John Doe with a space. And again, that's one of those things that will come with time looking at your variables and just knowing're looking at. What end result are you looking at? Does anyone have any questions about how concatenation works?
Lewis Benson: Anders there's more we can do with this too. I could say let greeting equal all name Plus
Lewis Benson: And then I can talk you meant thought right? greeting
Lewis Benson: what would you expect to see on the page looking at this?
Lewis Benson: How does greeting get reduced down?
Iris Coats: Goodness, say John welcome to my page.
Lewis Benson: I'm using the full name variable.
Iris Coats: commentando
Lewis Benson: So Yeah, so we got always reduced down to its base form and that's where this can get really confusing when you're just looking at greeting because we don't know what greeting is yet. So if I look at greeting and I like okay, that's full name. Plus this What's Full name is first name plus What's First name is Last name is So greeting is John Doe welcome to my page and that'll happen in a split second. Whenever you're just looking at a small section of code like this. Whenever you're looking at something maybe you have a hundred lines of code. It could take you several minutes to walk through the code and find what one variable is going to be assigned to what is data type is Because that's important And I'm going to show you why right now. I didn't show you the document. Alright, so let's make sure that's there and there we go, John Doe welcome to my page.
01:25:00
Lewis Benson: And again, this can be very Dynamic you log into this page. You can store your name into the login and say, whoever you are. Welcome to my page as a variable like that. Let me show that right now So we have firstname and last name instead of putting these strings in here. I'm actually going to change these to be something else. We're going to use The Prompt function takes in one argument and the argument is a string. And what this string will do is alert the user with a question and provide them with an input box to type into so I could say what is your first name? And I always like to end questions with a space at the end. It just kind of formats a little bit better in the alert. You don't have to do that. But it's just a habit I have so if you see me put a space at the end. That's What is your last name?
Lewis Benson: So this is again a good example of what does this reduce down to? Currently we don't have anything in here for what this reduces down to. So when I look at this page, let me cancel. And then refresh and there was that null so we have what is your first name? And I'll put in my name. What is your last name?
Lewis Benson: Benson Lewis Benson welcome to my page. So does everyone see how that works? I was just able to grab input and store my name as the input and now I'm getting this unique experience on this page. this is tailored right to me. It knows who I am because I told it my name, but I didn't have to do any coding to get my name to pop up. I did but if I were a user on this web page, you don't have to do coding to get your name to pop up. You just tell it what your name is in the prompt. and your name is
Lewis Benson: it's similar to when you're on Google. You can see my pictures right here. it has my email Google knows who I am because they're storing this information inside of variables whenever I log in and then they're storing all that information inside of a database whenever I log in it pulls that data from the database and stores it into variables and then the variables are displayed onto Google's web page. That way I can look at it. Later. And let me change the color there.
Lewis Benson: so that is a good use case for where you would use variables like that. And these can get more and more complex as you can. See here. we're concatenating. last name. We're getting this prompt. And again when you're reducing this down you have to say first this reduces to a string? We don't know what the string is yet, but it reduces to a string. We don't know what this string is yet, but it reduces to a string so we know this is string plus empty string plus string. And then that gives you this and then I do want to show you this one more time whenever I don't include anything.
Lewis Benson: We get no as our variables. If you just leave those blank you get null there. That's the only time you're going to Knoll from user input. Whenever you use HTML forms. You'll actually get an empty string instead of null but prompts return null. It's just one of those little things kind of keeping the back of your mind. If you're using prompts it if you don't really puts anything in there. It's gonna return a null. And if you're expecting to do let's say no Plus. Hello.
Lewis Benson: You're gonna get So that might not be the behavior you were expecting with some sort of function. You'll concatenate the word null with the word. And what this is called is data casting the terminology. There isn't the most important but what you need to know about it is this will be converted to a string called null and then that gets concatenated with hello. so I have to do this in vs code because I don't want to spoil it.
Lewis Benson: I'm going to do another string we're going to say let num2 equal 5 we'll do 15.
01:30:00
Lewis Benson: And then we'll say number one plus num2 what is result going to be if I console.log that out?
Lewis Benson: Does anyone have a guess?
Umar Z: If it doesn't sum up it's gonna be five and 15 right next to each other.
Lewis Benson: Right, so it's gonna be five one five and we got this alerts in here still. refresh
Lewis Benson: I'll tucked ordinal. we go. So there's five one five and that's where data types are really important with JavaScript because if you're trying to actually do math. And You're going to add the strings together using concatenation. So I actually seen that happen there was a presentation where somebody was building a calculator and they forgot to convert all of their buttons from strings. So when they tried to do math, they did five plus. nine
Lewis Benson: And they got 59. But if you use numbers you get a little bit different result. So that's one thing to keep in mind data types are important and knowing what your data types are is important. And if you're not sure what your data type is, you always have this option console.log. You can say of one and if you wanted to do again, you could do type of num2 as well with a comma separating them. And again, the reason I can use a comma here is because If I'm outside of the parentheses up here, I cannot include a comma. Yes, Elgin.
Elgin Sharper: And I know how to start the cut the comment, but I'm trying to Select something and make that a comment. How do I do that?
Lewis Benson: So you put your cursor on whatever line you want to comment to be on so if I want my result to be a comment, I hold control and press forward slash. This is the same flash that's on your question mark.
Elgin Sharper: Okay.
Elgin Sharper: All right.
Lewis Benson: And then let me get rid of these alerts. These are
Lewis Benson: Or did I already?
Lewis Benson: other prompt sorry
Lewis Benson: If I get rid of last name that's gonna throw an error. So, let me just put strings in here.
Lewis Benson: Just wrap all of this in quotes So now those are strings instead of actual functions because they're surrounded by quotes.
Lewis Benson: and then when we clear this refresh. We can see the prompt. And the prompt welcome to my page. I just did that to get the alerts to stop from popping up, but I didn't want to delete the code. So it's there for reference. But we can see our type is string and our type is string when I use this type of that's what I was actually trying to show you here log comma type of num2 and they're both strings. And again the comma can only be used inside of the parentheses of your log other functions that can take multiple parameters.
Lewis Benson: Okay, so that's concatenation and I want to show you something called Escape characters. These are used. If I needed to put quotes inside of my quotes it would get confused. So we could do it like this. single quotes and I could say he said double quotes up two sets there. Java Script is awesome. So this is valid I have double quotes inside of my single quotes. And I closed off my single quotes. So this is one way that you could do this.
Lewis Benson: And I didn't about that when you cancel that sentence and there it comes up in the console. He said JavaScript is No, so I don't have the quotes around this in here. A lot of times you won't see that inside of your console. unless you explicitly try to show that by typing an inside of your console what I mean by that is I have this such a Oops, so I'm going to just copy and paste that in here and now I can see the quotes around it. If you run it in the file, it doesn't show the quotes. But if you type it in the file, it does show the quotes. So there is a little bit different Behavior between the browser reading your Javascript file and you typing the JavaScript directly into the console. It goes through some different formatting that way. So if you're ever getting weird results by typing in here try running it into a file or vice versa
01:35:00
Lewis Benson: All So in order to Escape characters to do the same thing, let's say we want to use double quotes here and double quotes here. This is no longer valid. My lender is going crazy right now. That's what this red squiggle is. This is a little enter. It's saying You have a problem here. You have a problem there. So we have a question.
Lewis Benson: Is it Elgin?
Elgin Sharper: no.
Lewis Benson: Okay, you just came unmuted. That's what I thought you had a question. Yeah. So what you can do instead of using single quotes, if you have to use double quotes for some reason is you just put it backslash here and a In the backslash will allow you to escape that. So let's take a look. and we get the same result and if I type in sentence same result So this is what the Escape? my lint or my prettier converted it. But yeah same result now.
Lewis Benson: That's weird. Something else you'll notice if I do. this I just press tab. Let me take a look at that that does indent it over but you can also do it like this. Slash T. I'm using the Escape symbol there. And we get the same result with the indentation.
Lewis Benson: everyone see how I did that using the slash key you can also put if you wanted to make a new line, you could say slash n
Lewis Benson: and it'll drip drop that into a new line notice. It's not putting the letter N inside of JavaScript and you can literally put these Escape characters anywhere. They're not red in the string. It doesn't put an extra space in the middle. It just puts whatever the Escape character So in this case we split it into two lines. And if I wanted to add in variables, I already showed you how to use concatenation for that. But I want to show you another way to do this. So this is our literal again. We're literally declaring a string here. I want to show you a string template literal. So this is slightly different. And I'm gonna bring back my names up here. I'm going to comment these ones out. Let me remove the quotes we have it for reference. And then I'm going to comment them out and redeclere.
Lewis Benson: And I don't want the alert to popping up, but I want the variables still. We'll say John we'll bring back Let last name equal. do I format It gives me my single quotes. Okay. So I just want to make sure no errors. Let me get rid of this again.
Lewis Benson: Refresh there we go. John Doe welcome to my page and I still have this going on here. All right, The string template literal is an easier way to do everything we've been doing so It's an easier way to do concatenation. It's an easier way to do this type of stuff what the Escape characters. So what I want to do is say Let new full name equal to use the template literals. You have to press the back ticks on your keyboard. This is on the tilde key. And it's beside the number one. It's above the Tab Key. You probably don't use it very often. So you probably wouldn't recognize it right away. But it's under my Escape key beside my number one and above my tab. It's in that top left corner of my keyboard and we call them the back ticks.
Lewis Benson: And they're used for the string template literals and I can say hello world just the same in here.
Lewis Benson: And I got a console.log that sorry keep doing that. I just expect things to show up. I could have typed it so there's our hello world. And I can also type in the full name directly in here new full name. We get the same result. And we can see that it's converted it back to single quotes inside of our console again. It'll do whatever it wants to do with the quotes. It's as far as the strategy on how we want to build this inside of our file is the only difference between the different quotes. So here we have the single quote. It does the same thing as a double quote and it the single quote. back ticks. They all do the same thing, except you get more functionality out of the back tick. So what I mean is I can do this now. And it actually breaks it into multiple lines.
01:40:00
Lewis Benson: I can put tabs like that. I can even put empty space here. I'll put a period there so you can see it and we can do things like this. So we were building a string template and we can create this any way we want. so this is already better than this because if I try to put a line break in here, my lender gets confused it throws errors and as soon as I press format Prettier doesn't know what to do because there's a linter error like we get that warning down there on the bottom, right? So I have to keep this all one line with a regular string but with a template literal. Prettier doesn't care how you lay it out because it thinks this is what you want your string to look like now if I switch this to a document dot, right?
Lewis Benson: It doesn't really do anything different because Doesn't care what your string looks like. So let's take a look at that. You might remember this from when we had our paragraph elements. So here's how HTML interprets It's just like here's a string and it has some empty space in it. So keep that in mind when you're using template literals to build out these fancy looking strings in your console. HTML doesn't care So if you want multiple lines with HTML, you're going to have to use spans. You're going to have to use other brake elements. Whatever you need to do to get this to be multiple lines and put your empty space in you can't lay things out using JavaScript like this at least not with the string template literals. But when you're dealing with the console, you can absolutely do that.
Lewis Benson: you might find a use for this maybe for code challenges or something. We have to build a Christmas tree out of asterisks is or whatever they tell you to do. string template literals can be used for that, but they cannot be used to lay out your HTML. But one cool thing with the template literal and this is what I love about it. Is the way concatenation works. So what I can do is dollar sign. early brackets And then inside of these curly brackets I can now write JavaScript Expressions so I can write first name. As a variable I can just put a space here dollar sign curly brackets. last name just like that and now we have our variables inside of our string.
Lewis Benson: And I'm going to do another version of this where I say let greeting. We already have reading so I'm just gonna reassign greeting equals back ticks Hello. Early Sorry forgot my dollar sign curly brackets first name, so I want to print that out as well. I'll do it underneath of this one document. All right. the reading
Lewis Benson: and let's take a look.
Lewis Benson: We have this all on the same line right now. That's because document.write doesn't add paragraph elements to the page. This is the kind of the problem with document.right. So even though I have these on separate lines, it's not including paragraph elements. So speaking one string of text. So for now I'm going to remove the extra ones just so we can see the result of greeting.
Lewis Benson: So there we go. Hello, John.
Lewis Benson: And all I had to do was type. Hello comma dollar sign curly brackets and put the variable in. Because I can write full expressions in here. I could technically do this as well. I could say hello. Plus
Lewis Benson: this Plus last name and this is an expression. So it'll be reduced down to a single string. Remember when we're thinking reducing down your fractions. We have first name that' We have the space we have last name that's equal to do. So this actually means John Doe with a space in the middle. And you can put any Expressions you want inside of these and I'll show you that hello John Doe. so we can say let math. string equal back ticks One plus one. equals
01:45:00
Lewis Benson: dollar sign curly brackets one plus one Like that, that's an expression. It'll reduce down to something else. So when I look, I got a console.log it sorry. I forget all the time.
Lewis Benson: Just expect things to magically work. One plus one equals two so you can see it's reducing down that equation. We call those expressions.
Lewis Benson: We can do that directly inside of the template literal. That's a little bit harder to do with regular strings. You might not Want to try that with concatenation and everything, but this is very powerful being able to put your expression directly inside of the template literal. Does anyone have any questions about that?
Lewis Benson: This is definitely the preferred And also I could Nest a template literal inside of here. If I wanted to I could have instead of first name plus space plus last name. I could put more back ticks in here. And then put dollar sign or sound curly bracket last name like that And that's probably not advised. I wouldn't recommend doing this. I would probably make this a variable. So that you're not doing this. Which we do already have that variable right here in new full name.
Lewis Benson: But if you want to you can template strings inside of each other. So we have the back ticks here and then inside of our dollar sign curly brackets. We have more another string template literal because a string template literal is an expression. Basically anything you can assign to a variable is an expression.
Lewis Benson: And can be used inside of these curly brackets and dollar sign. So if you can use the equal sign Then it's also valid to just place it directly inside of here.
Lewis Benson: Does anyone have any questions about that?
Lewis Benson: So there is some more to know about strings. I'm typically going to use single quotes. I usually only use these back ticks when I need dollar sign curly brackets. So if I'm doing concatenation if I'm doing anything that involves variables or Expressions, that's the only time I used a backpicks just because I think it's cleaner just to have the single quote my preference you can use them if you want. Also, I've had lenters yell at me for using them. Without having a variable in it. I think it performs a little worse. It's probably nothing you could actually detect but performance wise I think it takes longer for it to read the template literal than it does a regular string.
Lewis Benson: All So next I want to show you a property. That is on a string. And what is a property you might want to know basically a property is something that can be accessed off of something. I describer even sometimes a function. So every string will have this property. So if I type in we'll use the greeting we can say greeting Dot length So now we're accessing the length property on the greeting string. Keep in mind it's going to count every single character of the string including this space that space is part of the length. So let's take a look at that. And we get 15 return there. Let me actually put a label on this. This is how I label things. I'll put the label first.
Lewis Benson: And I'll put a comma. And this is going to be string length.
Lewis Benson: And this is a trend. I'm going to keep doing whenever I run my variables especially when I get to be a lot of noise in the console. I'm just going to throw in whatever the variable is. And then the variable afterwards, so that'll be my normal workflow here. And I like to call that a flag because I'm flagging which console I'm running. So string length is 15. Does anyone have any questions about the length property? It just counts the number of characters? So let me do another one. we can say first name dot length And we get four so John is four characters.
01:50:00
Lewis Benson: And I can also just do it to string literals as well. I can say hello. dot length And I get five. So it's the same concept I'm using these string literals to access this property anything you can do to the literal version because remember the variable is the literal version whenever you reduce it all down. So if you can access something on it, you can access it on the literal or on the variable. It'll be there.
Lewis Benson: So the length is useful because there are times that you may want to use. a single character so we have this hello. I'm going to leave that there. I'll do a console.log. We're going to do greeting.
Lewis Benson: And you can access a single character on this greeting string by putting square brackets right up against the variable name. And then the number of the location of the letter you're trying to access so if I put one in here. This should return to me. E on this string and I'll show you why it's e and not H you might have been thinking.
Lewis Benson: So there's our e being returned and then we put my flag on that.
Lewis Benson: This is called indexing. I'll actually make that a comment above it.
Lewis Benson: We're indexing a single character on the string. So in most computer programming languages everything starts counting from zero. so whenever you're counting you always start at zero, so the first character is actually zero so indexing h Inside of my square brackets. i put a 1. I get e and we'll put a seven if you want to get the seventh character. I get a j.
Lewis Benson: Let's put a six and I want to try to get that space. So It just returns an empty space. So the sixth character in my string is a space and that's what I see there whenever I log it. I have to highlight it so you can see It is there but it's just an empty space. So that's character six. Does anyone have any questions about how indexing works again? We're counting from zero?
Lewis Benson: and we're getting H with zero. If I want to get the last character a technique you might try would be to length first so it's a greeting dot length. And we see the length is 15 and this is where some mistakes could happen. You're like, 15. Let me throw 15 in here. And let's see what we get Why is it undefined? Does anyone know?
Lewis Benson: Because I'm using the length of the string greeting dot length. And it's saying that I put 15 in my index and I'm undefined.
Lewis Benson: And this is one of them those rare cases and programming with the length property. It doesn't count from 0. It counts from one. So my length is always going to be one more than my index. So if I want the last character, it's actually 14. Because we started counting from zero. And that's just one of those little bugs you'll get it occasionally on this. What does happens to everybody you'll put in the length and you'll forget to do the length minus one. I never get e and that's actually something we can do too. I can say let last Char equal reading dot length minus 1 because this is a number. greeting.length
Lewis Benson: I can do math to that number because again this reduces down to a number. So I'm doing 15 minus one right here. That gives me 4 or 14. And now I have a last jar variable and anywhere you can put a value you can put a variable so I can do last Char like that.
01:55:00
Lewis Benson: So now I have greeting at last char. and I get e
Lewis Benson: does anyone have any questions about how I did that?
Lewis Benson: So again you can put a single value. anywhere you put a variable you can put an expression. So knowing that this is an expression because after this equal sign. I can actually place that right there as well. And I'll get the same exact result. Because ultimately greeting.length reduces down to 14. So just think of this as the number 14 not this whole string of characters and that's one of those things where you just have to kind of Envision. What am I actually putting in these square brackets right now? I'm not putting the word greeting that length. I'm not putting four or sorry I'm putting 15 minus 1, which is 14. So this is actually 14. It's the exact same thing as these are identical even though it doesn't look like They're identical because this reduces down to 14.
Lewis Benson: if anyone have any questions at all about how I'm doing this Anyone have any questions about JavaScript in general?
Lewis Benson: Okay, so I just want to show two more things about strings before we go to our assignment these two things Called Methods. I've briefly touched on methods dot right as a method. Because we're using this t to do A function with a DOT is a method. You don't really need to know that vocabulary just yet. I'm just kind of throwing that out there. So if I'm using the term method, know what I'm talking about. alert is a function but not a method because it doesn't have a dot in front of it. Unless I do this now. It's a method. Don't worry about that. It's not that important at the moment. This actually does the exact same thing as alert without the window dot in front of it. But that's outside of our today's scope. so what I'm going to do Is I want the full name to be in all capital letters, so
Lewis Benson: I don't know what the user would type in remember. I showed you how to use that prompt the user could type in something like this. Or they have every other letter capital and we use these methods to kind of normalize the text because you don't want this in your database. That's ugly. You want your data to be something that you would be able to search for if you're using some sort of database querying where you're like, I need to find this person in my database and you're not going to expect them to have a capital H in their name. So normalizing your strings is important. So I'm actually gonna leave it like this. Let's take a look at the page.
Lewis Benson: And there's our hello John Doe and we're actually gonna fix that. So what I'm going to do is I'm going to access first name.
Lewis Benson: and I'm gonna assign this to first name
Lewis Benson: I'm sorry. I'm going about this all the wrong way.
Lewis Benson: I don't want to make this too complicated. I'm gonna simplifies a little bit. We'll do log first name. And I'm going to use two upper case. So this right here? is a method And anytime you have a method you have to put parentheses after it, even if there's nothing in the parentheses. And I'll show you why in a second. So here's our first name to uppercase and the whole thing goes capital letters now. But notice it didn't change over here. It doesn't actually change the original value. And that's actually what I was about to do before. I just wanted to show you how this works first before I did it. name equals first name to
Lewis Benson: two uppercase and also you get your methods and your autocomplete here. So if you forget one to look how uppercase this is referring to your local keyboard. So this will work just the same. I'm just going to use that one just to show you it's the exact same thing as this but it's using my current character set on my keyboard. So it'll work some. And then I put the parentheses in. And I make sure I put my semicolon there. And I get the refresh.
Lewis Benson: I didn't log Here I did but not where we can see it.
02:00:00
Lewis Benson: And there we go. It's all capitals just the same. But one thing to keep in mind this over here didn't change. And that's because document.write First name is here. So when I look at this page, John is all capital. I need to move this up in my code. So that it reassigns this to the all capital version and then writes it to the page because whatever is doing it's going to do it whatever order you're telling it to do it. So if I say write it to the page, it'll write it to the page and then it will capitalize it after it's already written to the page. It's too late at that point and then it put it in the console. So I'm going to move this up back one line. And we go to the page. And what am I looking at here? Hello John Doe.
Lewis Benson: Maybe the local isn't working.
Lewis Benson: All So our first time debugging, I'm going to log first name here and see what it's being assigned to and I know the problem. I don't think I moved it up far enough. Now I'm thinking about this first name is being reassigned here. But greeting is using And full name at the time of its creation first names way up here. So I actually need to move it above that even so I need to go way up with it. I was going to console.log to see what my first name was. It was gonna come back as all capitals because I could see that's already here.
Lewis Benson: But I'm reassigning new full name and I'm using new full name in my greeting and the greeting is what I'm actually printing to the page. So that's why that wasn't working. But now I'm reassigning first name to be all capitals before I include first name into this new full name variable. So let's take a look and there we have the all capital John.
Lewis Benson: And I want to do the same thing with the last name that I'm just going to make it all lowercase. So we'll do last name.
Lewis Benson: equals last name dot to I'm going to try to local one again just to make sure that I'm not crazy here with that. And there we go all lowercase letters. So that's one way to We can also normalize individual characters. So if I wanted this to be a capital D. It's a little bit different I would have to do.
Lewis Benson: last name at zero is equal to
Lewis Benson: last name at zero dot to uppercase invoked like that. So this is a little bit more complex way to do it. We can make the first Uppercase that way. It looks like we have a type error. cannot assign It doesn't like that. I'm using the
Lewis Benson: that's something one letter now. So I'll have to concatenate this back With the rest of that string this isn't the best method to use for this solution. I would actually want to use a capitalize version of this instead So remove. We can leave that one there. We can say. I think it's called to Capital. And this is a good example of you will not remember There are hundreds and hundreds and hundreds of methods in JavaScript. So mdn again.
Lewis Benson: And I'm just going to Google search it because I can't even remember the beginning of it. capitolize first letter JavaScript
Lewis Benson: I'm going to use the stack Overflow solution.
Lewis Benson: so they're using Char at that's not what we're looking for.
Lewis Benson: I don't want anything too complicated.
Lewis Benson: So they must not have a method just for one letter? I thought they did that must be just python that has that then. So to do it, you actually have to do grab it was a couple more complicated methods. So we're not going to worry about that. I am gonna bring up our assignment though, and we can get started on that. And then I will show you slice while we're working on the assignment just one more method it could come in handy for you.
02:05:00
Lewis Benson: Where is my? Browser tie. There we go.
Lewis Benson: So these are in the correct order, that's good.
Lewis Benson: All right, so we're going to start off by creating a folder named JS variables assignment. Keep in mind you can also do this through GitHub and I will remind you how to do that. But we're going to go with the folder for the official submission instructions here. So first thing you're going to do is you're going to create a new file named script and index.js just like I did today. You'll link that in to your index.html. And generate your HTML put your script tag within there.
Lewis Benson: And then use strict goes at the top of your page. Make sure you have that. And here is the actual steps for the assignment. You're going to create a variable First name and you're going to assign it to your first name. You're going to do the same thing with last name. You're gonna create a name or for a variable called age and you're going to sign it to the value of your age make sure this is a number and not a string. And you're going to create a variable name favorite food and you're going to assign it to a value of true or false? there's a typo here this should. is favorite Let me edit that real quick. Because that is important distinction with booleans. is favorite food
Lewis Benson: Booleans, it's not gonna break your code. If you don't use the word is but best practice is to have is in front of the variable name. So create a variable named is favorite food in the sonnet toy bullion and then create a variable name favorite food and leave it as undefined. Create some variables that are strings numbers bullying undefined and null. log each variable to the console to see what occurs and how they interact with different data types. What this is referring to is trying to concatenate to words together or Maybe try adding true plus false mess around with some of the data types and using addition and subtraction. This is a very abstract assignment, but we do have some primary criteria here for this To the assignment is kind of for you to experiment. Is everyone understand that?
Lewis Benson: So the graded portion is creating the variables. And the rest of the assignment is just to see how all the stuff works and we're going to be doing this in breakout room today. I'm going to say Let's see how many people.
Lewis Benson: One two three. I'll probably do two people per room. I'll just set them up randomly and then I'll come around each rooms. People has questions. Let's look at our
Lewis Benson: rubric here. Sorry, that's my train of thought so for the rubric. Make sure you have your script properly linked to your index.js. And your variables are assigned to the correct values and the variables are console logged to the console. Those are the three things for the first one. And the second one variables are created and named appropriately meaning use camel casing variables are assigned to correct values. And the variables are console log. So two of these are the same as above so as long as you create all the variables use camel casing and log them you'll receive full credit for this assignment. has anyone have any questions about the assignment
Lewis Benson: So before I do the breakout rooms, I'm going to do the 10 minute break. I'm going to demonstrate the console.log with the slice method. Just to show what that is and how it works. and then I will set up the breakout room so you can collaborate with each other and talk about. Some of this you don't have to collaborate if you don't want to but the option is there. I encourage you to help each other and discuss things you found also explore some of the documentation. Let me bring up mdn again. for string Methods So we're going to I think I can just type in Here we go string Methods. So we have this on the left here. It says methods.
02:10:00
Lewis Benson: Take a look at some of these are going to be a little out of our scope but some of these you'll be able to Just look through them. See what you find experiment with ones. You could use trim. It removes empty spaces on both ends of the strings. So if you have a user and putting their name and they put an empty space at the end, this is a useful. Method where it says dot prototype, I'll just ignore that. So to be your string name dot trim what you do or if you have a template literal, here's a little example of how to use greeting.trim. Don't forget your parentheses to call the function. Or you could put it directly on the back like this dot trim. And that would work just the same.
Lewis Benson: But feel free to look through these once you get finished your variable assignment. Yes, Ryan.
Ryan Arnold: Hey, so I'm still dealing with that issue from my back injury. would it be okay if I go ahead and dip out after the break and wait until the video was posted so I can go back and review it to do the assignment. Okay. Thank you.
Lewis Benson: Yeah, that's perfectly fine. Yeah. Yeah, no problem at all there. All right. Yeah, let me start that 10 minute timer. I want to take up too much more of your time. And then I'll show slice and we can begin the breakout rooms. All right. I'll see you in time.
02:20:00
Lewis Benson: You Welcome back.
Lewis Benson: So this last few minutes here, I just wanted to show this one last. Method and it's called slice and I'll actually bring it up just right here inside of the documentation so you can see this. Hope we're on array. We need to be on a string.
Lewis Benson: string slice So the way this works is it'll actually grab pieces of the string that you can use to make what call The substring is just a part of a whole string. So hopefully that terminology kind of makes sense there. So for this example here, they're saying string slice 31 and it grabs the lazy dog. So let's grabbing the end of the string here. Four and nineteen is grabbing a piece of the middle of the string. They put in a negative number and it counts backwards zero. one Two three and four whenever you're doing a slice the second number. Doesn't actually grab the second number and I'll show you what I mean by that this would be easier to use vs code. I'm going to create a string.
Lewis Benson: I'll call this let my string equal and I'm going to go.
Lewis Benson: with Superman for my string and we'll my spring let's see what we have so far.
Lewis Benson: So here's my man. better refresh So I just want to grow up a piece of Superman. So this is where you use slice so it's not slice because this is a method we put in a parentheses and it takes in two parameters where we're starting and where we're ending. If you just put in one parameter, then it just goes from that point to the end of the string. I'll show you what I mean by that if I put in five it'll start at the fifth character counting from zero zero one two, Three four five so it'll start with M and give us the rest of the string. Let's take a look at that. And then we get when you put in two numbers, the first number is where you're starting.
Lewis Benson: The second number is where you're ending, but it doesn't include the index where you're ending. So it's actually going from 0 to 4 because we're saying stop when you reach five, but don't include five. So now we have super. And again, that's zero. One, two, three four. We're not including the m. Because it goes up to but not including when you're using slice. So does anyone have any questions about how this slice function works?
Lewis Benson: Pretty straightforward and again numbers negative 5 this will count from right to left. So 0 1 two three four five and we get her man.
02:25:00
Lewis Benson: Also could be useful. You can play around with these and again, you can also use this in conjunction with the other ones. We could say And we get erment Lo. so Remember this reduces down to a single string. So whenever you look at stuff like this you want to think about what would the result of a sliced Superman string to negative? Five b plus? Hello. And that's where you would look at Erman h e l o no spaces. Okay. That's what my string would be and that's how you want to visualize this stuff. It's hard to do console.logs can make it a lot easier something like this. You could put on its own line. You could say let e equal Like that and then you could just say sliced string plus hello.
Lewis Benson: If that's easier for you to understand. You can use variables to Make your code more readable so you're not doing too many things at once. You could also. Put this dot slice onto the back. Of the string like that.
Lewis Benson: And I'm assigning my string to sliced string. This is valid but it doesn't actually add any more functionality to it. I'm just moving the value of variable and the value of this variable is Herman still. this is Herman. So this is her man. So, this is Erman plus. Hello. Does anyone have any questions about what I just showed you there?
Lewis Benson: Okay, I'm going to open up the breakout rooms. I'm gonna set it for. 20 minutes and then we'll meet back at the main room to see if anyone has any questions Tas and myself will be around to help you as well during the breakout room time in the future. We'll have more time for our Workshop. This one shouldn't be too bad with just a few variable declarations. So hopefully we can make it through in the next 30 minutes. Okay, I'm going to open up the rooms now.
Lewis Benson: Did you get an invite to room one Justice? There She Goes.
Lewis Benson: Okay, so we have a few minutes before we can jump right in right now, or we can talk about this greeting thing while we're doing the breakout rooms if you want or I can hop between the classes. While you just discuss that with him Reece, are you guys there right now?
Reece Renninger: Yeah, I'm here.
Lewis Benson: either Brian Okay,…
Brian Kimbrow: Yeah.
Lewis Benson: So yeah, if you guys want to discuss how the grading works now during the workshop I can jump between the three rooms with the number of students. I can actually assign each of us to one of the breakout rooms.
Brian Kimbrow: Okay.
Lewis Benson: In the future if you guys are cool with that or it doesn't really matter to me.
Reece Renninger: yeah.
Brian Kimbrow: Yeah, it's whatever needs to be done.
Lewis Benson: I got Yeah, because we were doing it with the whole class and the main call and
Lewis Benson: I would have the students screen share to share with the head going on but other students wouldn't ask questions because they would feel like they were holding other students back if that makes sense.
Reece Renninger: that was something I told Tracy a bunch when I'm out there a couple times of just asked it's not people have the same questions. Don't feel free to ask something that you may think is Just nothing dumb when it comes to this stuff, especially when you're learning.
Lewis Benson: Yeah. I just wanted to make sure that everyone here was able to be in smaller groups. That way they can like nobody's collaborating at all.
Reece Renninger: then yeah not
Brian Kimbrow: You said no one wanted them are. Yeah for us we had real working.
Lewis Benson: None of them are collaborating when we're doing our workshops, it's quiet.
Brian Kimbrow: We're working together with people a lot. Even if they get somebody I think half of it was just like you kind of have to force them to do it. In general because in our class we kind of had accountability partners and stuff like that.
Reece Renninger: presentation ation ation
Lewis Benson: True, maybe we could incorporate that.
Brian Kimbrow: so That's…
Brian Kimbrow: what I would say incorporate that because it forces people to.
02:30:00
Reece Renninger: ation
Brian Kimbrow: Canada
Lewis Benson: Right and then during this right here. Having them buy themselves in the breakout rooms. I think might also because whenever all together and I'm in the classroom with them. It's like nobody like they keep raising their hand to talk and stuff like just talk. This is Workshop time.
Reece Renninger: when we tried just emphasize. Them working together on the breakout rooms. And then if they hit a wall with something just like message and maybe the slat Channel and then one of us can pop in there kind of hopefully collaborate anymore with each other.
Lewis Benson: right, and…
Brian Kimbrow: Yeah, that's…
Lewis Benson: think
Brian Kimbrow: that's what we did too. We put three people in one and then we're separate them and then Robert Miller would just go in and listen and if somebody gets stuck. Then we were on.
Lewis Benson: I just realized those recording all this I'm gonna have to edit this video.
Brian Kimbrow: AR
Meeting ended after 02:30:58 👋