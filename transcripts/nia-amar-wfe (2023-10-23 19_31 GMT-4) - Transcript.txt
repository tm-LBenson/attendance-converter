nia-amar-wfe (2023-10-23 19:31 GMT-4) - Transcript
Attendees
Chantrice L, Daniel Perez, Elgin Sharper, Gregory Robertson Jr, Hannah Richards, Ike Steoger, Iris Coats, Justice Miller, Krystal Jefferson, Lewis Benson, Lewis Benson's Presentation, Ryan Arnold, Shaista P, TRACY JOINER, Umar Z
Transcript
This editable transcript was computer generated and might contain errors. People can also change the text after it was created.
Lewis Benson: And I'll share the screen.
Lewis Benson: Okay, and Welcome to Week Two Day. One, This is going to be our introduction to CSS and styling basics. So, does anyone know what CSS is before we get rolling too deep into this?
Krystal Jefferson: Cascading style sheets.
Lewis Benson: Exactly. And what does that mean?
Krystal Jefferson: I read up on it, but my mind's going black right now.
Lewis Benson: That's okay.
Ryan Arnold: You can use one sheet to kind of style multiple elements at the same time that's where it kind of gets its name from because it kind of cascades over everything.
Lewis Benson: And you can actually use multiple sheets and they'll cascade over each other as well. So you could have 40 style sheets and there's some uses for that if you wanted to initially set all of your fonts on your page to be say Ariel And then maybe you want one of your headings to have more of a
Lewis Benson: kind of a theme that makes it look like it's something old. Let's say you're making a page for a bank and they want their heading to be that Roman style look and you want to use a different font for that. So you could use times New Roman so, you would us first set all of your styles to one font size and then later on, you would override that one spot So that it cascades with the new style, it'll overwrite the old style. So I'm going to open up this documentation here. We've already showed a little bit of this, we went into some inline styling and a little bit of internal styling but we didn't really deep dive into. What any of it means, we just kind of use it a little bit just to show you how it kind of plays with HTML.
Lewis Benson: So this is the getting started basics on Mozilla. And again, if you haven't looked into some of these learning on Mozilla, this is great resources. And this is especially good for those who like to learn from a book because Mozilla basically writes a textbook on how to learn all this stuff and it gives you a good place to reference. so, before I go into how to use CSS, we should talk a little bit more about what it is. So CSS isn't a programming language. It's also not a markup language like HTML it's actually a styling language and all it does is affect the way, your layout looks and the way your page looks. So it doesn't make it too interactive, although it's getting more powerful every day.
Lewis Benson: But I'm gonna kind of get down into the nitty-gritty here and find there's actually a section in here for the anatomy of CSS. For the fast scrolling here. I'll scroll down too far. Here we go. So just to kind of show how this works. So again, we went over this a little bit, but this right here gives us an actual definition of what all these pieces are so here. It's showing an example of how you would select all the paragraph elements. So you start with the selector Whenever you're typing in your CSS, your selector goes first. In this case, we're selecting all paragraph elements on the page. And next, you put your curly brackets. This is what they call the declaration you'll hear me refer to it as the code block. You might hear someone call it scope.
Lewis Benson: You may also just hear it within the curly brackets, something along them lines, and that's how you declare the scope or the code block is using these curly brackets. And you have your opening curly bracket Immediately after the selector by convention. It usually shares the same line as the selector, but you could put a line break after your selector and that's perfectly valid, similar to HTML. This is ignoring white space and I'll show you what I mean by that. Once I get into the VS code, next we have the property. And I keep bringing this up. I call them key value pairs. You declare a property first, And in this case, they're declaring the property of color. Does anyone know what color would change on the paragraph elements?
Ryan Arnold: The color of the text.
Lewis Benson: Exactly. It changes your font color. If you wanted to highlight your text, does anyone know what property you'd use for that?
Ryan Arnold: A background color.
Lewis Benson: Exactly. Background color would give a highlight. It would put a background color on the entire paragraph container. And that's kind of the secret to being effective with CSS as understanding how the containers are built, and it's all just boxes. And then next, we have the property value. So in this case, our property is color and our property value is red. So all of the paragraph elements are going to have red text. If you wanted to change the color of your H1, you would simply change out this paragraph selector with an H1 selector.
00:05:00
Lewis Benson: Let me open up this fig jam here. And I'm going to show you kind of what I mean about boxes. So this is a tool you can use to help you with your layout. So if you're going to be thinking about how to build your page, I'm actually going to use this section tool here. And you can just kind of make shapes on here. So this would be representing the body of your page and I'm going to rename this section 1 to body.
Lewis Benson: And this is kind of like showing us the outline of what it might look like on our browser.
Lewis Benson: I got a question here. These sit within their own lines and the header, right? I'm not sure what you're referring to Hannah, can you elaborate on your question?
Hannah Richards: In terms of CSS styles, like these elements, how you had the paragraph of the curly brackets, you would put that in the header or you would just put it wherever it is and your code.
Lewis Benson: As far as where you're putting the CSS rules in, the declaration blocks and the selectors and all that. You would either put them in the head of the file not the header.
Hannah Richards: Yes.
Lewis Benson: Those are two different elements. Yep. Yeah,…
Hannah Richards: That's what I meant. Sorry, I'm ahead.
Lewis Benson: and you could put those within the style element within the head and those would be your inline styles. You can also place them within the elements as using the style attribute. And the CSS is slightly different there, because you don't use the code block, or the curly brackets, to declare your scope.
Hannah Richards: You just do the regular style.
Lewis Benson: You would do style equals. Let me put it in text here. I'll put a little text block, and make this huge you would do style equals, and then you put your coats and then within here, you could put color. and then red and then you end it with a semicolon but notice I don't have any curly brackets in here. And I'm also not using a CSS selector. So this is slightly different but this is still valid and it's considered CSS even though it's not in the cascading style sheets, it's just whenever you talk to other developers, any sort of styling is usually referred to as CSS, even if it's not CSS. So it's just one of those weird nuances.
Hannah Richards: Okay.
Lewis Benson: As far as the boxes go. Here is the body. And if we had a Navbar at the top. I'll put now in here, this will represent a nav element and when you're planting on how to lay this out. If you remember, when we had all our elements all bunched up on one side. You could think about this as having your logo over here, so it's in its own container and then you would have your links on this side. So they're in their own container. And then you would have each individual link being shown. And I know this is a little bit messy, but it's just kind of a way to look at this from an abstract so that you could plan on your sites and we call A Wireframe. So if you're planning on building a website, this is a helpful tool.
Lewis Benson: In order to lay it out and if you can see what I mean here, that each one of these is in their own box, their own container, and this is representing the different elements on your page. So, as you're using, the divs and the sections and all that, you can think about this wire frame and figure out where you need those and how to place those on your page. So, here again was the anatomy. I just wanted to show this one more time. I want to Let me go to the w3 version of this for CSS selectors. And I just want to show you how many different ones there are. CSS selectors reference. And the reason I want to show you W3 is just because they have this laid out in a table. there's laid out on a list so this one's a little bit easier to follow sometimes. We went over the class selector and you can see they have this dot and then This would be representing the class name.
Lewis Benson: Here you can see they're chaining multiple classes together and that's something we'll get into as we do more advanced selections. Here is the ID selector Have the pound sign here, there's an asterisk, this selects everything on the page this would select your body it would select all the sections selects the footer. You got to be careful using this.
00:10:00
Lewis Benson: asterisks because it can change the default behavior of how elements inherit their properties and that's something we'll get to also as we get a little bit more advanced And then here's some more advanced selectors that we'll get into later and you can see there is a lot of different ways, to just select an element and you can do a lot of powerful things using these different. Selectors. I know, they look a little weird. They might be a little intimidating, you just learn one at a time and it's not too bad to do.
Lewis Benson: Okay, so let me actually start writing some code. Let's get rid of this. I'm going to go into our projects Create a new folder.
Lewis Benson: And we'll do demo 10 - 23. It'll probably guess code.
Lewis Benson: and hopefully this parts review for everybody on how to create the folder open and open up vs code in that folder. And we're going to create a new HTML document. And can someone remind me the name of this?
Hannah Richards: Index HTML.
Lewis Benson: And that's right. Index. Close that welcome page, too. Okay, so I'm gonna start my boilerplate. That's the exclamation point. The tab.
Lewis Benson: Would do CSS. Demo. So, I'm mainly going to show you for the moment. The internal stuff, are they? Sorry? Yeah. The inline styles here. Just for the moment and then we'll get into the internal again. So we're going to create a header just so we have a container for each one. And then I'm going to create the H1 and I'll put Hello World in here. And we're going to go live.
Lewis Benson: And wait for that to come up. so, my other monitor,
Lewis Benson: All right, so there's the Hello World. And again, I don't have any styles just yet, but I just want to make sure that this is working that it's not throwing any weird errors. We have a missing five-acon, That's okay. When you see this error in here about the missing five-acon, it's referring to this logo in your tab. It looks like a little globe right now next to CSS. that's something that you can include in the head of your file if you want to I'm not going to get into that right now but if don't worry, if you see that it's not a big deal. You also might see some errors from add-ons or extensions that you have in your chrome. If that happens, you could always open this up inside of an incognito. I'm going to prevent that. So, looking at our default styles here, I'm just gonna kind of drop through these a little bit.
Lewis Benson: So right now, I'm on the root of the document the HTML and we can see that we just have some basic stuff here. So it's set to display block, we have this view transition name Now, these aren't really that important. They're not really going to affect anything. If I go to head, we can see that the head is set to display none. And I've mentioned before that, anything in your head, doesn't show up on the page, and this property here is why it's not showing up on the page, because by default, the browser takes this element head and gives it a display of none. So let me bring that actually up and MDM. We're going to look at the display.
Lewis Benson: Property. So this is telling us there's multiple ways to display things. So, we have display block, and this is where it takes up the whole page. And I can show you another example of that because we've seen that HTML is at the display block and see how it goes. The whole way across the page, it's all the way left and right, that's what it means. By display block, and I believe I can actually toggle these inside of here. Yeah, just by clicking on them at toggles it. So with display block you can see all the way across we have this blue border. This is displaying The actual element that's being affected here. So inline block that blue border is now tight to the elements. So it's going to only take up as much space as required for the content. And in this case, it goes right to the edge of this lighter, blue square.
00:15:00
Lewis Benson: And then we have our display none. We can see that it's not showing anything on the page. And then, we have these last two here, display Flex and display grid. And you can see the difference in these as well. These are a little bit more advanced layout techniques that we'll get into. I believe we start on Wednesday. These will allow you to basically lay out your page in a more modern style and it also is good for mobile responsiveness. Using these two displays here. And again, that's something we'll get into more further. I just want to show you how you can use this documentation to get an idea of how these work and maybe even find solutions through documentation and I'll get into that too in a minute.
Lewis Benson: So this is all the different displays they have and there's a lot of stuff here. A lot of this you'll never use But a lot of this could be useful as well.
Lewis Benson: Okay, does anyone have any questions so far about CSS or what we're going to be doing this week at all?
Lewis Benson: Okay.
Hannah Richards: Do we typically use CSS, just an HTML? Or is it actual something that can be used within other languages.
Lewis Benson: In a way, it can be used in other languages. There's when we start getting into front end frameworks that are you build entire Web pages just using JavaScript? Then you can actually use CSS with JavaScript like that, but it's not often used outside of a front-end language. And what I mean by that is anything that could be displayed in your browser or used in your browser. And it's not very common to use anything outside of JavaScript for web design or web applications. There are some cases where maybe you'll do some. Android or iOS development, and you'll use something similar for styling. But for the most part, it's just for HTML. And a little bit of JavaScript. Does that answer your question?
Hannah Richards: Yeah, thank you.
Lewis Benson: Yeah. Or was there a particular language you were considering that?
Hannah Richards: No. when I started off learning coding, it was with Java. So I didn't really get too much into CSS, but I am seeing some, familiar things. I was just wondering
Lewis Benson: okay, so when you say Java, are you referring to JavaScript or Java,
Hannah Richards: I believe JavaScript. Yeah, sorry.
Lewis Benson: Okay, okay, because there's a completely different language Javas. Typically more of a back-end language that you don't have any sort of interface that you can look at, it's just code, it's hidden in the background of your application.
Hannah Richards: Is that what I think I said that Booleans. Coke.
Lewis Benson: Yeah, it has conditionals Booleans. That's a data type.
Hannah Richards: S. S.
Lewis Benson: JavaScript also has that so when you learned one programming language, you'll be able to translate knowing…
Hannah Richards: Mmm.
Lewis Benson: how to program from one language to another pretty easily. Just the way the language is used as slightly. Different
Lewis Benson: All right, so does anyone remember the attribute to? if I want to style this hello world and make it blue, And I'm going to be using in style, not internal style.
Lewis Benson: Alright, so this is a little bit of review since we already went over this attribute. But I just want you to pay attention to the fact that I didn't use the curly brackets here. And that is an important aspect to this So, let's make sure that applied. And there we have our blue text.
Lewis Benson: Okay, so I'm going to go into the head of the document now and the element to start writing CSS. What was that element?
Lewis Benson: Style. And again this is called internal styling because this is happening inside of the actual document. There is external styling and that is where we create a separate file to write all of our CSS code in and that is something we will be doing. So, if I wanted to turn the H1 red, I'll put in the selector. Yes, Elgin.
00:20:00
Elgin Sharper: Is there an answer or something you use? Because when I type in my style equal, Quotes and color and blue. Nothing comes up.
Lewis Benson: See how I'm inside of the brackets here.
Elgin Sharper: He?
Elgin Sharper: Yes.
Lewis Benson: And you have the colon separating color from blue.
Elgin Sharper: Coincorporating color and Yeah. Yes, I have style equals. The quotations color colon's blue clothes and
Elgin Sharper: Closing quotes, quotations.
Lewis Benson: And then the closing angle bracket.
Elgin Sharper: okay, okay.
Elgin Sharper: So still nothing? But where do I put opening bracket.
Lewis Benson: So let me make this a multiline here. So I have my H1 defined here and I'm going to remove the style from this and show you where to put that. So, I have my H1 on one line. And I have the text that's inside of the H1 on its own line. So I'm going to go up here up to the number one and notice I'm inside of the angle brackets. So here's the opening angle bracket h1. I'm going to press space right there, so I'm still inside of the tag. And then it says we're going to put style Equals. And then I can put Blue like that and then I formatted it and all went back to one line. Let me put that back on multi lines.
Elgin Sharper: Okay, it works right now. I got it.
Lewis Benson: Okay, cool. Yep, no problem.
Elgin Sharper: Thank you.
Lewis Benson: So this is our Inline Style. I want to change this to Red so I'm going to go into my internal styles. And I'm going to put in my curly, brackets. And I'm gonna make a new line. So notice my curly bracket is on the same line. As my selector, I can make it down here, it's just better practice to have it up here because this is what you'll see in the industry. And then in here, I'm going to say color colon. Red. And then I'm going to make sure I put my semicolon at the end of the statement. Every property needs to be separated by a semicolon and you're using a pre-processor which we'll get into later, you cannot leave off the semicolon. So just stay in the habit of making sure you put that in there. okay, so let me go to the browser.
Lewis Benson: And we're still blue. Does anyone know why we're still blue?
Daniel Perez: because The styling that said Blue came after the red style. And overrated.
Lewis Benson: Okay, so what If I put this, Underneath of it. Will it change it to red?
Daniel Perez: Actually, no, because the inline style I think is called or the attribute. I think you mentioned before
Lewis Benson: Let's see what happens. And we're still blue. If I were to remove this,
Lewis Benson: Then we can see it turn red. Why is that? Does anyone know?
Hannah Richards: Is it because the inline has priority?
Lewis Benson: exactly, when you're using inline styles, Whenever there's a Conflict between that style, The inline style always wins, no matter where you put this in your file. Let me put that back up into the head. Work goes, you can technically put these anywhere you want in your file, best practices to have them in the head. But you may find people who put them under the right above the closing body tag. It's I'd say, 20% of the time you might find that looking through other people's code. And that's because normally that's where you put JavaScript, and they get into the habit of writing JavaScript down here. So they start writing their CSS down there, but make sure you're putting it in the head because that's breast practice. so if you write anything Inline, it will win. And that concept is called specificity and that's a really big word.
Lewis Benson: But what's cool is you can actually get some help from your browser that tells you about specificity and let me see if I can get to come up. Right here it is selector specificity. So we see it says Zero Zero One. What that means is the further to the left that number is or the higher. It is. The more likely it is to win. So let me show you another example of this, I'm going to create a class on here. And this class is going to be. Heading. Will work and can someone remind me how to select a class? What was the selector for that?
00:25:00
Daniel Perez: Not.
Lewis Benson: If the dot and then the class name so Put in our code block. And what I'm going to do here is I'll change the color to So the colors now green and if I click on this heading, it gives that little square around it. And I just let the mouse sit there, we can see that the specificity is on the second zero. if I go back up to The specificity, is it? The first one I'm going from right to left. When I say the first one, I guess it'd be on the middle one. And the last one, if you read from left to right, And with this is telling me is the further to the left, the more specific and a lot of developers will refer to this as 100. If you're all the way to the left, 10, if you're in the middle and one, if you're all the way to the right rather than The middle one.
Lewis Benson: so if you think of it like that, it's a little bit easier and then if you think of an inline style, think of that as a specificity of 1000, I'm not sure if that'll actually come up, if I put that in here, I'm actually never tried that. Let me try that now. We'll put red. No blue.
Lewis Benson: Yeah, I'm not actually getting any sort of reference to the specificity on Styling that it's often referred to as a specificity of 1000. Okay, so let me remove this in line.
Lewis Benson: what color is the text currently going to be?
Ryan Arnold: Like it is now, it's gonna be green.
Lewis Benson: And yep, there it is. Green text. if I move this above the selector, so now my class is above my regular selector. What color would be that?
Daniel Perez: Still green.
Lewis Benson: It'll still be green because the class has a higher specificity rating. Even though they're above each other. But they will cascade if I put the same selector here. So now these have the same specificity Whichever one's last is going to win. And it's still going to have the same level. It still says one there. And this one's also going to be one, but if I look, it's going to be red.
Lewis Benson: Does anyone have any questions about that?
Iris Coats: You said earlier, you were reading from right to left. Why would you do that on the specificity numbers? Why would you read right to left?
Lewis Benson: Because, whenever you think about these numbers here, and this is actually how it was originally top because They didn't have this toll whenever specificity was a thing. So people would say, If you're using a class, it has a specificity of 10. If you're using a regular selector, it has a specificity of one. So now whenever I look at this and I see these numbers 0 0 1, I'm thinking one 10 and 100 without the commas there. So I read right to left for this case because I'm reading the number from smallest to biggest
Lewis Benson: If that makes sense and it's not like a requirement, you don't have to read it from right to left, it's just the way I do it. So sometimes I might say it backwards.
Iris Coats: Okay, so it okay.
Lewis Benson: I just wanted to make it clear. Yeah, so whatever number is the highest on the left? When you're looking at those commas, a zero, zero one. That's gonna be the one that wins the style. So if you're ever having issues where your styles are not taking for some reason, make sure you check your specificity and make sure that style or that selector has a higher specificity than what's currently being applied. and you'll run into this quite a bit, especially whenever you're using actual style sheets,
Lewis Benson: Especially if you have multiple stylesheets.
Hannah Richards: How do you actually get to yours specificity like selector?
Lewis Benson: So yeah, you just click on the selector and then I kind of move my mouse around and then put it back there and just let it sit and it just kind of pops up. Yep.
Umar Z: So, I have a question here about the same thing, so right now, let's put this is zero zero one. So because one is definitely a greater number, the zero. So the one is taking preference, right? So what would the other order? it has to be zero zero ten or 10 0, 0, or 1 0 0, to take preference.
00:30:00
Lewis Benson: If you wanted the one to take reference, then we would use an ID. So let me switch this class to an ID. And I'll actually use the ID selector now. So that's the pound sign. Hashtag. There's so many names for it ing. And then we'll put Purple. And we'll see That is applied there we got our purple color. And when I look at my specificity now we can see that it uses the first one on the list of numbers there.
Lewis Benson: That answer your question.
Umar Z: Okay.
Lewis Benson: Yeah, so the ID will always be a class.
Umar Z: No, but my question was that it will always be one zero zero or one zero one zero or zero zero one in that order or it will be like 10 and 0 0 or 0. 0 10. I think I'm still confused here.
Lewis Benson: So if I use two selectors, let's take a look at this. I believe this is going to show us a specificity of two now, because I'm getting a little bit more specific. I'm saying, within this H1, grab all of the paragraph elements. So, you can actually have a specificity of two because I'm using two selectors. And let me show you in the browser. Maybe that'll make that a little bit easier to understand what I just did there. So I know that's probably not very clear. if I right click on body, And I go to Copy Selector. This is referring to the CSS selector. So I'm just going to copy that and I'm gonna paste it into my file in a comment. So I'll go down here. I'm going to press control forward slash to start my comment. I'm going to paste in that select and it's just giving me the body there.
Lewis Benson: let me dive a little deeper in here to get something little more specific. So we have Header H1. I'm going to do the same thing, Copy selector. And this should give me a very specific selector. because I have an ID on it, it's gonna use that.
Lewis Benson: Maybe it was the copy path. Sorry, I haven't done this in a while. Now so it's just giving me the most specific selector. That way I've had this come up before where it actually showed me the whole path or it would say body and then it's gonna grab header and then it's going to grab H1. And it's going to grab the H1 with the ID of heading. This is what I was trying to show you normally that selector would do this for me and then it doesn't use spaces when it does it. So, you get something that looks like this. so, if I actually use this as a selector now, Let me plug that in there. and I click on this and look, we can see I have a selector of 103.
Lewis Benson: So, because I'm using so many selectors, it's giving me a very specific selection on this. The body is giving me one. The headers giving me two the H1 is giving me three. And then because I'm using an ID, it's adding a hundred to that. So I got a selector of 103.
Lewis Benson: Does that make sense? Or is that kind of answer your question or am I still kind of? Maybe not understanding what you're asking?
Umar Z: No. it's okay. I'll understand it later Sometimes sometime in the beginning. I tried I mean I find it hard to understand but then it comes to me slowly I'll be fine if anything I can ask Pa or I can ask you separately So I don't want to keep you busy here while everybody's wearing yet.
Lewis Benson: Okay.
Lewis Benson: that's perfectly fine. I actually account for time for questions like this, so don't feel like you can't answer or ask questions. It's all scheduled and if nobody asks me questions. I'll start going into a little bit more advanced topics because I'm assuming everyone's following what I'm saying. so it's good to ask questions if you don't fully understand, but with that, these selectors It's not the most crucial thing to understand. I know a lot of developers have been working in the front-end industry for years and the most they understand is that if you use a normal selector, it's going to get beat by a class and if you use a class that's gonna get beat by an ID and beyond that, they don't care. I'm just giving you the kind of the deep dive on, why it beats it if that makes sense.
Umar Z: Area, that makes sense. Yes.
00:35:00
Lewis Benson: Yeah so that's the important takeaway from this. Remember that if you use a single selector and this is referring to the element itself, I'm not using a class or an ID that is the lowest specific selector. Let me get rid of this double one here if I put in a class. And I'll just take a class. Name like that. Even I don't have a class with that name then we get the second most specific so it'll be the normal element selector, but it won't be the ID and then the ID is the clear winner. What's the styles? So if I have the ID, it styles will be applied over the class and the class will be applied over. The Element Selector. so,
Lewis Benson: Yeah. Yeah, no problem. I'm glad you asked because it could have been unclear for everyone else too. And then if you needed to add more specific things, that's where you can get into this more complex version, where you're saying select the body with and this is a direct child selector. That's what this whoops. This little alligator here, means with a direct child of H1, that also has an idea of heading. So that' you can't get more specific than that, unless you add in HTML there as well. So that's the most specific I could possibly get with.
Lewis Benson: What I currently have here, unless I start adding more classes to it and things like that then which that's not really that One thing to keep in mind though, if you do add multiple classes and I'll show you that real quick. This isn't foolproof. So if I added a hundred classes to this, remember each class has a selector of 10. So if I had a selector of header H1, and you can add multiple classes by just putting a space in between them. Label. You can call these whatever you want. Pop. And I'll put in one more. It's called one more.
Lewis Benson: So I just added multiple class names to this, and I could select it with any one of those, so I could do Dot H1 and that would select it or I could do Dot top and that'll also select it. It's the same element. I just have multiple headers on multiple classes on it. What I've seen people try to do to override an ID name is put so many class names on it that they can get a really specific name. So they would do dot label. And if I put my code block in there, select this I'll show you what's happening. Is has three there. If you get that up to 10, that one doesn't carry over into this other column here and I think that's why they changed it from the old way where They now have commas here, just so that you don't try to put a hundred. By getting this up to 10. Because that kind of technically would be a hundred.
Lewis Benson: So hopefully that makes sense. That might be a little bit kind of down a rabbit hole that we didn't really need. But I did want to show that
Iris Coats: Why would you do that other than trying to get a more specific name for something?
Lewis Benson: Why would you put multiple class names? So a lot of times you'll come across files that have pre styles in it.
Iris Coats: Yeah.
Lewis Benson: So, what you could do is you could say in B, and that's a really good question. I'm glad you ask that. I'll say MB, and this is going to be margin. Bottom, and we'll say 10 pixels. And then we'll have another one on here. We'll say Mt. Margin top. This is also 10 pixels. So now you have this styles, all pre-made and all I want to do is add some 10 pixels of margin to my element and let's say I want to add it to top and bottom then I could do well add to class and we'll add the class Mt. So now I just added margin top and margin bottom using two different classes and then,
Iris Coats: So, it would help you to format. Your specifics that you wanted as far as margins and stuff. That's one reason why you would do that.
Lewis Benson: it can be, so if you're going to be doing the same style over and over and over again, Instead of saying, Let's say, I want margin top on my body and so I could do body and I can put my margin top on it and I can say 10 pixels. And then let's say, I want to put that on my H1. So then I would do H1 margin, top 10 pixels, or I can have a margin top class made. And I could say, We'll just put a class name here, and we'll just say Mt. my body has margin top and one of them, my header. I'll do class name Mt. And we also want to put margin bottom on the header.
00:40:00
Iris Coats: So no.
Lewis Benson: So I can rapidly. Add styles to my elements. By having multiple class names that have preset styles on them.
Iris Coats: Okay.
Lewis Benson: And where this becomes really useful is when you download somebody else's pre-made style sheet, maybe you're getting a theme from somebody and they have a Web page that's already designed. But it doesn't have any specific styles. It's all set up like this and you can use these pre-made styles where you just say We're gonna put top margin bottom, you might have one for padding, one for setting something to flexbox where you're like, Okay, I want this to be a row, I want this one to be a column and you'll just keep adding these classes. you might have one called row, You might have one called column adding top small, like whatever you want to call these class names, and you can start stacking multiple class names across Your file and that's kind of a more advanced topic too, but it is good to know that it can be done especially…
Iris Coats: Yeah.
Lewis Benson: if you don't want to keep on repeating the same style over and over and over again, you can do this.
Iris Coats: For it. Okay. Thank you.
Lewis Benson: And you're welcome. And that's also why a class is really useful rather than an ID because a class can be applied to multiple elements where this idea of heading, can only ever be applied to this If I put ID of heading on this body as well, it would be invalid. it might work with CSS, but it's gonna break things with scripting later on. So you only ever want to have one ID that's unique. If I needed the new idea on my body, it would have to have a new name so I can do main content or something. And then that ID would select just the body. But with a class, you can put that class name on multiple elements. Yeah, great question. Thank you for that.
Lewis Benson: And can anyone tell me why I mentioned it a couple times, but I don't know if I was very specific about. Why do I put these style? Element in the head of the document. Why is it all the way up here?
Hannah Richards: So, it can apply to the full document.
Lewis Benson: that's actually a really good answer. That's not the one I was looking for. But yes, that is one of the reasons why it's in the head. The other one is because the head is invisible. It's set the display, And if there's ever a case where you have plain text and you're in your file, It'll actually show up on the document. You may not want that. So having this in your head is also kind of a safety net, where it prevents if I were to just write some text in here. That word. Hey, we don't want that to show up on the page. I'm not sure if the style might also be set to display none. But that is one of the reasons why? Yeah, this looks like the elements styled to display none as well, but if you're ever to type outside of there, it would definitely show up.
Lewis Benson: But yeah, great answers. This will apply everything to the page before the page is fully rendered. So as it's rendering the page, the styles are being applied. Cool.
Lewis Benson: Does anyone have any more questions? We've covered a lot of stuff here.
Hannah Richards: You I did. I was just confused on how to comment within my coding. Is there any shortcuts?
Lewis Benson: yeah. There is a shortcut for comments. So if I wanted to put a comment on this 1, I would hold the control key and press the forward And the slash that shares the same key as the question mark. And that'll create the comment.
Lewis Benson: And if you wanted to remove something with a comment, you could highlight that block of text hold control, press forward slash and it will actually comment out that section So that it's no longer being applied. And then, you can undo that the same way. So your little toggle there, does that answer your question? Yep.
Hannah Richards: Yes, thank you so much.
Lewis Benson: Yes, Krystal.
Krystal Jefferson: so, I'm a little bit confused, but, I see down here, where the body and the header is that the same as everything in the style section or I guess.
Lewis Benson: so, I'll see if I can answer your question here. Let me know if I'm kind of off track but the body is the main content your page. And a header represents the top of your page typically or the top of an element. So when I'm saying, header, it would be like the label or the title.
00:45:00
Krystal Jefferson: No, I mean where you have beside the body main content. Is that the same is
Lewis Benson: This here, the id attribute.
Krystal Jefferson: What's?
Lewis Benson: The ID attribute would be a way to select the body. So instead of in my styles up here, I could say, I'll go body. And we'll give it a background color of gray.
Krystal Jefferson: Okay.
Lewis Benson: And then if I go to my document we can see. I get that background color. Another option would be.
Krystal Jefferson: Okay.
Lewis Benson: If I don't like the gray, I'm going to leave this underneath. I could select that by this ID called main content, so I want to actually just highlight that copy it. I'm going to put a #Paste. So, I help my selector for main content of selecting by ID. And I'm going to give it a background color. Of Hashtag at 4f4f or this is the hexadecimal version of an off-white color. You can always use the color picker to get that.
Lewis Benson: And when I look at my document, I now have that off white color. So I'm using two different methods to select here. The first one is body. but I'm overriding gray body style because up here, I'm using the ID selector, which is more specific So, if we look down at my body, that's where the ID comes from, I applied it as an attribute, I also applied this class called Margin Top. Which is adding margin top to it. Maybe I could put something else in there that will show up a border. We'll give it 10 pixels of thickness, solid red, just to see what that looks like coming in from that margin top class. so, let me Back in there and there we can see everything that I gave at that class to is showing up with that border. We also still have the ID selected.
Lewis Benson: And the body selector is not being applied with that gray background color. Let me go to my Dev tools and show you that I'm going to click on the body.
Lewis Benson: And there it is. when I look in my tools here, let me zoom in on that. And bring this up. So it's easy to see what I'm looking at my tools. We can see that this background color of f4 F4, which is this off, white is being applied. But this selector down here, body is crossed out. It's not being applied. if I wanted to uncheck this box, we could see what it looks like with the gray applied. And then if the gray is also checked, I can uncheck that and it goes back to the default, which is a white background. Not the off-white. Let me show the difference there. And kind of see that flash and
Krystal Jefferson: Okay.
Lewis Benson: but yeah, I have two different selectors going on here. I have the body and I have this ID. And all I just seen that come up there. Never noticed that before. How do I get that there? The specificity also works in the developer tools as well. So, you just highlight over the selector and it shows you the specificity. That's really cool. And can someone tell me what this square is on the bottom here?
Iris Coats: It shows the margins and what have you on the page?
Lewis Benson: Yeah, what? I mentioned it a few times before. Do you remember what the name of this box is?
Hannah Richards: I feel like a visualizer.
Lewis Benson: This is called the box model.
Lewis Benson: Yeah, I was last week when I mentioned it so it's okay if you didn't remember it. But yeah, this is the box model. And what this is actually showing us, is how all of the elements are currently sitting. Remember I said, Everything on CSS is about boxes So here we can see the content and it shows us the width and the height of the content, we have that for wid and we have 97.7 Pixels for height. If I shrink this down, you can actually see that move. My width is shrinking now I also have my border here. I have a 10 pixel wide border See if we can change that to a hundred pixel border, you can see that moves in, we can manipulate our padding. I had a hundred pixels of padding. We can see that gets moved in
00:50:00
Lewis Benson: And you can play with this to see what things look like if you were going to change different properties. So maybe you wanted this to be centered using margin. You could do that.
Lewis Benson: By playing around in here to see what you could change in order to apply these styles. So this is a pretty cool tool to use also for debugging. You can just play around in here. And get an idea of how you would want to lay out your page. Does that make sense?
Lewis Benson: Okay.
Lewis Benson: All right, so does anyone else have any more questions?
Lewis Benson: Okay, so I'll just create a second file here. We'll call this.
Lewis Benson: Second. .HTML.
Lewis Benson: And I'm gonna give this the CSS. Demo.
Lewis Benson: Okay, so if I wanted to create a navigation bar, we'll do a horse our vertical, one similar to the one you see on Wikipedia How would I start with that?
Lewis Benson: What elements should I put in here?
Daniel Perez: Made.
Lewis Benson: I'm going to put that in real quick. Nav is a really good one for the navigation area, the main will be for our main content. I'll just throw a little bit of about an H1.
Iris Coats: it's
Lewis Benson: Just so we have something on the page and a paragraph with some more a minute. For the nav. What would I need to actually create let's say three links.
Ryan Arnold: You would want to UL.
Lewis Benson: Yep. A ul. Why not an ol.
Ryan Arnold: Because an OL is numbered.
Lewis Benson: Okay, so there's our UL. And we're going to create three, what?
Hannah Richards: A.
Lewis Benson: Not yet. Those will be coming out. Those are going to be nested in this,…
Hannah Richards: Of the Allies.
Lewis Benson: the Allies. Exactly. So'm gonna do i I'll do times three so that it creates three of them. And within that, we're going to create. Three anchor tags. So
Lewis Benson: I believe I can do this little shortcut where I put the angle bracket, which means direct child and CSS. So I'll use that now and we'll say a
Lewis Benson: But that makes sense. What I just did. Let me show that again, because I don't think I explained it very well. So, whenever you have a child element this little Angle. Bracket is representing that Child. So, in this case, if I wanted to select this ul, I could do now. Angle bracket. UL. And it would be the same selector as just selecting the UL. And I'll show why that could be useful in a little bit but for this shortcut, if I type Li times 3 with a direct child of an anchor tag like this as Li times three no spaces or anything and I click on that emet abbreviation. I get three l's each with an anchor tag in them. And the hrefs there. So just a little shortcut you can play with that if you want, you don't have to use it. If it's
Lewis Benson: Kind of weird looking until you get more comfortable with the L, just one of the show that for anyone who was interested in that, and I'm just gonna put hashtags in here. Just so there's something in the href. We can eventually put files in here or even I'll put a Google link in this one. Just so we have an actual link. The rest of them will just be hashtags just so it doesn't go anywhere. And then we'll need a link to the page or some text for the link. Sorry, I spoke there. And we'll say home
Lewis Benson: About So, when I look at the page here,
Lewis Benson: I need to how do I get to the new page? Can anyone tell me that? The file name is Second.html.
Ryan Arnold: You go up to the URL and you change index.html to second that HTML.
00:55:00
Lewis Benson: Yes, So we'll type in second.html. And now we're on the second page. So, we have these little bullets here. And let's say I don't know how to get rid of these and I don't have any idea even what to look for an MDM. I want to show you how you can solve problems just by Google searching for this because this is really important. You're going to be trying to do things with CSS and it's gonna be really hard to figure out which properties to use and not all of them were intuitive on MDN. So I'll show you how to use your tools to solve this. so, I'm going to say, How to Remove Bullets from Li? And HTML. I got a nice autocomplete there. so, Right off the top. We get something. This is blog post here, get CSS scan.
Lewis Benson: A blog posts are pretty good resource, sometimes they'll get you the solution sometimes. Not we can see that. It's highlighting this for me right here, Add list style type, none to your code. And this is referring to CSS. So that's one way to do it. I'm going to scroll down just to see what else came up for this stack, overflow is a great resource for this type of thing. This one of my favorite ways to get problem solved because any question you have probably has been asked on stack overflow at some point. So if I go to stack overflow, We can see that they get a little bit of negative. Remarks here, probably because the questions would ask too many times. But we do have some answers here and they're showing some CSS. Not everything on here is going to be what you need, but we can see right here. They have that list style none and they're selecting.
Lewis Benson: the div with a class name of UI menu and then are also selecting the LI This is sort of like using the direct child, except when you don't have a angle bracket and you put a space, It will select any children that has Li and we'll get more into how that all works a little bit later. I just wanted to show you that. So you kind of have to look through these code snippets. They provide to see what they did. They're showing another option here with the Uls or they say list style type. None I believe this works pretty well. So this is the solution I'm going to go with Eli List Style 9. Let's see if there's any other ones on here. They're using an attribute class. No bullets. And then they have their CSS down below. And list style type none. And you can see that they have that selector there. The same way.
Lewis Benson: so, stack overflow is a great resource for finding these type of things, and it looks like the most Popular response on here is selecting the UL, but I do know that the Lie works. So that's the solution. I'm going Selecting the ally. so, in the head, I'm going to type style. And within the style, how do I select the Allies?
Lewis Benson: With selector will I use?
Hannah Richards: Can you use class?
Lewis Benson: I can use a class if I put a class on the Allies.
Hannah Richards: Arius. Use ID then.
Lewis Benson: There is no ID on them either. So if I were to put an ID, each one of these would have to have a unique ID so I'd have to say all I want Yep.
Hannah Richards: Okay, so to select all of them in general, just
Hannah Richards: Would you just use now?
Lewis Benson: If I just select Nav, I'm actually selecting the grandparent of the Li, which is the NAV. And I'll show you what happened here. If I do that now, Maybe this would inherit down, I'm not a hundred percent. Sometimes you'll run into stuff like that, so that might work. I'm going to try it just a double check. Let's see if that actually applies. And no that didn't apply because I'm
Hannah Richards: If you use the arrow though, like how you were saying and then listed out laugh, you will lie.
Lewis Benson: like that.
Hannah Richards: Yeah.
Lewis Benson: and that's a pretty specific selector that you just did, we're saying find our nav element and within that now of find our ul element and within that find our first lie, Or the direct lie. So if I have another Li that would be nested inside of here. Let's do another. We'll do an OL here. With an ally here, and let me put some content in here. Let's see what happens with that. Look, I have the one right there.
01:00:00
Lewis Benson: if I were to remove these selectors, And just do that. that one goes away. Can anyone tell me why that is
Lewis Benson: Why do I have the one? When I have it nav Uli.
Hannah Richards: Because the style list down of none is applied to it. Once it's put into the style attribute
Lewis Benson: So, it's
Umar Z: You're only directing it to Ally and the next step is Ol in that list his allies of the path is incomplete. I think you have to define the whole path.
Lewis Benson: You're really close with that answer. Basically what it means is Find a UL. That is a direct child of the NAV. So watch what happens if I delete the NAV. that won't work because this is an OL. Let me make this a ul and I'll show you what I mean because you're almost there. But in this case we have the same results we have that bullet there. if I remove the nav, and we look again, it works even though I didn't provide the entire path, the reason is, This is saying find a nav element that has a direct child of…
Iris Coats: .
Lewis Benson: And then it's saying, Find a ul that has a direct child of lie.
Iris Coats: 
Lewis Benson: So when this was an OL,
Lewis Benson: this isn't a direct child of NAV. If I were to make this a ul like this,
Iris Coats: it's a direct child.
Lewis Benson: And then I actually wrap this inside of another nav.
Lewis Benson: I just selected this. Again you're close. It is a different child. So I'm selecting this nav now and I'm selecting this now and then I'm selecting this ul and I'm selecting This is happening at the same time and then I'm selecting all of the Allies. So, I gave it direct child of UL to the direct child of Eli, and that's why you don't always want to be this specific with it. If I just say, get every li on the page, and give them a list style of none. Then it just applies it to everything. That's an li So then I could even put a UL down here. With an ally in it. And say.
Lewis Benson: Hello World in there. And we don't have any bullets there. if this isn't the behavior you want, maybe you only want to get rid of that list style? On your navigation. Then that's the case where you're going to want to say Ul. Li. And now I have my bullet here. But I don't have it up here.
Lewis Benson: So, does anyone have any questions about that before we take our break?
Lewis Benson: I'm sorry if that was confusing. This is one of those concepts where it can mess with your mind a little bit because you're selecting the l's and it's like, okay I got the cell. I have a no list styles. Or Why did it not work here? Why did this one didn't apply? Then you have to go in and figure out exactly what you selected and think about it. Logically what we have this nav that we're selecting And then we're selecting the UL and the Dli down here. This isn't inside of a nav, so it's not going to get selected. So I'm glad you showed me ask that about the
Lewis Benson: the direct child there. That was a really good example for this.
Lewis Benson: And does that make sense? So more. When I said to this, not exactly the full path, it doesn't have to be the full path.
Lewis Benson: Because if I wanted the full path for this, I would have to do this now Ul. Li again like that.
Lewis Benson: That would be the whole path to this one. This will be interesting because it won't do these ones. Now actually doesn't do any of them because I mess something up. Ul.
Lewis Benson: Because this isn't a direct child.
01:05:00
Lewis Benson: This would be a child of the UL, that. So now this one is applied with these ones aren't so that is really confusing. That's a lot of nesting. And you don't see this type of behavior all that often but it was a good example to show you on how some of these concepts work. So I'm glad that was brought up. Yeah, let's take our 10 minute break. We're over our one hour Mark and then we get back, we'll dive into selectors a little bit more in depth. We'll talk more about the ID class and elements. And we'll get into more of the box model. All right, so let me start my 10 minute timer and I will see you in 10
TRACY JOINER: What hours are the TAs available at 6:30 in the morning to 9:30 or…
Lewis Benson: Yeah.
TRACY JOINER: 6:30 in the evening tonight?
Lewis Benson: Ike Are you still here? Did you take your break?
TRACY JOINER: And find that out.
Lewis Benson: Yeah, so there's actually calendly links. Have you seen those? I'll put them both inside of the class chat.
TRACY JOINER: no.
Lewis Benson: Basically, what you do to meet with the TAs,…
TRACY JOINER: but,
Lewis Benson: is you open up that link and it has the times that they're available and you just click on that time and you can schedule a one-on-one session with them. Yeah, and…
TRACY JOINER: Okay.
Lewis Benson: just, you can make an appointment, anytime there, they have their calendar so that you're not walking on their time. Those are the times that they want a ta. So don't feel like you're bothering or treating on them, or anything like that. that's what that calendars for. But yeah, I will share that in the class chat. And I will see everyone at 10. Let me reset this again.
01:15:00
Lewis Benson: Okay, welcome back everybody.
Lewis Benson: Hope everyone had a good break.
Lewis Benson: during the break that anyone think of any questions or anything unclear that Maybe you want me to touch up on?
Lewis Benson: Okay. Yeah. Justice.
Justice Miller: I just wanted to say I was driving and lost connection for a little while, but I locked back into the class.
Lewis Benson: Okay, that's fine. If you missed anything during that time, we'll have the recording. It should be First thing in the morning. so I'm going to talk about the box model again. So to get to the box model and view it. And I'll do it here. So, let me open up my Dev tools. I'm gonna go to inspect and whenever you open them up it's usually at the bottom of the style section. So let me zoom this switches between them. You have your elements on one side and your styles on At the very bottom of the styles, that's where you can view your box model. So I kind of want to explain how this stuff works because it is important. So to do that, I think the best way is just to make a box. Let me go into my. Page here. We can stick with this second.
Lewis Benson: We'll go into the main. And I'm just gonna create a div. And I'll give it some content.
Lewis Benson: I'll do. Alarm Times 3.
Lewis Benson: And I'm going to put in On the div so we can select this div even though it is the only one. I just want to be very specific about my selector. And I'll call it box. And I'm going to go up to my styles. Let me remove this stuff here for now. And what I'm going to do is I'm going to let me put that back in there. I'm gonna create a second style element and this is one thing you can do to keep things organized. You can have multiple elements based on what you're currently working on. So if you want to keep all of your nav styles in one place, you can do it this way and then if I want to cut my box elements down here. I could say box. And now I have that selected. I'm going to give it a background color, just so we can see it. And the background color will be blue. And I'm going to give it a border.
01:20:00
Lewis Benson: This border is going to be two pixel stick. A solid border. And I'll do black for the background color.
Lewis Benson: And let me take a look at that.
Lewis Benson: Okay, so this is our box and it has some text in it. So what I want to explain here is how these actually work. And let me duplicate this, I'm going to create a second box.
Lewis Benson: Just for this. We'll just do that. And we'll say, Box two is the ID. And let me duplicate these styles. Change that to box too. And I'm going to change this color to red so we can see the two different versions here. I know that was a lot at once just to recap, I copied and pasted my box. So I have two divs called box. They each One is an ID of box, and the other is an idea of box, too. And then in my styles, I duplicated my styles. And I created the same styles, except this one has a red background. So let me see the preview now. And we can see these are pushed up against each other and it has a really thick looking border there in the middle.
Lewis Benson: I zoom in on that. We can see that is two pixels where my mouse is now on the left. So this is four pixels here. And that's because these are up against each other. So how could I push these two elements apart? What part of the box model? Do I need to manipulate to get some space in between the blue and the red?
Lewis Benson: It's not padding, it's Margin we hit.
Ryan Arnold: Margin.
Lewis Benson: We hit all three. Properties, that can manipulate there. It's definitely the margin that remember margin of space between elements and I'll get into padding here in a second. So, We'll do 10 pixels. I'm just picking a random number here. And it put it on the left as well as the top. So now, these are being pushed apart by the margin. So what happens if I put a margin? Of 10 pixels here as well.
Lewis Benson: Notice there's still the same distance apart. I don't know if that's actually all that clear.
Lewis Benson: But you can see this has a 10 pixel margin when I highlight it. And we can see that margin goes all the way down to when I click on this, hitting the element in the selector here. And now we can see that margin goes all the way to the top. So Margin pushes on elements. So, if it doesn't quite move where you thought it did, then, open up your Dev tools and look at your box model. This is a really helpful tool to kind of figure out what's going on. But they did push them apart. So if margin pushes elements apart, what does padding do?
Lewis Benson: Anyone want to take a guess?
Ryan Arnold: They would push them away from the edges and toward each other.
Iris Coats: They?
Lewis Benson: Pushes what away?
Lewis Benson: Not the elements themselves, the elements aren't going to move. It's actually the content that's going to be pushed.
Lewis Benson: So the content gets pushed away from the border. Let me show that I'll do this to box two. We're going to say padding and notice some just putting these in a random order. It doesn't matter these all get red. But whatever ones on the bottom if you have overlapping styles is the last one that will be applied. So if I say padding of one pixel here, And I go down here and padding of 10 pixels. And this one pixel pattern gets ignored, you're aware how that would be applied. It's not going to give it 11 pixels of padding. And there we have some space. You can see it here with the blue. It's right up against the border but the red has that 10 pixels of space. So padding pushes the content away from the border and margin pushes the elements apart from each other. And if you wanted to play with this, using the
01:25:00
Lewis Benson: Dev tools, you can do that as well. So if I select my div, we can see that 10 pixels there. Let's make that 50 pixels. And we can see it gets pushed to the right away from the border. So that is an important distinction. And it is helpful to memorize the box model margin on the outside border padding content. It'll help you later on. If you have this memorized and it makes it easier to manipulate whenever you understand Whenever you change these styles, a lot of times. I'm guilty of this. I'll be in a hurry and I can't remember at that exact moment. Which one does what? So I'll throw some padding on and if it doesn't look right then I'll just go into my code and I'll say it wasn't padding, then I need margin and I'll just swap it like that. So, trial and error is a big part of all this.
Lewis Benson: Because you will forget it happens. Whenever it doesn't do what you expected it to. If you wanted it to move, it away from it, and it moved this down instead then just switch it to the other one. and if you want to, you can also just check the MDN and let's just type in margin and see what we see.
Lewis Benson: And this here is showing us as our little demos built in. Shorthand property. so, if you do, this is something a little bit more advanced, but if you put in Four different numbers, it'll actually read it like a clock. It'll say Margin bottom margin left. I'll demo that here in a little bit to show what that looks like. But that'll actually manipulate the margin like that. it applies all four of those at once. And again, I'll show that in vs code. But yeah, you just come into here and it can remind you you can just do some trial and error to see if you can remember that way. But yes, margin pushes elements apart padding pushes, content away from the border. So with that we should know what border does now.
Lewis Benson: If I were to thicken this border to say 20 pixels, I think you can guess what happened with that? And I already have it applied here so I'll just change it there. So, this is another shorthand notice I have three properties being applied at the same time. This is really common for the border. In fact, I can't even remember The longhand version, I'll have to actually go into the documentation to see that. If I do border, I believe it's Border style. And border width. I believe are the three that are short-hand. Yes. So, here's border width.
Lewis Benson: And let's go to border style.
Lewis Benson: So here's the different types of borders. you can have border none. This might be useful for The button element comes with a border already included. So if you don't want that border on there, you can remove it with border style. None. You can have a dotted border. This is looking kind of 90s themed now. We have this inset border. This can be useful if you wanted to make a button appear to be pressed, I believe, this is actually what they use for that as they set the inset on click. So that it changes it Solid to inset and it gives it that look like it's being pressed in that 3D look. Here is dashed.
Lewis Benson: I can't say that I've ever actually dashed or dotted. I don't know what. Maybe you have a style in mind that this could be useful for. Here's double and groove. And it looks like it's applying.
Lewis Benson: Multiple Things At once we have groove being a applied to one side, none being applied to the bottom. And dotted to the right. So this must be that another way to I didn't even know this was a shortcut and that's interesting. and we have our dashed so it should be the same as the ar margin where it bottom left, so dashed groove bottom dotted. Yeah, it's the same as margin. So, that's interesting. just read like a clock, though. Whenever you're doing these short hands with multiple styles, but again, I couldn't see you really much of a use case for the tted. Or the dash just because they're not Aesthetically a pleasing to me. maybe you have a use case for them. But you could do something where you have a border on the top and then you could use none and then a border on the
01:30:00
Lewis Benson: The right, and then you could say none and then a border on the bottom or something like that. So, you could use a shorthand for that if you wanted to. Let me show that with margin how that works. So, If I were to say margin 10 pixels and then I put a space in here, no commas or anything like that. And then I say one pixel. What this will do is margin left and right will be 10 pixels margin top and bottom will be one pixel. So, let's take a look at that.
Lewis Benson: And I put that on box two. if I change this to three, we'll say five pixels. Then what this will do is I don't got to remember how this works. It was I'm just gonna look at the documentation because I'm actually forgetting the order which says are with three. So, if I go to border shorthand,
Lewis Benson: where is it at?
Lewis Benson: Or sorry, margin shorthand.
Lewis Benson: Here we go. Three pixels. And if I change this to 100, so that's top. 5. 00, That's left Or no, that's just left. And that's So this is the left and So it's top left and right bottom with three. And like I said, sometimes you're gonna have to just check the documentation memorizing, All of this is not realistic. And then you have the four where it does bottom left, and I'll show that real quick here since I give it to that. Nice animation. You can see it We can see it'll go move to the left because we're pushing Morgan to the right. So it's actually pushing to margin on this side, but the animation is making it move left, but this is margin, right? We're just adding that space there.
Lewis Benson: And then we'll add it to the left. So we should see everything shift to the right, when I put this Oops. Sorry There it goes up right bottom left. So there it goes down. And then we'll put 10 px. I'll change up to 100 so we can say There's Our margin left.
Lewis Benson: Does anyone have any questions about this little shorthand here?
Lewis Benson: Again, You can always come in here and play with this. if you're feeling a little fuzzy on it, this animation makes it nice to be able to kind of figure out what it's doing. Whenever you're adding that
Lewis Benson: So we've showed how padding works and this is for the box model. Let me delete that extra one there. We have a little short hand going on here. We have a background color. We have a border. And We've also seen color being added before. Blue color green, and this should inherit down to the paragraph elements. Make sure that actually applies there it is. so, even though I put this on the div, There are certain styles that they'll go down to the children. You don't have to apply them directly onto the children sometimes so because I applied it to box two. It'll say, all of the text within this div is going to have the style applaud. You'll have to kind of play with it to figure out which ones will inherit. And which ones won't?
Lewis Benson: Notice that the paragraph element didn't get a border, it didn't inherit That style. But that the div does pass down the font color, so there are some topography styles that can be inherited. And that's kind of useful, too. You could apply topography styles to your HTML element, which is the most outer element here. I'm showing my mouse right now in the DEV polls. You could apply all of your typography, your basic general. I want this font family. I want this font size and do all of that to the HTML element and then you could get more specific and say, Actually inside of my main, I want to use this font
Lewis Benson: But in my footer, it'll still remain having the HTML styles that you set. So you could have default styles being set to HTML and then specify in this ul I want to use this font and this div I want to use that font. And in this div I want to use a different font So that's just a nice little trick you can use there. Hopefully, that made sense. I know, I didn't actually show you that. I can do that real quick just to make sure we understand what I mean. So if I select HTML remember, that's my root element. And I say font.
01:35:00
Lewis Benson: And I'm just gonna say Ariel A R I a L. And this will apply This font family to everything on my page. So let's see what that looks like. And we can see that we got rid of all those seraphs and this is an aerial font. Let me comment that And show you the difference. There's the sans serifs. Or There's this the serif font and here is the sans serif font Ariel. You can see that transform right there.
Lewis Benson: Okay, so if I have the font family area on everything, Except I want to put my heading. Which I do have in on Here's an H1 called. This is my page, so I'm going to select that H1. And I'm going to say font family.
Lewis Benson: Of. What do courier? And I just auto completed that. So it gave me all this extra stuff and I'll explain that in a second.
Lewis Benson: And let me zoom out to a hundred percent. So this is my page so we can see this is all aerial. Except my heading. Is not Ariel. It's using that serif font. You can see the little on the T here. It has that little line coming down. Let me put an H2 underneath of that. Just to show you the difference between the two. We'll say h2. This is my page. Actually, I'm going to just for demonstration purposes so that the same size, I'll make them both each ones. I mean, you shouldn't have more than H1 on a page, so that they're the same font size. And we can see the difference here. I' sorry. That made no sense. I just changed the font size on. That let me put an ID on this.
Lewis Benson: Heading one, we'll call it. And here is where I change that. I apologize that was A weird demonstration. There we go. Now we can see the difference between the two. So this one is being applied from the HTML selector. And this one is being applied from the ID. So we have those two different fonts being applied. but,
Lewis Benson: My default is from the HTML. So, everything is inheriting. From this parent element. And I just wanted to show you how that kind of works but it doesn't inherit every single style I apply. So if I were to say, Border. We'll do one pixel red solid. This is only apply to ML. This isn't going to inherit down to the other elements, so that is important to We can kind of see it right there at the edge of the screen. If I zoom way and you see that red line going around the exterior, if you wanted something like that, to go to every single thing on your page instead of HTML, you could put the star in there and this is where things get of we'll call it dangerous. I don't like using the star element very often because you have this happen. Everything gets every style you put there.
Lewis Benson: And this is good for debugging. We can see all of the outline or the border of every single element on the page. But it's not good for applying styles because maybe you don't want to apply a border to every single element on your page. And in fact, if you're ever going to do this for debugging, I'd recommend using outline instead of border. Because the outline doesn't apply to the box model. The outline is outside of the box model. So it gives you a better feel of what's actually happening. when you use border, it actually takes up space. In this case this borders two pixels. The outline doesn't take up any space and actually overlaps with each other. So it could be handy. If you're ever need to debug, you can put a red outline on everything and see where everything's at. Anyone have any questions about that?
Lewis Benson: So, the next thing I want to talk about is this here, I have three different font sizes or three different fonts on this font family. And I want to show you why This is actually a really important. Thing you should do. This is best practice, these are called fallbacks. So, the primary font that I want to apply is called The fallback would be courier. And then the fallback for that is monospace and Monospace is a very generic font family. It contains probably thousands of different monospace fonts. Can anyone tell me why I would need to have Fallbacks?
01:40:00
Lewis Benson: If anyone ever seen this before?
Elgin Sharper: Or different browsers, you're using or something like that.
Lewis Benson: It's not the browsers Iris. You want to take a guess at it?
Iris Coats: from the different sized phones, the computer screens to tablets, not all Programs can read all the formats.
Lewis Benson: It's closer. I'll actually show you a Web page here.
Lewis Benson: It's called CSS Fontstack.com.
Lewis Benson: And I'll just go to this autocomplete for Google and if you ever forget it, you could just search for a fiesta CSS font stack. And when I come in here, it's actually based on operating system. So, if we look at Aerial Black. In fact, it has 98% coverage across Windows and 96% coverage, across Mac that means 4% of the computers out there. Are not going to see this if you're on a Mac, that's a pretty small percentage. So this is a safe font to use but look at sergo 75% of Windows 0% of Mac. That means that MAC doesn't include this with their operating system. if you wanted to, you could go in and download these fonts. You could have every single font on here downloaded.
Lewis Benson: It would take up not that much space, but that'd be a lot of work and most average users are not going to do that. So you can reference this to see what might come up whenever you're using these. If we look at this one here, Gill Sands. We have 58% of windows with gill sands and 95% of Mac. So that's pretty interesting. This is where the fallback would be a really good place to use that so if I were going to apply Gill sands here, let me see, if it actually autocompletes that, for me, if it's installed, it will
Lewis Benson: And let me try it this way.
Lewis Benson: So I don't have that one. Here's this verdonna. Let's see if that's on here. that one's got pretty good covered. I want to see if I could find one. That doesn't have good coverage Cambria.
Lewis Benson: Where is Cambria?
Lewis Benson: So this one here is a good example of that. Only 35% of Max have Cambria, so I'm going to apply that.
Lewis Benson: That go.
Lewis Benson: Here it is. So what's going to happen now is if you're on a Mac, that doesn't support Cambria. It's actually going to try this.
Lewis Benson: Cochin how you say that. let me see what the usages on that.
Lewis Benson: And it doesn't even show up on here.
Lewis Benson: That might just be because it's a font family, but what is gonna do now is it's gonna start falling back on these. So, Georgia would be a next one.
Lewis Benson: So there's Georgia, which has 97% coverage on Mac. So this is probably going to be the one that actually shows up for Mac users. So on Windows, we'll get this font but on Mac, we'll get this font and it will just keep working its way from left to right until it finds one that it has. So it'll start with Cambria this coats in Georgia Times, New Roman. And if it can't find any of them, it'll just say, pick any serif font. And a seraph is the little lines that come off of the letters. So if I click on I'll just show you in Here's the difference between a serif and a sans serif. If you look at this tea has serifs as these little lines that hang down and give it that little base. This tea is a sans serif which sans means no serif So, it doesn't have those little lines. And this could be useful.
Lewis Benson: I see a lot of people just they only use sans serif fonts on their pages because they think it just looks nicer, but it's actually good to mix the two and then it might sound a little weird. But I can show you an example of where that might make sense. Let me clean this page up a little bit. I'll get rid of this outline my comment that Just toggle that off like that.
01:45:00
Lewis Benson: Will have to have this extra H1, We'll get rid of that. Or Deco, here it is.
Lewis Benson: So this H1 has that. Everything has to serif font so we want to deleted the wrong one. There we go.
Lewis Benson: because I overrode the styles with the Heading one here. This should be.
Lewis Benson: font family and we'll give this a Sans, serif font. And we can see that it'll try that first. If we can't find it, helvetica or then any sans serif font. Okay, so In typography, there's a whole separate rabbit hole for topography, you could spend months learning about the stuff and still not know half of it. It's fascinating to study though. But if you have a heading as a sensor of and your text as a serif, it can make your page kind of pop. I actually prefer it the other way around. So let me invert it and just show you what that looks like. I'm gonna use
Lewis Benson: Whoops font. Family.
Lewis Benson: And we'll switch this to courier. And then for my HTML, Where did that style Let me just comment out only the outline.
Lewis Benson: There we go. so because this one is serif and this is sans, serif, it kind of gives it some accent and you're headings are a good use for Serif because they're bigger and they're easier to read. You'll see this a lot on bank websites where they have their heading with this fancier, looking text to make it look older and it's more established and then they'll have all of their other text in this easier to read. So that it's more user friendly and more accessible. And speaking of that, notice this color here. And here one thing to keep in mind when you're styling, Is. This color ratio where we have this real dark black with this dark blue and this actually hurts my eyes to even look at this green on red. So make sure that you're using accessible colors when you are styling. Find something that mix as well.
Lewis Benson: And there's actually tolls inside of the Dev tools here that will actually read that for you and tell you. How well the contrast is and we can actually see that has a warning on it there. Says, the contrast is 1.28. And I believe I can bring that up in here as well. I typically use a third party tool for checking this.
Lewis Benson: I'll have to dig in here for a while to find the contrast I think.
Lewis Benson: Yeah, I'm not sure that's located. If you wanted to play around though and try to find that and then let people know If you do, find the color contrast in the Dev tools, I'd be cool. Yeah, there's a lot of external tools for that. You just type in color contrast. Checker. And lots of tools coolers is one of my favorite websites. And I don't have it set up quite yet, but here it gives you the background color and the text color and then it will tell you the rating on how well it contrasts. So, if I make this Something like that. You can see that the contrast is going down. And then it has even star ratings for small text and large text.
Lewis Benson: So it's pretty interesting and then here we get very poor.
Lewis Benson: But just a handy tool for figuring out contrast. And justice again. This is called koller's dot cow. Something else that's used for one here, whenever you're doing any sort of design. is I have color palettes on here so if you don't know what colors to make your elements, You can come on here, and Kind of experiment around and see What colors you like and how they contrast. And I believe there's also made ones already on Explore trending palettes. And you get a whole list of different color palettes you can pick from when you're doing your design. Anyone have any color? S questions comments or anything about this?
01:50:00
Lewis Benson: And I'm actually gonna drop this link in the slack too, so that we have reference to that.
Lewis Benson: Okay.
Lewis Benson: so we've gone over Selecting by Class. CSS, fonts the box model. So, I haven't talked too much about laying things out yet. I did talk about these different font sizes. So let's take a look at our navigation. Here, we have these three links. I'm going to delete this extra now. And we're just going to look at this nav here, real quick. We're going to see how we can lay this out, thinking about the box model and how everything in CSS is in a box. Does anyone know how I could make all of this lay horizontal? Using the Box Model Not using flexbox.
Lewis Benson: So if I take a look at this element here, what kind of display would this be right here? But it takes up the whole width of its container.
Hannah Richards: is a max with
Lewis Benson: It's not maxed with this is the display property. I'm referring to. It's actually display as a block element. And if we look down here, we see list item as the display. That's a more specific version of the block element. But if we look at the UL, for example, We can see it takes up full width of the page as well. And it is set to display block right here. So if I wanted these to be not block elements, if I wanted these to be in line, elements, I can change that using CSS and then they're all going to lay on the same line. So let me go into my CSS. And I'm going to scroll up to the styles. So I'm going to go back to our Li selector here and I'm going to change this so that it's just the Allies. So that we're back to Something simple. And what I'm going to say here is display.
Lewis Benson: In line and let's see what that looks like.
Lewis Benson: And look at that, they're all on their own line now, they're all on the same line. And that's because they're no longer block elements and I also removed the bullet point. Whenever I changed that back that selector was actually the wrong selector. So let me undo what I did here.
Lewis Benson: So, you can see this right here as the navul-li thing. And, if I look back at the page, we have all those bullet points and everything's on the same page. So let me just fix that part. First, just to show you one piece at a time. And then our list style was none. So now they're still block elements but now we got rid of that bullet point. And now I don't have to do is change these two display. In line. And now they're not going to be block elements, they're going to be in line elements and inline elements can share the same line. And keep in mind, these are in line within their container. The container is the UL. This is the box that they're currently in. Don't get it confused with the body.
Lewis Benson: You might think that this is taking up the full width of the page right now, this ul. So this is the body, but let me manipulate that a little bit. So, on the next line I'm going to select that UL. And I'm going to give it a width. Of 50%. So the UL is going to take up 50% of the width of What is the parent container of the UL? Can anyone tell me that I'm going to scroll down and show it?
Lewis Benson: What is the parent container of the UL? It's the nav.
Ryan Arnold: Into the nav.
Lewis Benson: Okay, so the UL is now going to take up 50% of the Mav. How much space is the NAV taking up currently?
Iris Coats: Three lines.
Lewis Benson: I mean the width, I'll give you a hint By default.
Iris Coats: 
01:55:00
Lewis Benson: The NAV is a block element.
Ryan Arnold: If we haven't specified anything, it would take up a hundred percent of the width of the page.
Lewis Benson: Of the width of its container. Yeah, exactly. And it's container is The body has a parent as well, which you could technically manipulate, we don't typically change too much with the HTML, unless we're resetting the HTML. And that's something we're going to get into more. When we start talking about actual external style, sheets is resets. Because the browser has all these default styles already on there. we got margin right here that I didn't put on there. And that's can sometimes cause issues as we've seen before when I just trying to do that, navbar, styling and had all that margin already preset, that can cause issues. So I changed the width of the UL to be 50% and we can see if I look at here, I can uncheck that it's not changing anything.
Lewis Benson: And that's because it doesn't need to change anything. This is still all the way to the left except for that A little bit of march or padding. That's on it. And the content isn't spilling out of it or anything. But what happens if I add margin to this in fact, I'm going to set a margin property on it.
Lewis Benson: And I'm gonna say margin auto. We're gonna let the browser decide on the margin based on the available space. I'll see what that does. Look at that.
Lewis Benson: it's a little weird looking because there's some extra padding on it. But it did move it over toward the center. Everyone see that. So we have our nav taking up the full width of the body. Our UL is taking up 50% of the nav. And then these anchor tags were actually list items. We can't get to the highlighting. It's not giving me the parent. It's just showing me The most child element of these but the child element is taking up the same with the ally because they're both in line. Because by default and anchor, tag is an inline element. So, these are just taking up only the amount of width that they need to for the amount of text in them. but what if I want a little bit of space between The edge of this element.
Lewis Benson: Or sorry the edge of this content and the edge of this element. See how that's tied up against it. Let me zoom in on that. And get that to select. So this G is right there and I wanted some space. I want to element to not I up against each other still I want some space. What would I use to do that?
Ryan Arnold: It could give each one a margin of its own and determine the width of the margin. It's list item.
Lewis Benson: okay, so let me see what happens when The list items are.
Ryan Arnold: I mean, Yeah.
Lewis Benson: So I'm going to add Margin. We'll say 10 pixels. And I just did that completely 10 pixels. so, They're on their own lines now. But notice the H is still pretty tight up against the edge here. I don't see that 10 pixels. So what happened there, why don't I see that?
Umar Z: There will be pairing, I think.
Lewis Benson: Exactly, that's padding.
Lewis Benson: so, The padding was applied to the list item. I can actually see the list item, whenever I put my mouse here, the anchor tag itself, I didn't get that padding, but it did apply to the list item. Why did it go down to multiple lines like this? I thought we told it to be in line. What's going on there. Does anyone know
Ryan Arnold: Because there's so much, sorry.
Iris Coats: The animal.
Iris Coats: I was just gonna say the adding of the margins changed the space. That it had available.
Lewis Benson: the margin is automatically determined. The UL with is set to 50%. And if I were to space these out on the page, if I would say put these in one line, I just ran out of space on my page. So it just automatically threw him down onto their own line so that it wouldn't do that. So it's kind of like a wrapped thing. So if I give this a little more space, see if we can get it to. Let's a little goofy looking there. Let me zoom out.'m 300%. We can get those all under their own line that way because now 50% We look at that 50%, We have a lot more room to work with there so that's some things to keep in mind. These are some common issues that you might run into while you're doing this. Is you set something to inline? You expect that it to be in one line.
02:00:00
Lewis Benson: But not because there's not enough space or to be in one line. Because my UL is 50%. This can't fit. The contents too big. So it spills down the next lines.
Lewis Benson: And this is just one of those things where it'll come with experience, too. The more you practice with this, the more it'll make sense. You just have to kind of play with it, if it's not doing what you expect. Then check here's the box model. And what you see here. He got this padding of 40. And we got that about the US is on its own line. What happens if I get rid of this 40 padding here, do we think that'll Fix that, maybe. I didn't do it. So, if I select, My. ul I think I missed selected in here. And we can see that the content is 216 pixels. Make that 300 pickles? And that fixed put it on its own line. so, now I know that if I set my width to be 300 pixels,
Lewis Benson: It's still on one line and look at that. It's still on one line. Why is it staying on one line? Anyone know?
Ryan Arnold: because it's telling it to stay at a width of 300 pixels, no matter what, even if you shrink the page size,
Lewis Benson: And if we look at my UL here, it actually did it in line. So no matter what I do now because this is in line styling, it's always going to be 300 pixels of width. So I can crush that right down and then I can scroll left and right which could be useful. There's some use cases for being able to scroll and see your content especially on mobile devices. Sometimes you want that behavior. a lot of times though, you want to design things, what we call mobile first, so when you're designing to lay out of your page, You would actually have your page shrunk down like this and you would build your whole site so that it would make sense on mobile. And in fact you can open us all up. And you could hit this button. And you can select an iPhone 12 Pro and you could develop your entire page to be for an iPhone.
Lewis Benson: Or we can go smaller if we want. We can see the SE And if that's still too big, you could always drag this in manually or even click right Moveable small This one says, Mobile large. And if anyone was wanting to look at this right here, is the toggle button for the mobile sizes. I just keep in mind when you close your Dev pulls this remains enabled. So if I close this and then I open them back up, I still am in mobile mode. So if you ever find it this is looking weird. You just uncheck that and it fixes it. yeah, so we can talk through these one thing now to keep in mind for design purposes.
Lewis Benson: So of these You could see monitors out there like 42 inch, ultra wides And it'd be like six monitors and one. So you could always use this here as well. You can set this to 50%. And now, we can get up to a 4k 200 2560 pixels. And this is what this would look like on an ultra wide monitor, and we can go even water. so, if you know people who are using ultra-wods and you want to divide develop for I believe it would look something like 12 1200 pixels or something like that for the height. So this would be about an ultra wide monitor. And you can see that it's not very good for ultra wide. So Make sure you're keeping that type of thing in mind when you start getting more into responsive design, and that's another rabbit hole. I'm going down right now. So I'm gonna Get back out of this.
Lewis Benson: Let's switch this back to normal. 100% out of Mobile view. Does anyone have any questions about any of this?
Lewis Benson: Is there any styles that anyone wants me to show anything that you want to see how to do?
Lewis Benson: So I'm gonna real quick Go into some of these colors, too. Let me go to Google. I'm briefly mentioned this last week. We'll go to Google Color Picker. And we can see all these different codes down here. And then we have a copy button for this hex code. Does anyone know what hex means?
Lewis Benson: Anyone familiar with hexadecimal? Yeah, yeah sorry.
02:05:00
Ryan Arnold: That was just gonna say, hexadec.
Lewis Benson: Take the thunder from you.
Lewis Benson: I got Yeah, so this hex code, This actually translates into RGB. So, if I were to, Convert these numbers. So hex code, is basically And this is a little bit of a rabbit hole. Very high level right now. Hex code just means base 16, so your normal counting system has 10 Symbols, which represent numbers including zero. So whenever you're counting you start zero, one, two, three, four, all the way up to nine and then you run out of symbols and this is our base 10 numbering system. So whenever you run out of symbols instead of creating an assemble for 11, we just go back to the beginning, not counting zero. And we say one zero that way. And then you repeat all of your symbols again. One, two, three, four, five. All the way up till you, get the nine, you run out of symbols and then it's two zero.
Lewis Benson: One, two, three, four. That's how Ten Works Base 16. The numbers are like this. I go 0 1 2 3 4 5 6 7. 8 9, A b, C, D, E, F, G. So A is equal to 10. B is equal to 11, C is equal to 12 and it's kind of a confusing thing to look at but That's base 16 and then also you have your binary which it can't get One zero. So you would do 0 0 1, 1 0, 1 1 1 0 0, 1 0 1. That's how you would count. So this would be zero one, two, three, four, five, and binary. That' That's a little bit of a rabbit hole. I just wanted to kind of show you this so that when we look at hex, this actually directly translates into RGB.
Lewis Benson: this is three numbers all smooshed together, so If I were to put this right here, this 32, because We're going all the way up to G. 32 A8 is actually 168 in decimal and 82. the blue. That is 82. Don't try to say So that's what hexadecimal how that would translate and you don't need to know how to translate hexadecimal RGB. But what is useful is knowing that because this is RGB the higher this is the more blues gonna be in it. The higher. This is the more green is going to be in the higher. This is the more red's gonna be in it. so, if this were say, GG instead of 52,
Lewis Benson: Then you're going to get more of a red color. Let me put this into vs code so you can actually see what that color would look like. Our box, we can change that. So put the hashtag. I'll put that in and remove the spaces.
Lewis Benson: It's not happy. I think it's because I didn't use capital letters.
Lewis Benson: Or my missing here.
Lewis Benson: One, two, three, four. One, two, three, four, five, six. Not sure why that is not behaving.
Lewis Benson: Let me just switch Entourage. What's that?
Ryan Arnold: I was just gonna say, it doesn't want spaces in between each one or
Lewis Benson: No, it shouldn't. So if I do G, sorry. That's because hexadecimal stops at It doesn't go up to G. That's what the issue was. So Gg52. And eight eight. And we get this. I guess it's kind of a pink because we have a lot of red in there. The FF means red.
Lewis Benson: And now if I switch this to RGB, I can just click on this up here and it will automatically switch it and we can see that we have 255 on Rgv. And they use 255 because of the amount There's eight bits on a bite and it's translates to binary. it's way too in-depth, but 255 is the maximum. You can have in a color And ff. If this were in hex is the same as 255, so that's how that translates. Does anyone have any questions about that? Again, You don't have to memorize all that. I just wanted you to kind of get some overview on the difference between Hex and RGB. And again, you'll see a lot more Hext and you will of RGB just because it's less characters. So it performs a little bit better.
02:10:00
Lewis Benson: Yeah, And that's because a bite has 255 bits? If you're looking at binary, there's 250, if you had every single bit turned on would be 255 ones in a row. and then after single byte again, that's outside of the scope of this. I'm glad I could bring up some nostalgia there. Does anyone have any questions before our break?
Lewis Benson: Today's assignment It's not going to be as in depth as my demos were today. So don't worry too much about that. We're just gonna be, applying a few of these styles. But before I get into that, let's take our 10 minute break and then we can get started on our workshop. So let me start the timer.
Lewis Benson: And I'll see you in 10.
02:20:00
Lewis Benson: Okay, welcome back everybody.
Lewis Benson: Let's talk about today's assignment. Just over.
Lewis Benson: All right, so for today's assignment, you're going to be creating your normal folder. This one's called CSS, Day 1 assignment. This will be on your local machine and your user vs code to create the files. just as we've been doing in the previous assignments, anyone has any questions about that? Make sure you make appointments with TAs to help you with that file structure if you're having any issues or anything. They can help guide you through that. So we're gonna have an index.html and a table dot HTML. On the Index.html, this is going to be how we've been doing our previous assignments. your main put a little bit of content on that page. It doesn't have to be anything specific, just have some content on the page that you can style with. so,
Lewis Benson: we're going to be using both internal and inline styling. On your index.html. It says it right here. That's where I'm at. we're to be where you're going to be using your inline styling. Only don't use the style element, it's inside of your head, use the inline styling, where you're using the inline attribute on the elements that your st Just to get a little practice with using the inline styling there. And you're going to apply a Ultra font families, basically just try to style three different HTML elements and that's the main requirement for that page. And then for the table dot HTML. You're gonna have a nav bar and a table on that page have at least I believe it says three rows should say here somewhere.
Lewis Benson: Three columns and three rows. So on your table, you're going to add some styles using internal style. That's referring to the style element inside of the head of your page. So, you'll create that at the head and you'll add your styles to that.
Lewis Benson: We want to create at least. Three different styles to that page as well. Using internal. Go ahead and try to make that table. The best you can similar to my previous demos. I don't know if you remember how I did it. You can always reference the old video, you can reference MDN or you could ask your classmates, how to do that. And maybe you could even get that little hover effect, if you want to try that as a stretch goal or the sales would be different colors. And maybe I could actually bring that up. File and folder. Yes. Ryan
Ryan Arnold: Is it okay if we just copy paste code directly from our notes if we've been following along?
Lewis Benson: copying and pasting can be dangerous. be careful with that. But if it's your code to copy and paste or do whatever you want with.
02:25:00
Ryan Arnold: Yeah, if we've just been writing the code during class as you write it, can we just like copy paste and use that? as a police to start?
Lewis Benson: Yeah, Yeah you can do that.
Ryan Arnold: Yeah, okay.
Lewis Benson: If you have a little template started that's fine but again even with when you're building your own little templates, just be careful with that because you may run into bugs that you didn't expect. I'd say my number one, bug is copying and pasting my old code. because I forgot about one little thing I added here and there and it just threw the whole thing off. So just be careful when you're copying and pasting yourself. It's definitely a useful tool so I'm not gonna say don't do it but again just I advise caution there with that. So let me take a look at this version.
Lewis Benson: and I believe, Here it is. So if you want to try to duplicate this, go ahead and try to duplicate this table. This one has an extra row on it. You need at least three rows and three columns. And then maybe you can get that little hover thing working as a stretch goal. Does anyone have any questions about today's assignment?
Krystal Jefferson: You said don't use style. Just use the
Lewis Benson: I know what your question is, and I'll go back over that one more time. So on your Index.html, only use the style attribute, don't use the style element. on your table.
Krystal Jefferson: okay.
Lewis Benson: Dot HTML, only use the style element. Don't use the style attribute.
Krystal Jefferson: Okay.
Lewis Benson: I hope that makes Yeah. So one of them will be using internal styles and the other will be using extra or something external inline styles like I'm excited to get to external stuff.
Lewis Benson: Okay.
Elgin Sharper: But can you say that one more time? So on an index, use the style attribute
Lewis Benson: And on the table, use the style element.
Elgin Sharper: All right.
Lewis Benson: And if you want me to show you the difference real quick, that would be helpful at all. Right. So here is an index.html. Let me delete all this. let me just go back to my old one that'll be easier. I'll open folder.
Lewis Benson: All right, so I'm gonna remove this style out of here. So this is my Index.html, so I created a header, I have a body, I'll put a main in here and article. just a few things for content, maybe in my article, I have a couple sections
Lewis Benson: And then I have a p tag, So if I wanted to put, let's say a different font on this p tag. This is the style attribute. I'm writing directly inside of the p element. And I will say style. Font size equals.
Lewis Benson: Sorry, not equals font size colon. And you get these little things here with larger medium. I don't know. everyone uses numbers. For example, pixels. So I'm going to say 50 pixels, that's a huge font. If you weren't aware and then we'll say Hello, World. Notice, I do not have a style element, I'll put one in here. And comment it out.
Lewis Benson: And say, We'll put a little Make this red.
Krystal Jefferson: Wait, how do you do that again? I kind of
Lewis Benson: You mean the comment? So, I had my style here. Because I'm online ight. When I hold control and press forward slash it will Outline eight.
Krystal Jefferson: okay, okay.
Lewis Benson: And because I'm using the better. Comments extension, I could put an exclamation point there and it turns it question marks blue stars, green To do, makes it orange. That's just an extension.
Krystal Jefferson: 
Lewis Benson: It's better comments. This one here. You don't have to have that if you don't want it, it's just something I like to have for color coding everything. So, yeah. And then on your table Dot HTML.
Lewis Benson: Inside of here. You will have your style tags and then I'll comment that and we'll put a star. And they'll say, Use this.
02:30:00
Lewis Benson: Hopefully, that makes sense. And again, this is the one with the table.
Lewis Benson: Something like that and there's a key head in there as well. So if you need a little refresher there, The header. Of a table. You might have to reference MDN, If you can't, remember the full structure of the table, I'd expect you to be able to find that at this point where you would get the information for how to create the table. You can also reference your old code, your old notes anything's valid Anything to give you a little bit of memory on that. So hopefully those instructions make sense, we're not using in inline styles on table. We are using inline style on index. just so we're very clear on that. Let me stop the recording now so that this can process a lot quicker.
Lewis Benson: And when I tried that splitting the video in half thing, it actually ended up taking longer because I had to put it back together to upload it. and ended up making it so I couldn't upload it 8 o'clock instead of 4 am.
Lewis Benson: And if there's anything specific you're working on, is there some sort of style you want to Feel free to shout it out. there's something you're working on.
Hannah Richards: something that I had trouble with was, Not the scale, the dream of it. The S1 not snap.
Lewis Benson: Is it attribute an element? Is it a CSS style?
Hannah Richards: It will spin. Sorry my
Lewis Benson: the span. Okay.
Lewis Benson: Did you want me to just show you real quick? how it works? okay, so…
Hannah Richards: Yes, please.
Lewis Benson: if I make another section here, I'll put a paragraph in here. I'm gonna do lorem times 2. So we have some content. And now if I wanted to use a span, I could put that right in the middle of my text. I do spam. I'll put the closing tag. and let's say, I want to span all of this text right here up to the word, ipsum So, grab the closing tag and I'll just drag that over to Epson. So now that's all wrapped in a span. The span is an inline element. So if I look at my page right now, I go live
Lewis Benson: You won't see anything here. There's no sign of the spam, but when I inspect it, we can see that span is right there. It's just a way to select that text. and then what you can do with that, If I go to my We'll do it in line or internal since this is my index.html so style. I can do font. Wait.
Lewis Benson: A spell around front Weight. And I'm going to say font way to 700. And this font way to 700, I won't show up we'll do 900.
Lewis Benson: Should make it appear. I gotta find that page.
Lewis Benson: There we go. Bold So if you look in my Dev tools here, there's a font. I think 700 is also bold. It is okay.
Lewis Benson: So I believe 400 is default.
Lewis Benson: And 100 is thin. If it has available for this font, it does not. So it'll still show it as default. So yeah, 700 by default is bold. And I believe you can also just say bold
Lewis Benson: Not every font has a bold font available for it though, so if you're using a new font, and you put in, 700 And it doesn't go bold. It could be that font doesn't work like that. But does that answer your question about how the span works?
Hannah Richards: So it's just And identifier basically for a selection.
Lewis Benson: It allows you to identify a specific piece of content. So, if I just wanted the word minus, I could wrap that in a span as well.
Hannah Richards: Okay, I'll get you.
Lewis Benson: and you can even nest to span inside of a span. So we have this one here and maybe I want Poro to not be bold so I could say, spam. And put this poro inside of there. And then I could do style.
02:35:00
Lewis Benson: Font weight. We'll do 400. And then if I look at that pooro is not bold, but everything else is because I have a span inside of a spam It's just the way to select a specific piece of text, or it could be an image. It could be anything. It's just an inline generic wrapper.
Hannah Richards: Do you mind doing the side as well? Yes.
Lewis Benson: Yeah. So, if I'm inside of an article, and this article will say, is about Pancakes. That's a great article. I'd read that. I'll do H2
Lewis Benson: Give me one second to get some content.
Hannah Richards: What if you're doing that? Can't. What's also the shortcut for formatting? I forgot.
Lewis Benson: So if you right click and you look at Format document, it should tell you the shortcut right there. If you're prettier, is set up correctly.
Hannah Richards: About it. Thank you.
Lewis Benson: okay, so when I get some content here that I can just copy in,
Lewis Benson: So here will be a paragraph.
Lewis Benson: Let me get rid of this extra stuff right now.
Lewis Benson: All right, put this paragraph here.
Lewis Benson: And this would be. We'll just an H3. Say introduction.
Lewis Benson: H3.
Lewis Benson: The history.
Lewis Benson: Have a copy, the history in.
Lewis Benson: Okay, so for aside, it's about the article, but it's not exactly related to the article. so we could have an H3 that says, did you know,
Lewis Benson: So we're now getting off track from the original article, which is the history of pancakes. This is just like a little tidbit. And we could do and let me put this actually inside of an aside.
Lewis Benson: Sorry about that. And then within there, I'll have a paragraph element. That just talks about. Oops, I just want to A format. So inside of this aside, this is unrelated to the article, but it's still relevant to the article if that makes sense. This is an article about the history of pancakes. And this aside is just a did pancake batter can be used to make waffles It's to if that makes sense. It's a semantic description of what this part of the article is talking about. So, it's not fully related to the article. You could also do this. If you were doing a blog you would say that Check out these other blog posts. have you put that inside of an aside even though it's part of your article still.
Lewis Benson: so hopefully, that helps this Little. Demo here.
Lewis Benson: Just out of curiosity. I want to see what this page looks like now.
Lewis Benson: There we go.
Hannah Richards: So is it the styling thing that would make it show up on the Arm on the side panel, or that would make it a side panel on the Wikipedia page and stuff like that.
Lewis Benson: Yeah, You would do that with CSS vs.
Hannah Richards: 
Lewis Benson: Side is mainly for screen readers when the screen readers. Looking at the article to say, Okay, the newspapers called Hello World, the articles called Pancakes and here's the introduction. And here's the first section this right here is unrelated. You want me to read this, too. that's kind of how the Reader would work.
02:40:00
Lewis Benson: So it would just read all of this smoothly and then when it gets to this point, it would prompt you, do you want me to continue
Hannah Richards: Okay, got you. I thought it was automatic …
Lewis Benson: Yeah, so it's just
Hannah Richards: formatting pink.
Lewis Benson: No, I don't think it has any default styles inspect it and take a look. Now, it's just display block.
Lewis Benson: Just extra window open.
Lewis Benson: so hopefully, that helps
Hannah Richards: It does. If you don't have anything else to move on hands. Would you mind? showing how you would make that a side panel the side?
Lewis Benson: So, there's a lot of different approaches for this. First thing, I want to do though is I want to open up. Figma.
Lewis Benson: Just open up a random figma jam here. This might be the one I was in earlier, I'm not sure it is. So, what you would want to do is figure out how your containers are laid out. so, when I look at this, I have A main. So let me create that.
Lewis Benson: And within that I'll actually make that the article because the articles, the container that contains all of the children. So we have an H2. We have a section, We have a paragraph. So what I want to do is figure out how many children are in this article. Which means they're going to be siblings to each other. So, let me collapse these So, we have three. so, what I'm going to do then is actually rapid Div Around these two. So that I only want two children to make this side by side. And I'll explain why in a second. Put that up there. Okay, so my div, let me collapsee. So it's a little easier to understand. I have an article with One children as a div or one child is a div. The other one is an aside. so, what I'm going to do now is
Lewis Benson: On my article, I'm going to say style. Equals. And we'll do display. And I'm just gonna try this with inline. I haven't tried this with large elements like this before. We'll see what this looks like.
Lewis Benson: And the reason I actually didn't even show you the reason you want to have, this is two children. It's because it's easier to put. Two children side by side.
Lewis Benson: If I had a third box, I remember my H3 is a box and I laid all the stuff Horizontally. Then it's going to look more like this. Let me stretch that over.
Lewis Benson: This might be easier to understand if these borders were a little brighter. So I'd have a section and in a side, if I lay these all out side by side, but if I put these inside of a div, I can delete that because it's inside of the div then I can have my aside on the right and my div on the left and I don't think that actually applied The inline thing. So I'm going to remove that and change this to Display Flex. And we'll take a look at that. And now my aside is on the right and my article was on the left is that kind of what you were looking for.
Hannah Richards: Yes, thank you. That was
Lewis Benson: Yeah, so I like to do these little wireframes to kind of, figure out how I'm going to lay this out because I know that Everything's going this way. By default display Flex lays things out in a row. And if you have two elements, they're going to be laid out side by side.
Lewis Benson: But what you need to look at is how many before you put your display flex on it, goes on the parent. How many children does it have? Because if I kept this as an H2, let me remove this div and I'll actually just show you what that looks like. This might look a little weird.
Lewis Benson: now my H2S over here. Taking up that space.
Lewis Benson: And then I have my section and everything side by side. because I used figma, if I undo a lot of this, I knew that that was going to happen with the H1 there. Because there was three children.
02:45:00
Lewis Benson: so hopefully, that helps and I'll put the div back in. And the reason I'm using a div rather than anything else is because I don't need to determine what the content is. I'm already doing that. With this section. And I'm already doing that with this H2. So, this is just a generic container to help me lay things out.
Lewis Benson: And they're what? I put something wrong.
Lewis Benson: There we go.
Lewis Benson: Didn't anybody else have any questions?
Lewis Benson: yeah, Gregory the Font family.
Gregory Robertson Jr: I'm not gonna get the front family to show up on my videos coats.
Gregory Robertson Jr: Yeah.
Lewis Benson: Did you spell it? F o n T.
Gregory Robertson Jr: We'll see.
Lewis Benson: my presentation, if you want It should be fo and t hyphen family.
Gregory Robertson Jr: 
Lewis Benson: Yeah, it's font. I've typed in front originally it was a typo.
Gregory Robertson Jr: You see?
Ryan Arnold: I've got a quick question. For the actual text of the headings and…
Lewis Benson: Yep.
Ryan Arnold: the h1s and the articles and stuff. did you want us to actually put content? Or did you want us to just use fuller text since we're focusing on the CSS?
Lewis Benson: You can use filler text for this.
Ryan Arnold: Okay.
Gregory Robertson Jr: I got it.
Lewis Benson: Cool. Yeah,…
Gregory Robertson Jr: Thank you.
Lewis Benson: no problem.
02:50:00
Hannah Richards: The presentation.
Hannah Richards: Wait, wait.
02:55:00
Lewis Benson: I'm glad you asked about the quiz Iris. There's actually going to be no quizzes until Friday and then Friday will be a 1:20 question quiz.
Lewis Benson: Sorry, I didn't see that until now.
Lewis Benson: Video we're about at a class time. Does anyone have any questions before we head out?
TRACY JOINER: Is there perhaps going to be any chance of? Remedial type. Classes for those of us who have on learning disabilities.
Lewis Benson: The tutoring is and TAs are available for anyone who feels like, they're falling behind, or not grasping concepts and you can schedule with them. I put the links in the chat within this call. Also, I put them in the October cohort to Channel. Just click on one of those links and you can schedule an appointment, anytime with
TRACY JOINER: Okay.
Lewis Benson: Yeah, and they're available. Their hours are pretty extensive you can and schedule as much as you want. You can do back to back appointments. if you feel like you need that I believe they set them up for 30 minutes or an hour, something like that. yeah, you can schedule as many appointments as you need,
TRACY JOINER: Okay, great.
Lewis Benson: Yeah, and it is no extra cost or anything like that associated. it's all included.
Lewis Benson: And definitely use the TAs. They can help you. If you feel like you're Just having a hard time focusing on what you're doing. They can help you. Keep you focused. It's really easy to get sidetracked while you're working but when you have somebody watching you work it's a little easier to stay on track.
03:00:00
Lewis Benson: Is there any other questions before? and the Google call.
TRACY JOINER: No.
Lewis Benson: Okay.
Lewis Benson: that is all I have for you guys tonight. Then if you have nothing for me, then I will see you tomorrow at the same time. Everyone have a good evening.
Umar Z: Thank you Lewis as well.
Ryan Arnold: Have a good night.
Lewis Benson: I gotta end the recording before I can end the call.
Meeting ended after 03:00:43 👋