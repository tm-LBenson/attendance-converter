nia-amar-wfe (2023-11-07 19:30 GMT-5) - Transcript
Attendees
• M a t c h a M o c h i i •, Brian Kimbrow, Chantrice L, Daniel Perez, Gregory Robertson Jr, Iris Coats, Krystal Jefferson, Lewis Benson, Lewis Benson's Presentation, Reece Renninger, Umar Z
Transcript
This editable transcript was computer generated and might contain errors. People can also change the text after it was created.
Lewis Benson: present
Lewis Benson: so we're going to start this off doing a code review, basically. We'll have to get some participation out of this one. But we want to do is go line by line starting at line one and go all the way down to line 27 and just explain what each line of code is doing. This is a common technique used in the industry with your senior Developer as you're writing code though. Have you go through your code line by line and just kind of explain everything and then if there's anything that they would consider to be better practice, they could give you advice on that and then help you grow as a that's the role of a senior developer to a junior developer is to help you grow by reviewing your code like this. So somebody want to start off with line one here and just kind of explain to me what this is for.
Iris Coats: just They use strict code allows.
Lewis Benson: yes, Iris
Iris Coats: the newest version of JavaScript to work not all the old broken codes, but the new ones
Lewis Benson: Yeah, basically, I probably use the wrong terminology when I explained it. It's not like the newest version but it's the newest syntax. Because the old version technically work because I can still use Devar and things like that. But yeah, you're right on that but it Vernon can be a little bit of a confusing word because it's still using JavaScript version like 22.8 or whatever the version is right now. But it's using the latest syntax is what I wanted to. I kind of get across yesterday. But yeah, it's just another way to say that.
Lewis Benson: Okay, somebody want to bring me two line three and just explain each piece of line three here since there's multiple parts to it. Somebody start off with this let keyword. What does this mean?
Lewis Benson: Gregory do you want to give it a try?
Lewis Benson: Just explain line three.
Gregory Robertson Jr: explain three
Lewis Benson: Yep, what's going on online three? What is this word used for? What is this? And what is on to the right of the equal sign here?
Gregory Robertson Jr: is the equal signal I can't remember the name of
Lewis Benson: Yeah, that's okay. I'm the reason I want to do this exercise too. this is just to kind of get you familiar with some of the terminology. Sorry to put you guys on the spot, but it's easier to start remembering if you have to say it out loud a couple times. So that's why I do this.
Lewis Benson: So if you need a little bit of help, does anybody else want to help him out with this one?
Lewis Benson: Brian you want to stuck in here
Brian Kimbrow: Is declaring a variable?
Lewis Benson: exactly. It's declaring variable. What is the difference between the let and the constant? So for this variable declaration? What is the significance of the let keyword?
Brian Kimbrow: it's that for me or
Lewis Benson: Anybody who wants to answer?
Iris Coats: That the one where allows you to change the variable but construct doesn't.
Lewis Benson: Yes, And this is it means constant. Yeah. Yep. and I actually wrote it in the name here makes a variable the word mutable you'll hear in programming referring to the ability to change. So let creates a variable that can be reassigned. This equal sign. Whenever we were reading this line of code, we don't say.
Lewis Benson: Utable we say assigned 10 to mutable VAR. That's how we would actually read this line of code. If we were going to tell somebody what this does. This is the assignment operator not the equal sign. And that's one of those weird things that's kind of takes some time and practice to get used to doing is basically changing how you talk when you're reading code to say this is declaring a mutable variable and it is assigned to the value of 10. And for good measure 10 is a number data type.
00:05:00
Lewis Benson: move on to line four to somebody want to take a shot at line for
Lewis Benson: so I'm gonna somebody wants to try.
Krystal Jefferson: He constant means it stays the same.
Lewis Benson: That's exactly right.
Krystal Jefferson: That's
Lewis Benson: Is there anything you want to add to this line?
Krystal Jefferson: My mind kind of went blank. but I know it stays the same…
Lewis Benson: That's it.
Krystal Jefferson: if you
Krystal Jefferson: if you try to change it. You'll get an error.
Lewis Benson: Yes, you would so the way I would explain line four if I was reading this to another developer. I would say I'm assigning the value of To constant variable and it's going to be a const you also instead of calling this a variable you could just refer to this as a constant and it's implied that it's a constant variable And then again, this is the assignment operator and like you said if I were to try to do something like this.
Lewis Benson: I'm actually going to An error in my console whenever I run this code because I'm trying to Constant variable to goodbye. So this is something that you'll see it come up occasionally these kind of Errors. You'll run into them as you're using constants from time to time. If you don't expect to need to reassign something and then later you try to reassign it you'll get to there And then this one here, I'm gonna run through these so we're not running too long on our time today, but I'll just kind of run through the way you would say them to a senior developer. So Line 6. We are a signing a Boolean value true to old style VAR and this is using the VAR keyword to declare this variable and this should never be used.
Lewis Benson: And that's because this right here is going to have some side effects a little bit later whenever we start getting into functions the way this works. It just has some unexpected Behavior, so If you see this in your code, if you were to go to stock overflow to get some code Snippets try to find some solution. You'll see older code on there where If you need to use those Solutions just replace VAR with and you'll have the same results. So here's a little bit of data types. We'll go through these data types. Does anyone want to just run through these real quick if you're comfortable with them?
Lewis Benson: What data type are we assigning to each one of these variables?
Umar Z: In the first Second is data type is the string.
Lewis Benson: Yep.
Lewis Benson: It's correct.
Umar Z: And this is a Boolean value. And this is the…
Lewis Benson: Yes.
Umar Z: what was that? call and Eclipse. No, I've got that
Lewis Benson: For JavaScript null is just null. Yeah.
Umar Z: Not all okay is not. Okay. And again, it's a data type is number.
Lewis Benson: This one has quotes around it. Yep.
Umar Z: Then Yeah just say that's a string. I forgot this one that no value. I'm just undecided to something. Undefined and…
Lewis Benson: undefined Yep,…
Umar Z: defined, okay. This one is again a string.
Lewis Benson: and then this one.
Lewis Benson: Yes, this is a string even though it's empty. It doesn't have any characters in it. It's still considered a string and you can always add characters into something like this. There's a little shorthand. I'll show you real quick you would do. data type I can't spell it right now data type. Plus equals and then you could put in a letter like this and it will append To this empty string. It's kind of like concatenation but a shorthand version of it. So then you could add characters one line at a time this way and this does become useful later on when we start getting into looping.
00:10:00
Lewis Benson: You might have to Loop over one string in pull certain characters out of it and you need to store them somewhere. So you'll typically have an empty string ready to go and you'll just start using this syntax to add them to your empty string. So I like to use these a container to hold my character is whenever I'm doing stuff like that. This is the functions code alert. And it has one argument currently. This functions argument is the string hello world. And remember anywhere you have. A string like this you could also replace with a variable that contains that string. So if I wanted to I could say let message equal.
Lewis Benson: Hello I know the capitalizations a little different, but just to show you that that would work. I could plug message in the same way and I would have similar results if I change this to a capital age the comma Not have the exact same results. Okay, so We're using a string method. On this variable called greeting. Can anyone tell me what would happen? If I ran this code right now with this line right here.
Iris Coats: It would show an uppercase.
Lewis Benson: If greeting was defined it would actually throw an error right now because I don't have a green variable.
Iris Coats: right
Lewis Benson: So it's kind of a trick question. If I did something like that. I'll even throw a little capital e in here just to the next line is also. normalized in some way so I would have the string greeting. And instead of this being with just a capital E whenever this line runs the whole string becomes capitalized H the E and the Y. So two uppercase is a string method and we're assigning the value that is returned from this string method to this variable. So The greeting is not being changed. But whenever this method is ran that value gets returned temporarily and we store the result inside of this variable acting greeting is still going to be h capital e y. So if I were to console.log greeting right here.
Lewis Benson: I'm not actually changing the variable. Whenever this is running it's changing temporarily just for this one line and then it instantly goes back to being the way it was. It doesn't permanently change it we that the two uppercase method doesn't mutate the original string. So in order to get value out of this you have to store the result into a variable like we did here so we have our normal greeting.
Lewis Benson: And then we have the shouted greeting being stored because this isn't actually being modified and then on the next line, we're doing the same thing whispered greeting everything's in lowercase and we're storing the return value from this method. I know that's a lot right there. This will make more sense whenever we actually learn how to make our own functions and see how the recurring keyword works. Just keep in mind for now though two lowercase and two uppercase doesn't mutate the original string. It just temporarily changes it. Next we have our prompt function. It's taking in one argument, which is a string and it's assigning that value to a variable called color and this variable is a constant. So once this is declared it can no longer be mutated into a new value.
Lewis Benson: Next line we have We have a string being assigned to the variable last name. And then we have a variable that's value is assigned from The concatenated Returned values of first name plus an empty string with a space plus last name. So we're concatenating all three of these values and storing them into the variable full name. Does anyone remember What the square brackets and they'll see row here.
Lewis Benson: I put this on its own line. Maybe it'll help it be visualized. So we have a variable. I remember first name is being assigned to a string. So what does the square bracket 0 do?
00:15:00
Umar Z: I think it brings the First alphabet of the strength of this later. I mean it's going to bring as a result.
Lewis Benson: exactly Yeah, so this is called indexing. And it's returning. the first character of the string in this case, it'd be the letter because that's what the first character is the first name. And then this is something I showed right at the end of class. Does anyone remember what slice does?
Umar Z: Yeah, a big proportion of the string. So it's going to start from 0 and it's gonna end on four.
Lewis Benson: Yeah, so it goes up to but not including the fifth index. So in this case,…
Umar Z: Yes.
Lewis Benson: we'll start with a that's zero. L is one I is 2 C is for an e sorry, I can't count C is three and E is four. So it's just going to return the name Alice. It will not return this empty space right here because it's actually using the full name whenever I highlight that you can see. It's Showing you where we're getting us from it won't return this empty space too because unless I change this to a 6 and then it would be Alice with a space after But if we just wanted it to be Alice, we make that a five and it will return the first.
Lewis Benson: wait one two three four Sorry zero one, two, three four. Yeah, the first four indexes there. And Counting was Zero. So it's a little weird to start counting with zero whenever you're counting out loud, but whenever you're looking at these it's and if you're never not sure just do a console.log and index what you're at. So if I wasn't a hundred percent sure what I'm going to get I could just do full name and see what is my fourth index and I would get the same result that way and I would see that my fourth index is
Lewis Benson: he does anyone have any questions about that?
Lewis Benson: Okay, so that's it for our code review. Now, I'm going to start diving into the actual lecture and we're going to be talking about a raise today. So I'm going to create a new Javascript file. I'm just going to call this array.js. And I'm going to include this into my index which I don't have any boilerplate yet. So let's put that in there. And at the bottom of my body, I'm going to put my script I'll select the SRC for the mnabiation and I'll say array dot Js. I also just want to put a little bit of content in here. Whenever I open up the body I can see that everything's working correctly and trying to get an H1 to show up. There we go. And I always go with the hello world. and I'm also going to change the tab name so that I can keep track of my browser tabs and know which one is my array demo.
Lewis Benson: Okay, let's make sure this is all working.
Lewis Benson: And it opened up on a different screen here. So I see my Hello World. control shift I don't have any code yet. So I'll have to add some stuff there. We do have a 404 for the favicon. That's just referring the little icon that's next to my title. So I'm not worried about that at the moment if I do a refresh that should go away. Okay, and what's wrong tab we go.
Lewis Benson: I'm gonna start off the same way and every JavaScript file. And that's what the use strict string and this usually strict string just ensures that we're using the latest syntax or the latest version if you prefer to make sure that we don't have accidental results happening with our code. another example of that actually if I were to try to assign a variable and I know this is a little bit of a rabbit hole, but just to show you one more reason to use this if I say letting them equal zero two one. like that you strict
Lewis Benson: Sure doesn't like it either but what will happen is this will make what's called an octal number? And let's just log that and see what it looks like.
00:20:00
Lewis Benson: And we get 17, but I actually said 21. So this is one of the reasons why you want to use strict is because if you receive a number from an API that starts with a zero, it's going to try to convert it to what's called an octal number and you can see 21 is not 17, but zero two one converts to 17 if you convert it to an octal number.
Lewis Benson: So this is something that you strict can prevent. Again, I just want to like iterate on the importance of this. This is something you don't want to forget and then here we get an uncaught syntax error because I'm trying to do that with a zero in front of it. So this is just preventing bugs from happening in your code. So make sure you're using that.
Lewis Benson: Okay, so we'll get into the arrays before we do the arrays. I want to make a bunch of variables. So I'm going to say let first name equals. John
Lewis Benson: That doesn't make it. Yeah, we'll do it. We'll stick with this what? last name equal though
Lewis Benson: let City equal New York
Lewis Benson: Let age equal. 50
Lewis Benson: equal USA
Lewis Benson: I've heard a few more here. I just trying to give you an idea of what I'm doing here. This is basically a list of data right now. It's not all related data that we could do a list of favorites. So we say Let favorite. color equal blue
Lewis Benson: let favorite music equal jazz
Lewis Benson: I'll do one more favorite book. So these are all this user's favorite things. So this is one person here that I'm gonna be representing through their code. And these are his favorites and we'll do 1984 is the book. So this is a list. But instead of writing out the list like this with JavaScript, we use something called arrays whenever you create a list of related data in JavaScript. You don't want to be just creating a ton of variables that are all Standalone like this because this is air prone and it's hard to make your code what we call dry and I'll put that in a code comment here.
Lewis Benson: This is an acronym and it stands for don't to contraction. repeat yourself So when you're dealing with code. You don't want to be repeating yourself with your code. So what I mean by that is I don't want to have to keep typing out the same lines of code over and over and over again when I can make code do it for me. So this is a principle that we try to use as much as we can. This is where we're going to introduce Loops to basically repeat our code for us. So we don't have to retype it out. If you remember back to when we did bootstrap, we had all those card components and we just kept repeating the same code over and over and over again in order to get all of those products on the page. With JavaScript, we can create one product.
Lewis Benson: And then Loop over that product and modify whatever the data is to produce all of those cards in about 10 lines of code. So we're no longer repeating 50 lines of HTML. We can use JavaScript to not repeat ourselves. And that's for a raise can come in as well. We can make for example a list of products in this case. It's going to be a list of favorite things So instead of having all of these variables, we just create one list and the Syntax for an array is square brackets. Currently. I created an empty array and I'm assigning it to a variable called favorite things. So anytime you see square brackets this represents a list. And what we can do now instead of typing all them variables out. We can just say a string Pizza comma
00:25:00
Lewis Benson: string blue comma string jazz
Lewis Benson: and close that quote comma and then string 1980 and I'm just gonna log this and show you the output.
Lewis Benson: All right. So I'm logging the favorite things riable. And that is the list of our favorite things from here rather than logging each of these variables. So everyone understand what I'm doing right now.
Lewis Benson: And I spelled Pizza All So let's take a look at that. And here we can see we have the array. And we can see each of the items that are in our list on index zero it's showing we have pizza on index one. We have the color blue on index two, we have Jazz and on index three we have 1984 which was the book. There are no labels with this. So if you were using an array for favorite things you would have to be familiar with the structure of the array to know which one is which and that's typically okay for if you had a list of products you were selling.
Lewis Benson: It doesn't really matter what order they're in. You don't really need a label. You just need a list of the product names. So there are a lot of use cases for arrays. You could have a list of HTML elements. You could have a list of data. There's so many different times. You would want to use lists. You can think to if you have user information. Maybe they have A cell phone number of work number and their home phone number. So you could use an array to store all three of those phone numbers in there.
Lewis Benson: Does anyone have any questions about what the array is?
Lewis Benson: And it doesn't have to just be strings. You can put any data type within an array. So we could do let and I'm just going to create an array of random data types. So let's call this random stuff equals. And we're going to do a null we'll do an undefined. We'll do a string. We can do a number.
Lewis Benson: We'll do a big number. We can do a Boolean. we can even throw variables in here so I could say I can even throw the favorite things array and here as So this is an array. Also. This is kind of cool with prettier. It'll list this out like this when you have enough items so that each things on their own line as far as the spacing goes in JavaScript. It doesn't matter I could do this. If I wanted to I could do that. I could put all these way over here. This will still read the same if I go into here, there's no errors. If I were to console.log random stuff now.
Lewis Benson: Got back down there just to show you that this does work. And there we have all our different data types. We can say our null or undefined ring our number our Boolean or another string and then we even have an array inside of our array. So if I open this up here is our favorite things array inside of our array and then I can open that array up as two and see all of those items. So this is a little bit weird sometimes to try to navigate through. sometimes you'll run into an array that has an array that has an array that has an array and you'll have to drill into that and try to find what you're looking for that that'll be Level three when we start dealing with apis. You'll sometimes get some data like that and that's usually coming from databases and just the way that it gets put together is just a little awkward, but we have ways to deal with that later on that we'll show you.
Lewis Benson: So does anyone have any questions about the array at all right now?
Lewis Benson: So let's talk about accessing the items in your array. I want to show you what happens. If I were to I mean format I want to document Whenever you document, right it converts everything into a string. So let's see what that looks like document, right? And we're just going to put in our favorite things. All right.
Lewis Benson: So that's the array up here. That I'm currently document dot writing. I just want to see what this outputs like, so We have our items from the array. We don't have the square brackets and we don't have any spaces in between them. So this might not be the most appealing. Looking code when you're trying to print out an array there are better solutions to printing out each item for the array, but I'll show you how to get each individual item printed out and then more neat fashion. So we have our favorite things and this is going to look a little bit familiar. What I'm going to do is I'm going to keep favorite things in my document, right? I'm going to put square brackets at the back of it and I'm going to put a zero right there. So this should look familiar from when we were dealing with strings. It works identical to the concept of strings except instead of grabbing the string.
00:30:00
Lewis Benson: It's grabbing the first element of the array. So in this case, it's pizza. So if I look over at my array, and that's this one here items zero. is pizza
Lewis Benson: Did anyone have any questions about how I got pizza?
Lewis Benson: Okay, so now I want to print out the rest of these items, but I want them to have a space in between them and a comma can anyone tell me how to do that?
Iris Coats: Put the space in comma inside your string.
Lewis Benson: Yeah, And I'm gonna use the string template literal instead of the concatenation. I just think the syntax is a little bit cleaner and easier to work with. So what I'm going to do first is put my curly brackets in just because I don't have everything. Here's the curly brackets. I'm going to press left. Dollar sign and I'm going to highlight all of this and put my back ticks in. And with this allows me to insert a variable inside of my string template literal. So I'm going to do this one more time, but I'm going to retype the whole thing. That way you can see I was just kind of showing you my little short way to do it that. Just the way I kind of backwards. So if you put the back ticks in first, then you can do dollar sign curly brackets and then you type in your variable name in this case. It is favorite things.
Lewis Benson: And then once you have your variable in here you need to index it. So we'll put in the indexes 0. And now we have to make sure we're outside of the curly brackets for the rest of the string. If you type inside of the square brackets or inside of these curly brackets, it's going to think that this is part of the variable name. It's going to throw an error. So I put a comma right here. It's not happy. We can already see a little bit of red right there. And it says expression expected. We aren't using an expression. I mean, this is an expression, but we're not putting another expression in here. So I'm going to delete this comma and I'm going to go outside of the curly bracket. I'm going to put my comma there. So what this will do is because I'm inside of the back text. So put the comma directly after what favorite things represents whenever we break this down deeper. favorite things at zero is actually Pizza.
Lewis Benson: So this is saying the string Pizza. With a comma after it and then I can put a space. And then I'm going to do dollar sign curly brackets. And I'm going to do favorite things again. And I'm going to show the alternative using can string concatenation as well. So if you prefer string concatenation you can use What a Dollar sign curly brackets and I'm just going to do one more for now and then I'll do the string concatenation next. And then this one is two.
Lewis Benson: So let's take a look at our document dot right now and see what that looks like. So we have pizza blue comma space jazz. So that was the result I was looking for. Does anyone have any questions about how I was able to print these three items to my document?
Lewis Benson: Okay, so now I'm going to do it again with concatenation.
Lewis Benson: I don't want to do it directly under this because I don't have any paragraph elements yet. And it'll just put everything on the same line. So I'm actually just going to comment this out and do it again.
Lewis Benson: So to do it again, it'll be dot right and I'm gonna put in a regular string And we'll start off with. Sorry, I don't want the string out. I want the variable name first. So it's favorite things. at zero
Lewis Benson: plus a string with a comma Plus A string I can do this all in one. I can do it comma space like that. plus the next variable name. So I'll just copy That way I can just edit it a little bit paste it over here. Put in the one Mama plus string comma space plus paste
00:35:00
Lewis Benson: that's three items there so if we look at the difference in the syntax here. Let me get this all in one line so that it's comparable actually.
Lewis Benson: So looking at the difference in the syntax, and we'll keep that once online. that's above we have our string to openness. This one does not have a string to open it. We have our comma in line with the string. I didn't have to leave the string put plus signs in or anything like that. Here I had to create a add in the variable name. This does the exact same thing and it does come down to preference. There are people that prefer using concatenation over string templates and there are some times where there's advantages to it as well. I won't be able to bring up those exact instances at the moment whenever we get into some backend stuff. I can show you some of that.
Lewis Benson: But for the most part, I do prefer to use this syntax just because I feel that it's a cleaner approach. It's easier to just kind of read this and understand what it's doing because the commas are in line. We don't have the plus signs and I think this can be a little bit confusing to read. and when we look on the document I have not a number here. because I have an extra comma there we go.
Lewis Benson: So does anybody have any questions about that?
Lewis Benson: And the difference is maybe between these two and I'm gonna undo these comments just so we can see that clear with the syntax coloring. So if you look at this line and look at this line, they do the exact same thing.
Lewis Benson: yes, Iris
Iris Coats: The one with the dollar signs. and the back ticks But I can't remember what the dollar sign was for their personality others.
Lewis Benson: Yeah, so the dollar sign is part of these curly brackets. It's part of that syntax and…
Iris Coats: mmm
Lewis Benson: it's a way to inject variables or Expressions within the string and let me show you what that means using a more basic approach to this. I'm just going to log it. and I'm going to create a string template literal and I'm going to say hello. My name is and I'm gonna put a dollar sign cket The dollar sign is tied to the curly brackets. This is all one piece, but my variable goes in between the curly brackets so I can use my first name variable here and I'll just paste that right into my curly brackets like that. So instead of having to do a plus sign in the variable name, I can do this what we call variable Escape where it allows you to type any expression you want and when I say expression, I mean anything that goes to the right of an equal sign is an expression.
Lewis Benson: So in this case, my expression is a string that represents John. And it says My name is John. So when I look at my browser, we can see the console.log right here on line 29 says hello. My name is John.
Lewis Benson: And I'll show you the equivalent using concatenation.
Lewis Benson: And we'll look like that. So again these both do the exact same thing. This syntax just allows you to have an expression within your statement.
Lewis Benson: Yes, Brian.
Brian Kimbrow: I just wanted to say one thing goes back kicks will be very important when you're using. the online 29 It wouldn't work. If you didn't have those back chick signings will. They're very important movies and a obstacles.
Lewis Benson: Yes, yeah, they make things so much simpler. If you had a complicated expression.
Lewis Benson: And you're trying to concatenate that in what could actually end up happening is your expression could get converted into a string instead of doing If you were in thinking about doing math with an expression and then you would end up with that scenario where you have 99 instead of 18 when you're doing nine plus nine. So this kind of void that situation as well because this can be a little bit dangerous when you're trying to include math inside of your string concatenation. We can end up concatenated numbers instead of adding numbers together And I'll show you what I mean real quick again in case you forget. So the console.log, I could do five plus five and this is result is going to be 10. and when I look in here, I see that 10 online 31, but if I make these strings
00:40:00
Lewis Benson: I have 55 instead of 10. And whenever you're dealing with concatenation with something like this, if you had an age in here and a birth year the current year and a birth year and you're trying to figure out what their age is based on that programmatically sometimes things can get twisted instead of subtracting the two it'll throw an error because it thinks it's a string or if you're trying to add things together. It'll just concatenate it and break. So this right here is another way just to kind of prevent that scenario as well. So concatenation has its place. But again, I try to use this as much as I can whenever I have variables if you don't have variables you don't have to use the back text though.
Lewis Benson: yes, Iris
Iris Coats: One more little question. He said the expressions or anything to the right of What are they the right of?
Lewis Benson: This equal sign the assignment operator.
Iris Coats: It's okay.
Lewis Benson: Yeah, and that's not the only definition of an expression. That's just one expression that I can show you right now.
Iris Coats: All right.
Lewis Benson: If there's something to the right of an equal sign this is considered an expression, but it's not the only expression. That's just one of the ones that you're going to see at the moment.
Iris Coats: Okay.
Lewis Benson: Yeah, so an expression is something that can Reduced down to a simpler form basically. So because I can add it to another string doing something like this. This will give me the exact same result because it's an empty string but this is an expression because it's being reduced down to a simpler form. This is still an expression even though it's already added simplest form. Because it just reduces down to what it's currently at. That's the best way. I like to look at it. I could also have something like let fave. numb equal One two three plus three, two one plus one one. And this will actually perform all of this math before assigning it to this variable and this is considered an expression here on the right.
Lewis Benson: So anytime you're doing something like math. That's an expression so I could also inject this right here. And this is still valid it'll do the math and it will output. My name is whatever that number is and we can see that here. My name is 555.
Lewis Benson: So we know how to access the items in the array Now using indexing. Let me show that with just a couple console.logs. Just to make sure we get that if I wanted to grab. Blue out of Favorite Things. How would I do that?
Lewis Benson: What would I type in to grab blue out of this array?
Iris Coats: slice
Lewis Benson: I could use slice actually does work on a raise,…
Iris Coats: It would be.
Lewis Benson: but So with indexing I'm going to put in Favorite things and then I want to put square brackets and then what is the index of blue?
Lewis Benson: It is one because we count from zero. So Pizza is zero blue is one. Jazz is two. In 1984 is So there's three items three from 0 to 3 indexes here. We can also use the dot length property. But before I do that, let me show you the favorite things. So we have blue. what if I want to grab this letter B, how can I grab the letter B out of the array? I just want the letter.
Lewis Benson: Does anyone have any idea?
Lewis Benson: And this goes back to reducing things down to their simplest form. You have to kind of imagine. What does this represent right now?
00:45:00
Umar Z: Yeah, we can add another indexing on it.
Lewis Benson: Yeah, because remember this is the string blue. So if I add another indexing here, this is perfectly valid now I can get the letter B by putting two indexes together. So now I'm indexing an array with this first one. And this evaluates down to a string. My second index is grabbing the first letter of that string, so I'm grabbing the letter b and this is a little bit of a complicated example here. But I just wanted to show you this because this is something you'll see a lot of these where they have indexes stacked with an indexes like this. So it is useful. And just remember you can also put variables inside of the square brackets because this number is an expression as well. So if I needed to I could say I'm going to do this at the top of the file. I'm going to use a const.
Lewis Benson: And here's something too. I didn't mention for naming conventions when you're constant variables. There's times where You'll use const for declaring an array here. It doesn't really apply to this situation. But whenever you're declaring a constant variable it's something that's never going to change. It's common practice to use all capital letters for this. So if I were to say
Lewis Benson: index I'll put an underscore because I'm using all capital letters. index selection equals zero and this is something you'll see a lot use all capital letters for constants an example for this could be the days of the week. So you would do const.
Lewis Benson: m o n equals Monday these are values that will never change.
Lewis Benson: Because Tuesday is always going to be Tuesday. You could also do your months like this and you use all capital letters to abbreviate the variable name. And it's just a convention you'll see you don't have to necessarily follow this I'd say the community split about 50/50 on whether or not you have to use capital letters on const or not. So I do it for variables Monday and Tuesday, but I don't do it if I use a const on my array. And I'll get to why in a little bit probably in a second half. I'll show you why. I don't do it that way. But here we have our variable index selection and I have it a sign to zero. So I can replace this zero with index selection and remember index selection reduces down to zero. So it's the same thing is me typing zero in there. So I'll have the exact same result. I have a letter B online 47 and again if I look at line 47
Lewis Benson: Line 47 it's this line right here.
Lewis Benson: So It looks a little weird. I've got a lot of stuff nested inside of each other. We don't necessarily want to do something like this just because this might not be fully understood. I'm just putting a zero in there is understood. This is the first item, but if you did need to have a way to update your file on the Fly you could put a variable at the top that represents that zero and you could create a configuration file like that. You would say okay, if I'm gonna run this script, I want my index selection to be for this time, or I want it to be to this time depending on what this script would do. In this case, the script doesn't really do anything. So this exclamation probably doesn't make a lot of sense, but I just wanted to introduce the idea of the capital letters and the variables at the top of the page like this.
Lewis Benson: So this is how we access items in the array. Let's do it one more time. Somebody helped me get index 1984.
Lewis Benson: Let me scroll back up there so we can see it.
Lewis Benson: I want to grab. 1984
Lewis Benson: how about somebody who hasn't answered a question yet? Anybody want to Answer that has an answer yet.
Lewis Benson: Remember we're counting from zero.
Lewis Benson: So if I put some code comments in here, maybe this will help.
Lewis Benson: This is item zero.
Gregory Robertson Jr: Was the question again?
Lewis Benson: How would I access 1984 out of this array?
00:50:00
Lewis Benson: What would be the syntax? I'm going to do it here online 50.
Gregory Robertson Jr: with favorite things
Gregory Robertson Jr: another breaker with three
Lewis Benson: Exactly square brackets and then a value of 3. or semicolon, and I'm just going to log this out and I'm going to put a flag on this console log because my consoles are getting a little messy and this is going to say Selected item variable so I have this as a string. And I have it as a variable. Let me put a space in there. Hope I have a comma so we don't need space. Okay, so let's take a look. And here's my select item. We selected 1984. How would I select the eight? You want to try it again Gregory?
Lewis Benson: If I want to get the eight out of that string.
Lewis Benson: You want to help them out Omar?
Umar Z: Yeah, add another index of the value of 2.
Lewis Benson: to so now my selected item is first I get the item out of the array and then I get the letter out of the string. So remember this reduces down to the string and I'll put some code above it here to show you. This is
Lewis Benson: 1984 so this section right here, let me move this.
Lewis Benson: from here
Lewis Benson: to This piece of code right here is the string 1984. Let me just a little more centered.
Lewis Benson: Does everyone understand how that works? Favorite things at index 3 is the string 1984. So now this would be the same as me doing this.
Lewis Benson: Because that is And if I put a index of two on that, which I did here. Then it's going to return the second index. And again these count from 0. So 1 is 0 9 is 1 8 is 2.
Lewis Benson: That can be a little confusing. Don't worry if you're not fully getting the whole nested indexing thing, but it is a solution that is helpful later on and you'll get enough practice where this will start to make sense, especially when we start using loops.
Lewis Benson: Do I have any questions from anybody at all about anything we found so far anything about a raise strings anything at all methods? Function arguments anything you want to ask?
Lewis Benson: Is anyone having any issues with their code currently?
Lewis Benson: Have anyone who's following along or maybe from yesterday's assignment? Maybe we can help you solve some bugs if you're having issues. This would be a good time to ask. We got a few minutes before I want to take the break and I don't want to push too much further into the lecture without the break because we're going to start getting into some array methods next.
Umar Z: Your mind is showing up. I think an error when I try to go to inspect and console it says It throws some error highlighted in red. It says refuse to execute script from this address because Something is going on there. I know I'm doing something wrong with.
Lewis Benson: What does it say a file in line number on the right?
Umar Z: and let me just
Lewis Benson: I mean throw an error in monitor you so right here on my array.js file line 49. I have an error.
Umar Z: Also, basically, so I think it's not even finding the page. It says get HTTP 1 to 7001 5500. JS main door JS. I think I'm doing something else wrong, I think.
Lewis Benson: As it may be your HTML.
Umar Z: You should.
Lewis Benson: If I go to my index.html, do you maybe have a typo inside of your script element?
00:55:00
Umar Z: Let me see.
Umar Z: So on index stories here now. I added H1 with hello world and underneath right above the body I added that script source is equal to
Umar Z: yeah, I see that what's happening there? Yeah, okay. I think the wrong file I think so. It has to be erased and we projecting on my TV screen. So I have to school fires Arena here. Okay. Let's see what works now. he
Lewis Benson: And this is a common bug that was it.
Umar Z: yeah, Nice fine. Yeah, I can see the values it he talked ice cream. Yeah, you can see that of thank you so much.
Lewis Benson: Yeah, so I'm actually gonna throw that same error. I take the dot out of the Js. I'm just so…
Umar Z: Yeah.
Lewis Benson: if you ever see anything like this.
Umar Z: that was exact code which
Lewis Benson: Yeah, so you'll get this 127 index.html and we're seeing line 10 here. So if I go down to line 10, it's talking about my script element. And then I see here refused to execute script from HTML Line 1 and then it also has the file name and I can actually see right here where the typo is. It doesn't have the dot and then because mime type text is not executable. So if you ever see something about this mime thing it usually has something to do with the import I could also have to do with security, but that's not as common.
Lewis Benson: Usually if you follow these line numbers in your errors, it could lead you to it. Sometimes there are times where you'll see an error and it's on the wrong line number because it's expecting something else later. I might be able to replicate that. I hadn't planned on it. So it might not be able to think of a good way to do this, but perhaps if I remove
Lewis Benson: that and I come down here. And I just write Something like that. I got to relink my file in.
Lewis Benson: So we're seeing line 49. That is online 49. Sometimes though when you don't close a parenthesis or something it'll look at the next In this case. It'd be on 52 and it will say my errors online 52 maybe if I do it with an unclosed quote.
Lewis Benson: I think it's still going to say it's still online 49. I think I'd have to go outside of the scope of our assignment to get it to work. Right because I'd have to get into functions and declaring functions, but just know that sometimes your error message is on the next line, not your current line. So sometimes if you have an error online 50 look at line 49 as well because that could be where your air is actually coming from. And I'll show that again whenever we actually get into that topic where I can actually demonstrate that better. But there could be some times where that shows up. I just can't think of any off the top of my head right now where I've seen that happen to me without. having that type of logic on the page
Lewis Benson: Does anyone have any questions?
Lewis Benson: Does anyone feeling a little off about the whole array concept right now What a list would be used for anything like that.
Iris Coats: The list looks pretty straightforward but it seems like some of the strings are more complicated than they should be.
Lewis Benson: Is there any in particular you're looking at? That seems confusing?
Iris Coats: But not so much confusing as there's just so much of it on the dock ride on 40. one
Lewis Benson: because of the concatenation yeah.
Iris Coats: Yeah, that concatenation gets to me. There's to get along sometimes.
Lewis Benson: Yeah. As is this up here a little better to look at.
Iris Coats: A little bit now that I know what this symbols mean.
Lewis Benson: Yeah, so they're just gonna remember that the dollar sign and curly bracket go together. They're a pair. If you didn't have the dollar sign. And I just put curly brackets here. The curly brackets are part of the string then and if I look at my Thing over here. It'll actually print out curly brackets.
Iris Coats: 
Lewis Benson: So the dollar sign kind of represents an escape character. It's saying after this dollar sign if you see a curly bracket, then that's going to be an escape. So if I put a dollar sign by itself We get a dollar sign, but if I put a dollar sign in a curly bracket. We get an error because I don't put anything in it, but if I put an empty string in it. Then you don't see any results right now, but you don't see the curly brackets where the dollar sign. I could put empty spaces in here. And we would see that maybe not it must get rid of those.
01:00:00
Lewis Benson: Interesting, that's line 37.
Lewis Benson: That should be right here. I wonder if that's because I'm using a regular string HTML doesn't like to get rid of spaces. And that's where you would use something like this.
Lewis Benson: And I'm actually not saying that result either.
Lewis Benson: 
Umar Z: is it something to do with it that your second dollar sign doesn't have a space with comma or does
Lewis Benson: what that would do is let me just put some plain text in here. What that'll do is push this word. Hello up against a comma so there is no space and there it is.
Lewis Benson: I think it's because I'm using the inside of the dollar sign curly brackets. So it's just automatically erasing the empty Extra Spaces. I feel like it shouldn't do that. But I'm guessing it has something to do with when the HTML reads. I've actually never seen that happen before. Let me inspect. So in our body notice, this isn't inside of a paragraph element. And if you remember when we write text inside of HTML if I just go in here and I start typing text like this and I put a whole bunch of space in here. The HTML is going to remove all of this extra space. It has something to do with that. Is what I'm guessing. I'm not a hundred percent. I've never ran into it like that before. But I've never tried to Output a whole bunch of extra space onto my document before either.
Lewis Benson: I'm confident that this will work inside of the console with the extra space and I like this. So if I just do a console.log instead?
Lewis Benson: And here it is with the extra space. But for some reason the HTML doesn't like that extra space and it just deletes it. Extra space if you really needed extra space like that in your HTML, you would have to use a span. And then you would have to move it around on the document using CSS. That's the only I know that you could actually lay that out like that. That's unfortunate that it just deletes it for you. Yeah, one more.
Umar Z: Quickly, if you can try just for the demonstration purposes, if you can drive with the plus sign concatenation, if it does the same thing with empty space or it adds empty space over there.
Lewis Benson: Yeah, let me go down here.
Lewis Benson: This is actually all on the same line. No, this is a log now, so this is by itself. So that should be yeah, and it's doing the same thing with concatenation.
Lewis Benson: And then if I put a period in here just to see it. It deletes all the extra space around it except for one space. So that's the browser doing that. You might have different results on a different browser, too.
Lewis Benson: A lot of times your code doesn't run the same across all of the browsers whenever you're dealing with little details like this. So maybe Firefox or a different browser would give you different results. I haven't tested this again before. So again, if every time I need to lay out empty space I use CSS to do that. So I would typically have my text by itself in a container and I put the container where I want it rather than trying to use empty spaces to move my text around so that wouldn't even be a good practice anyway. If you do need extra space for some reason. Maybe for a code challenge you would typically be doing all of that inside of your console. And these code challenges. I keep referring to are things that you'll sometimes see in technical interviews.
Lewis Benson: Where the interviewer will say I want you to write a function that returns a string that has 10 characters and then each time the function runs it'll reduce it by one character and then your result will look like a Christmas tree or something along them lines and then you'll just have to kind of think through the problem and show them how that works and try your best to get through it. A lot of times they'll give you challenges that are harder than what you would be able to solve unless you knew it ahead of time. And they don't expect you to get it but they want to see your thought process and how you would handle a situation like that. So, sometimes they'll set you up for failure and you'll get the job because you had a good thought process on how you tried to get the solution. But it's definitely a cool concept as the whole code challenge thing. But again, I want to get into our 10 minute break now so we can get into methods next and
01:05:00
Lewis Benson: After that, or we'll get into our assignment. So let me start the timer.
Lewis Benson: And I'll see you in 10 minutes.
01:15:00
Lewis Benson: All right, welcome back everybody.
Lewis Benson: And again, if you're able please use your webcams. If you have the bandwidth for that.
Lewis Benson: So let's talk about how we can add things to our array. Does anyone want to take a guess on how we could do that how we could add an item to this list? I'm going to remove some of this extra code here. Does anyone need this before I do? If anyone's following along with this at all.
Lewis Benson: I'm just gonna remove this so that it's not so messy in here. And we'll remove our random stuff. Again, remember you can put variables in your array. Just want to make sure that that's clear. And you can also do something work this where you index. zero and that will add Pizza to our but to add items to the array. yeah, Umar.
Umar Z: In a quickly. If you can please give the definition itself of the array again.
Lewis Benson: An array is a list of data. And it can be of any data type.
Umar Z: Okay. Got it.
Lewis Benson: Yeah, and let me bring up the MDM documentation on this as well. Just I want to see how they phrase it.
Lewis Benson: They might have a little bit more to say about it.
Lewis Benson: So the array object as with arrays and other programming languages and it will storing a collection of multiple items under a single variable name and has members for performing common array operations. This is referring to the array methods that I'll be showing in a bit. And if you remember from strings we could see the length of a string using the dot length property arrays also have that ability. We can see that here.
Lewis Benson: and that's just how it works. If you have four items in your array, and you do the array name dot length. The expected output is 4 and we see that there notice. It doesn't have parentheses here. that's because this isn't a method or a function. It's a property. And this property is generated an updated every time the array changes. We'll get more into properties when we start talking about objects. And what an object is and what properties are but I just wanted to point out that this is one of the few times where if you're accessing information or trying to do something or manipulate something that it doesn't have the parentheses here like that. And if I try to run this it'll actually fail. Closing that length is not a function.
Lewis Benson: And then if I run it with that this we see it is. the length of 4 so just another little side note there about arrays.
Lewis Benson: All right. Let's get back into this. We want to add items to an array so Let me move this back over. We know there are Sorry four items in this array with it goes up to index three. So using that information. Does anyone know how I could add another item to this array?
Umar Z: I mean use it by using indexing.
Lewis Benson: Yeah, we could try using indexing. So what I want to do is say favorite. things at four because this only goes up to three. is equal to and we'll add a string in here. And I'm just put in pancakes.
Lewis Benson: That could be my favorite breakfast food. For keeping the favorites thing going on. And let's see what we get. I'm not logging Favorite Things yet. So let's do that.
01:20:00
Lewis Benson: And here We now added pancakes to the array. What do you think happens though? If I were to change this to say pen? because we only have these four items in our array right now our length is for what happens if I set this to an index of 10? Let's take a look at the console.log. and we can see we have index 0 1 2 3 and 10 and up here. We actually see empty six. This could be problematic. Because these are all undefined so index four is undefined index five is undefined. And sometimes when you run into an undefined in your code, it can actually throw an error for example, if I wanted to access the length property on 1984. Let's do that real quick. So, how do I access 1984 again?
Lewis Benson: I just gave away the part of the answer there.
Lewis Benson: I'll give it away. I'm gonna use indexing and I'm gonna put an index number three. And this will give me the In my console now, I'm going to put dot length on this.
Lewis Benson: And we see number four is being returned because that's the property of 1984. Let's see what happens if I put seven here. Now we're getting uncaught type error cannot read properties of undefined. You'll learn to hate this error this event. This is going to show up so often because you're expecting data you're trying to access a property on it, and it's not there. It's an undefined. and you're See this typer all the time. It's one of the most annoying errors to run into. Because you'll be a hundred percent sure that everything is correct. And you get that the under can't read properties of undefined error, but what this means is the dot length property.
Lewis Benson: Is we're trying to read 1984 remember, but I typed in the wrong index here. So now we're trying to read the index of an undefined and this is what could happen. Whenever you start using indexing to add items to your array. This is not considered best practice. There could be use cases for it perhaps in code challenges if you're trying to do something fancy. You could inject things into your array like this without using building methods. Sometimes that's a stipulation modify this thing of code, whatever but don't use any sort of array method or string Methods. Then you have to do something with indexing instead. And in this case, I want to show you a better way to add items to an array. So the way we do it is with a method called push. And whenever we want to put an item in we're pushing it into the array.
Lewis Benson: So it'll be favorite things. dot push and then I'm going to add pancakes to the array again. Let me actually add favorite snack popcorn Okay, so we have our favorite things We're pushing in popcorn. And that pushes that right to the back of the array. And it's always going to go to the last item in the array whenever you use the push method. There is a alternative to this and it's called unshift. And I hate this name. It should not be called on shift because it makes no sense. But whenever we look it adds it to the front of the array. there's also shift which removes the first item, so if I have shift
Lewis Benson: doesn't take any arguments. It's just like this shift. It'll remove pizza from the array. So now we just have those three items. I'll come back and show you more on removing items. I just wanted to show you how confusing this is. And if it wasn't for my notes, I would have had it backwards 100% of the time. I can never remember the difference between shift and unshift. And it's because I feel like the names backwards I've ever had an item. It should shift it over but that's a tangent that I'm not going to go down right now. Let's put our popcorn back in. And this is going to be at the front of the array.
Lewis Benson: So we have popcorn Pizza Blue Jazz 1984. So this is the best practice for adding items to array is using push and unshift and most commonly, you'll see push on shift is pretty rare. We typically add to the back of the list rather than the front of the list if you were creating a cue then you could use your shift method to push things into the back of the array and pull things out of the front of the array an example of that could be a help ticket application. So if we say let ticket numbers equal
01:25:00
Lewis Benson: and sometimes ticket numbers don't have numerical values. They might just be like things like this So the ticket number is represented with a unique identifier rather than just a number. So if you have something along these lines. You can't just grab the item based on its value. Then it would be where when you add a new item to your tickets. You're going to want to push it into the back of the tickets. And then you're going to want to shift it out the front of the tickets. So that's what I mean by a queue this represents first in first out so the first item getting pushed into this array will be the first item take it out of the array whenever you bring it out using shift.
Lewis Benson: That's a little bit more of a advanced data structure concept. We'll get into that again later. I just wanted to kind of introduce the idea just so you had a use case on where you might use unshift push in. The last one is pop. So if I wanted to remove the last item of my array in this case, it's 1984. I will pop the item out of the array. So we'll say if favorite things. Dot pop and pop is a method that does not require any arguments. So I'm not putting any sort of text inside of These parentheses whenever you put these here this is referred to as an invocation. We are invoking the pop method. Which is removing 1984 from the array, it'll always remove the last item.
Lewis Benson: so here we have popcorn being pushed or unshifted in we have pizza blue Jazz and we can see that 1984 is not there. It's been popped off the array. So those are our main ways of manipulating the data. And I'm just going to put the other two in comments here. Unsure sorry shift.
Lewis Benson: I actually use push once because this pushes the most common. So we'll add one more item to our array with favorite things dot push and one more favorite thing we're gonna add is the number 42 just so we have a different data type being added in there. We'll put a number in there as well. So here's our array again. And I popped the thing. I just pushed let me move that up on. And it's still gonna pop it right off. Let me move this up a line that makes more sense. Here we go. That way we pop off 1984 and then we push in 42. So remember this stuff's read from top to bottom. So at first it's going to declare the array with this data and it comment this one out, so we're not confused by that. So that'll declare everything in here in this order.
Lewis Benson: And then it's going to pop the last item off. So 1984 will be gone and then it's going to push 42 to the back of the array. So this item is now going to be 42 and then it will unshift popcorn. So the first item will be popcorn and when we look in the List here we have popcorn is item zero Pizza Blue Jazz, and we can see that it removed the 1984 and added the number 42. Does anyone have any questions about those methods?
Lewis Benson: So there's one more thing. I want to show you about array modifications. So here we're modifying the values within this array. We assigned this array to be Pizza Blue Jazz 1984 something that you'll see a lot is when people declare array literals, they use const for the array literal. And that's so that they don't accidentally overwrite the location and memory where this array lives. Whenever you declare an array literal, even if it's completely empty. It's using a place in your computer's memory to build this array. And the memory location is what's actually being stored inside of this variable. So whenever you're calling this variable, it's not calling this value here. It's calling its location and memory it's called a reference pointer.
01:30:00
Lewis Benson: And it's just going to go find whatever is in the array so you can use const and then you can use pop push and unshift and all of that you're modifying this value, but you're never modifying where this array lives in your computer's memory. So that's why you can use constant on an array, but what you can't do is Favorite Things equals a new array like this because now we're trying to change the location of memory to this empty array here. Even if I were to duplicate all of this data like this. And try to put it here. It doesn't care what it cares is where this lives because I'm declaring this one online 20. It's going to decide where in my computer's Ram. This is going to live and when I declare it again online 25, it doesn't know that the values are the same. It just knows that this is an array data structure and it's going to be going somewhere else. So this is
Lewis Benson: Salad, and it will throw an error. Let me show you that. And here it says assignment to constant variable, but if I comment this line out our portion unshift are perfectly fine, and those are still working as expected because the location of the array never changed. the values can change but its location can hopefully that makes sense. That's a little bit more of a deep dive than I normally give on the array. But I just wanted to make that clear because this is a very common practice where you use const to declare an array and that kind of goes back to what I said at the beginning whenever you're creating a constant variable. You typically use capital letters to declare a constant.
Lewis Benson: But developers will use camel casing to declare their arrays and they'll use the constant declaration so that they're not accidentally overriding the location and memory and this keeps the programs more efficient. It keeps them from taking it more space and memory than what they would need and it supposedly makes it run faster. That's a debatable Topic in the industry using costs versus let all the time. It's just one of those things where there's no way to really prove it. People were trying so maybe one day we'll know for sure which one's more efficient that we're talking about a hundredth of a millisecond. So I don't really think it matters at that point.
Lewis Benson: But again, I wanted to come back to this point where when you're declaring a const and this use case here use all capital letters to declare your const but if this is a data structure like an array or an object or anything like that and you're using a const then you can use your normal camel casing. But if it is primitive Where this is a string declaration then use all caps. Does anyone have any questions about that concept or anything? I just explained right there.
Lewis Benson: It's not a big deal. If you don't use all caps again. and it's also not a big deal. If you don't use l casing. However, the industry standard is to use For your variables and your array declarations use camel casing for those. And I'm sure real quick. If you ever work with python or anything like that, they use what's called snake casing for their variable declarations. And I think it's because the language is called Python and that's a snake. I'm not a hundred percent. It's my guess. So for they would say favorite undersc things like this and they would put their list like that. They don't use the const keyword in Python. But this is the difference between camel casing and snake casing. It's just an underscore.
Lewis Benson: And then with your constants you use what's called screaming snake casing. so you could say const days of
Lewis Benson: week equals month
Lewis Benson: something like this.
Lewis Benson: So this would be your Constant declaration where this string will never change these values will always be the same. They're not going anywhere the days of the week are set in stone, basically. So when you do your constants you declare those in all caps to say this is a constant. But when you do your data structures use camel casing and then we don't really use snake casing for much if you've wanna use it you can but I'd prefer during this class you use camel casings just so you're using the industry standard for this. I do know some developers it'll switch over to snake casing because they do a lot of python scripting and they get used to this type of syntax. So is there any questions about that?
01:35:00
Lewis Benson: All right. Let's go over the array thing again. I'm going to have all that up there. How do I declare a new array and I just want an empty array literal. What would I do? Somebody walked me through it.
Lewis Benson: Daniel you've been pretty quiet today. Do you want to take a shot at it?
Lewis Benson: All right, that's perfectly fine. You can always review the video too if you need to. I'm not sure what your name is there. Your username is Macha Moki
Lewis Benson: you want to take a guess at how we do this?
Lewis Benson: All right, we can always come back if you're having mic issues or just don't want to. try it.
Lewis Benson: I'm going to declare this array literal. And I'm going to use the const keyword. That's my preferred way for using arrays. So I want to say const. And then I need to have the name of the array. This is sometimes referred to as the pointer. So I'm going to call this my list.
Lewis Benson: And I need an assignment operator. And I just need some square brackets to represent the array literal. And then I'll close that off with a semicolon. So we have our keyword const declare this as a constant variable. Because we're using the array data structure. I'm using camel casing and calling my list assignment operator. And then we're going to put in the square brackets to represent the array. So, how do I add an item to the array I want to add? A Boolean value to this array, what would I do?
Lewis Benson: Anybody want to take a guess at how do I add a Boolean to this my list variable?
Lewis Benson: you talkin Krystal a your
Umar Z: starts with is something
Lewis Benson: it starts with what? I'm sorry.
Umar Z: is
Lewis Benson: would be that's actually a good point. I'm going to show that real quick again. Just a quick review on that the naming convention for Boolean if I had this as a variable I could say let Is online could be a variable named for ebullient and I would assign that So this is where you would use is and it's just a naming convention. I could also just say online true and it does the same thing. It'll work the same way but for readability. We is word in front of the variable name just so that it's clear that this is going to be a bullion. It's not a hundred percent required to do this again. It's just we call it a style convention. That you'll see in the industry anytime. You have a Boolean. They just typically put in is in front of it to represent that it's a Boolean.
Lewis Benson: But again, you don't have to I've also just seen things like logged and like this and you'll know it's a bully into because it kind of makes sense. But for this case I would say is logged to add a Boolean to our array it's going to be the same as when we added strings to the array. We're going to use an array method. So the first thing we'll do is we'll say my list. And then we'll say dot push. And then we'll pass in the Boolean I could also pass and false if I wanted to have false and then let's console.log this and make sure it's working correctly. My list sure, we don't have any unexpected results and here is our array with one item in it and it Index 0 is true. So let's add false as well. How can I add false to the list?
Umar Z: It's a way my let's start push. bracket false
01:40:00
Lewis Benson: Okay, what if I want to add it to the beginning of the list instead to the end of the list, but I still want to put it online 35.
Umar Z: so that would be what was that on something?
Lewis Benson: unshift Yeah.
Umar Z: And after that.
Lewis Benson: So that'll put it first because it's adding it to the beginning of the list. Take a look at that.
Lewis Benson: And where's my console. Just to delete it.
Lewis Benson: And there we have false first because we used unshift and we have true second because we use push. If I were to make this a push instead of an unshift then false will be second because this is now adding to the back of the list instead to the front of the list. So now we have true to the left and we have false to the right. Is that clear for everybody on how that works? There's two methods. Okay, so
Lewis Benson: How do we remove false from the list using? an array method
Lewis Benson: Yes, Omar.
Lewis Benson: That would do it my list dot pop and what do I pass into this? as an argument nothing exactly and it's gone. Let me show you what happens. If I were to an array method that is not
Lewis Benson: and vote just so you can see that so here's my list dot pop. And that's something also I wanted to show you as well. I forgot to mention this part whenever these are popped off. It actually Returns the value that's popped off and I'll show you what I mean here in a second. So we have my list dot pop. I'm not invoking it. And we see this If you ever see this in your console whenever you're trying to log something or somewhere on your page. It has this weird looking f it says pop this little F here is referring to a function. so what this is saying is this is a pop function and this is native code refers to code that's built into JavaScript. It's not a function that we created. If this was a function we created we could see all of our code that we created. So what this is actually referring to. Is the reference to this function?
Lewis Benson: It's kind of like referencing its place in memory, but it's actually referencing the code itself. It's kind of a deep calm concept to get into but whenever you see this, this is the pop function, but it's not the value of the pop function being invoked. It's just the function itself. So hopefully that kind of makes sense. It might not because we didn't cover functions yet if I declared a function right now. It would have where I could have reference to that function. But until I invoke the function with the parentheses. Then it's just another. String of code. It's not being used for anything. Again, the main takeaway is here. If you see this little F. You probably forgot your parentheses. If you for remember anything remember, the f means you forgot your parentheses? So let me go ahead and put the parentheses in.
Lewis Benson: And I'm going to remove this pop so we only have one going on. And let's take a look and see what actually comes in here now. We see false being returned right now. And that's because we popped false out of the list and whatever we pop out we can use it. And what I mean is I can actually make this going to a variable.
Lewis Benson: so I could say I want to take the item out of the list. I'm actually going to change my list up a little bit. We're going to put in here. red
Lewis Benson: blue and green
Lewis Benson: Now I'm going to say next color let next
Lewis Benson: color I can't type right now equal. my list dot pop
Lewis Benson: and then we're going to log next. color
01:45:00
Lewis Benson: and we get green. if I run this again
Lewis Benson: keyword. I'm going to reassign it I could continue to use if I did this it would run it twice. sorry. Yeah, it actually won't let it because we're in the same scope. So you're gonna make sure you don' let twice if you're using the thing variable, but here we're popping twice. So this is going to be reassigned to blue because we're taking the second item now. And then if I run this one more time.
Lewis Benson: We get red. So this could be useful if you had some sort of button that every time you click the button. It runs the dot pop and grabs the next color and then maybe Using that to change the theme of your page. Perhaps it's going from a red theme to blue theme to a green theme. And once you get to the end of the list, you can repopulate your list at the end. I'm using some sort of loop. And I know that's probably a little outside to scope and it might not a hundred percent make sense. Something we could do though just to show you what this could look like. Is I could say document.
Lewis Benson: Let me do this on a different line. So it's not as confusing. And again, this is actually something we're going to cover a couple weeks how to do this properly. I'm just going to do it real quick as a demo and how this could be useful so we'll say const. body equals document Dot query To you why I always spell this one wrong query selector. And then we're going to pass and body as I selector. And then here I could say. body dot Style dot background color equals
Lewis Benson: next color something like that.
Lewis Benson: And then it changes it to red. And if you want to play around with this what this actually does. Is it looks into your HTML so that here were assigning a variable and again, I' I'm doing a code review here. We're assigning a variable called this body variable name can be whatever we want to be because it's a very variable name so I could call this banana if I wanted to but I just got to make sure that there as well. The variable name is not important. We use meaningful variable names just to describe what this is. But again, this is just a container of data. So I'm calling it body. Because that's what I'm currently selecting. The document is referring to basically and this is a very high level. It's not a hundred percent accurate what I'm saying, but it's referring to everything in here. and a nutshell it's more than that, but for now just think it's everything in here.
Lewis Benson: And then this query selector method. Is the same as a CSS selector, so whatever you type in a string in here is what you would type in CSS. So if this was a class name, I'd put a dot there. If this was an ID, I'd put a hashtag there and this is how you can do a CSS selector with JavaScript. It's called the query selector and then because I'm not putting any sort of dot or hashtag. This will select the body element on my page. because I now selected the body element and I stored it into this variable. I can access the style attribute on the body by saying body dot Style. And then I can access the background color on the style attribute and add the next color. So that's kind of a high-level rundown. you're not expected to know how to do that this week. But I just wanted to kind of give you this if you want to play around with the query selector and playing with your different styles.
Lewis Benson: You can do that now. If you want to take a screenshot of this little snippet. Or just get on mdn and look up query selector or Google search. How do I change my background color using JavaScript and you'll find all kinds of different solutions. This isn't the only way to do it. This is just one way to do it. This is an even my preferred way to do it. This is just the easiest way. I know how to do it in two lines of code. In fact, you could do this in one line of code if you wanted to but I'm not going to make that real messy like that. But again, we can change the pop value here and I just wanted to show you how this could be a useful tool. and now we get blue and we actually see that flicker because let me keep refreshing as if I can get that to show up again.
Lewis Benson: Because this is actually changing twice. So we've seen the original value and then as it happens so fast, it's probably 0.3 milliseconds that it takes to run this file. But if I can get it to lag for a second you'll be able to see that other color pop-up. Let's save now. I can't get it to come up again.
01:50:00
Lewis Benson: But it is popping up and if I delete this one we can actually see it there. So there's the green. And then we include that back in there's the blue. We put the next pop in. You just copy that. And there's the red. And if I refresh it fast enough or enough times, you might see one of the other colors flash through if it takes it an extra second to run one of these pops. And all it's doing is it's removing the string from this list. And it's placing it into this And then the next color variable is being assigned to the background color of the body.
Lewis Benson: And that's how that works because pop is being stored in the variable as it's being used. So it's not just to remove things from a list. It's also to grab the things that you're removing from the list and use them somehow you don't have to do that. You don't necessarily maybe your use case is to remove it from the list and forget about it because you're done with it. Or maybe your use case is to remove it from the list and use it for something. There's a lot of different times where you're going to have to do either one or both. Does anyone have any questions about that?
Lewis Benson: And again the query selector and body style background color. This is bonus stretch goal. I'm not expecting anyone to be doing this today. I just wanted again give you some sort of real world use case where you can use JavaScript to kind of style your page a little bit. And something to play around with while you're working.
Lewis Benson: All So that's all of the ray method. I do want to mention the string array method called slice is used in arrays as well. So you can slice your array from 0 to 3 in this case and it will get you the first two items. It'll work the exact same way that it works in the strings. You can check the documentation on that if you want we'll get more into array Methods at a later date. But for now those are the only ones I want to cover but there is one more thing. I want to mention. And this is called 2D arrays. Or it's also referred to as a matrix. You'll see these a lot.
Lewis Benson: But they're not as complicated as they look so let me show you what one of these looks like. So I'm going to call const. I usually use the variable name Matrix when I'm declaring one of these. And it's ray. Also. Here's something I do when I'm declaring an array that has nested data or a list of data. The first thing I do when I make my array literal like this is I instantly press the enter key in the middle and then I can start typing out my item so I can say I don't one. item two comma and so on for this one though. This will make it easier to read as well. We're going to have another array in here and we're going to say one two three comma so this is one item. an array inside of our array and then we're going to say for five six. comma
Lewis Benson: and then we're going to say 7 8 9. This last column is optional. I usually include it in case I need to add more items. Does anyone have any questions about what I just built here at all? So it's an array of arrays. So let's real quick. I'm going to do a console.log. How can I grab the number five out of this? Looking at this using indexing
Lewis Benson: think of this as rows and columns
Lewis Benson: the Gregory that raise your hand.
Gregory Robertson Jr: Don't you index then too?
Lewis Benson: So index what again? index two so this is index 0 This is index 1. This is index 2. these are the rows.
Gregory Robertson Jr: 
Lewis Benson: So the first remember we always start counting from zero. So it's actually going to be what?
01:55:00
Gregory Robertson Jr: one
Lewis Benson: Yep, index one. Because Row one is zero row two is one and Row 3 is 2. And that is a little confusing whenever you're first learning this because counting from zero is not natural. So that'll grab the entire row here now, how can I grab the number out of this the number five?
Gregory Robertson Jr: and do the two
Lewis Benson: You say two?
Gregory Robertson Jr: yeah.
Lewis Benson: Remember we're counting from zero.
Umar Z: is
Lewis Benson: So this is a zero here. And this is a one. And this is a two.
Gregory Robertson Jr: 
Lewis Benson: It's a really confusing concept when you first learn it.
Lewis Benson: AR's in here
Lewis Benson: and then I'll try to do it above it as well. My formatters not gonna like it, but we'll try.
Lewis Benson: like that So looking at this Matrix what these right here? This should help if you ever need to figure it out. You read the right numbers first. So if we want Row one. And we want column 1. Then it's 1 1 if we want 6, that would be 1 2 if we want 9, it's 2 2. Does anybody have any questions about how I'm grabbing these values out of here?
Lewis Benson: Okay, and then one more thing just kind of a bonus here. if anybody can get this. How do I grab the letter e?
Umar Z: So you're add another index with the value 1?
Lewis Benson: exactly And let's take a look at that.
Lewis Benson: and there's the letter e good job.
Lewis Benson: Does everyone see how he got that?
Lewis Benson: So, it's Row one. column one And then it's the first index of the string, so it's 1 1. And then if we wanted to grab the last value.
Lewis Benson: What would that be?
Lewis Benson: and another way we could do that a little bit more complex, but sometimes easier to wrap our minds around. this is going to look really weird that I'm gonna just show this to you. I'm gonna do mat Rix. at one that's grabbing the string and then I'm going to do dot length minus one.
Lewis Benson: So this is all inside of that last index. And remember when we reduced this down, we're grabbing the string. Hello. We're grabbing the length. which is one more than our indexes and then we're subtracting one off of that length, and we get the same result so you can do something weird like this. I wouldn't recommend doing it inside of your index. I would do it in a variable and I would say let letter e equal that and then place like that. And that's a little bit better. It's still not perfect. But it does kind of get you there. But anyway have any questions about what I just did and I can still see it's the letter O there.
Lewis Benson: Yeah, and this is The Matrix. You will see these a lot but it will be a while before you see them. So you'll have plenty of time to practice and get used to indexing and accessing your arrays and data.
Lewis Benson: these are common but they're not that common.
Lewis Benson: Already so with that let me get the assignment up.
Lewis Benson: So we're on day two.
Lewis Benson: So today's assignment is to create three arrays. And they're any type of information you want you're going to have one array that'll be an array of strings. You're going to have That's an array of numbers. And you're going to have a third array which is an array of mixed data types. All of this I've gone over today. So this will be a bit of review. But if you can't remember exactly how to do the Syntax for the array literals or if you forget one of your methods. Feel free to ask your partners because I'm going to be putting you into breakout rooms.
02:00:00
Lewis Benson: And if you can't get it, if you're both stuck message me on slack. If I'm not already in your room, or I'll come around about every 15 minutes just to see if anyone has any questions. But if you are stuck and you need help immediately, don't wait for me to Send me a message on slack and just let me know. You're stuck. That way I can jump into your room. I'm one of the try to let you kind of work on your own but with each other if that makes sense. I want you to collaborate as much as you can. If you're not comfortable using your microphone your cameras, that's okay, but I do encourage you to try to work with each other because that is an important skill to work with other developers in the industry. You will work with other Junior developers whenever you start working in the industry and you'll have to help each other through problems like this. So don't feel like you're holding each other back by asking each other questions because you might learn off of each other as well.
Lewis Benson: The next thing is ensure you utilize pop shift and unshift methods. So remember push goes to the back of the array pop to from the back of the array shift removes and unshift ads? So these are backwards to each other here if that makes sense. We have our push first and we have our remove first there.
Lewis Benson: That made sense in my head. I don't know if I had since anybody log my array this is just an example of how you can see your data. And that's it for the assignment today. It's not a lot of code to write. It looks like it's going to be about 10 lines of code total. Don't forget your use strict at the top and make sure you link in your arrays.js file into your HTML that way everything's working properly. Does anyone have any questions about the assignment?
Lewis Benson: Okay, so I'm going to start the breakout rooms. Feel free to take the 10 minute break on your own before you get started. And I'm also going to set the breakout rooms to end. it'll be roughly one hour from now. So if anybody has any questions at the end, feel free to stay in but once the class time is passed you can head on out of the class. So let me get these started.
Lewis Benson: Looks like we're going to have one group of three. And one group of two. And I just do these at random it shuffles the names, so I'd never know who's going to be in what room until I press the button. Already and I'm gonna send it now. So again take your 10 minute break when you get into the breakout room and then you can begin on the assignment.
Meeting ended after 02:03:54 👋