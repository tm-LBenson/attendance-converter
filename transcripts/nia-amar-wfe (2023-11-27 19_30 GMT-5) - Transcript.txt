nia-amar-wfe (2023-11-27 19:30 GMT-5) - Transcript
Attendees
Brian Kimbrow, Chantrice L, Daniel Perez, Elgin Sharper, Gregory Robertson Jr, Iris Coats, Krystal Jefferson, Lewis Benson, Lewis Benson's Presentation, Ryan Arnold, Umar Z
Transcript
This editable transcript was computer generated and might contain errors. People can also change the text after it was created.
Lewis Benson: And welcome to week 6 day 1 we're going to get into advanced JavaScript. And there's many different layers to JavaScript. This one that we're going to be focusing on what's known as the document object model and this allows us to interact with web pages. According to MDM the Dom is defined as an API. And an API is basically just a computer that talks to another computer. It's something that happens behind the scenes. It's not really something we need to worry about as far as setting it up or configuring it the browser does all of that for us. So what it actually does is it breaks all the things on the web page into what are called nodes or elements is what I like to call them and if I go into my developer tools
Lewis Benson: That's what all of these elements here are representing. These are parts of your document object model each. One of these elements is a node.
Lewis Benson: And because this is communicating with our scripts and our browser. We're actually able to access anything that's on the web page that's listed inside of this Dom using JavaScript. We can access it. We can change it we can get data out of it. If somebody's putting information in we can get whatever information they're typing in such a sign up form logging in whenever they type in their username and password that's going to be plugged into the Dom it gets submitted and we can access it through here and put that information wherever it needs to go or we can do the opposite where we take information from our database anywhere. We're getting data from that could also just be another API
Lewis Benson: we'll get more into apis later and how they work and how to use them, but we could send data to the user and that could be something like their name. So if they logged into our application and we have their name on file, we could say welcome back and have their name be displayed for them and have a more Dynamic and more personalized experience just using the Dom and again this over here and this elements panel. This is often referred to as the Dom but it doesn't really stop there. This is just kind of scratching the surface of it because the Dom also has a lot of built-in methods and information that we can't Here such as what kind of browser are they in Are they in Mozilla? And that information is stored here as well.
Lewis Benson: And any information stored here can be sent back to the server. So if you have a web application that doesn't work. certain features on Firefox. Then you may want to disable those features. If our users using Firefox and that's where Dom manipulation can come in to help you with this solutions. Another example might be if they're on a very small screen size such as a mobile device and you can track and see these are this users connecting through an Android device. Then you may not want to lay out your page in such a way that it's hard to see. You may want to give them this little hamburger menu instead of. Having all this information inside of the bar here.
Lewis Benson: And also little things like this where I'm highlighting over these and it's creating these areas. This is all done through Dom manipulation. These elements only are visible whenever JavaScript the text. My mouse is here. So let's make this visible. So the user can see what goes inside of here. And again, this is all done through JavaScript with dom manipulation. javascript's the primary language, you'll see used for this type of work. There are other ways to handle this type of thing. It's not as common you might see some people using python that's typically done with Frameworks or some sort of scripting element and it's similar process, but it's a little bit more complicated. We're going to be focusing just on how to do dominipulation with JavaScript.
Lewis Benson: So with that I'm actually going to create a simple demo here on how we can do some sample Dom manipulation on our own. other than what we've done up to this point where we've changed background colors through the elements here. We're actually just going to use JavaScript from this point to do all of that. So, let me open up my vs code.
Lewis Benson: Create a new one here. new instance up I've already created the folder for today so I can just go straight to open folder.
00:05:00
Lewis Benson: If I can find it.
Lewis Benson: interesting I'll just create another new folder then. We'll just open up the projects folder here.
Lewis Benson: I'll create a new folder demo 11 Dash I see. No, that's 10 27.
Lewis Benson: Must have missed labeled it. Okay, so I have this created so now I'm going to open that folder in vs code. So they don't have every single thing opened up at once.
Lewis Benson: There we go. We only want to have the one we're working on open. If you are going to be following along and you think you might start working on today's assignment, I would recommend creating a repository based of that and then cloning that down instead of creating a new project holder for the day. If you don't do it that way, that's okay. You can create your repot later and link them up. And if you need help getting them link, just let us know and we'll help you with that. So create an index.html. I need an entry point. I need boilerplate code in here and we're to have something to display in my browser. And I need a script.js. And I'll just put a u strict at the top for now.
Lewis Benson: And we'll link that into the body.
Lewis Benson: And I'm also going to throw just to make sure this is working a console. With the string hello world. And I just want to make sure that's appearing inside of my console. I'm doing this right away. We'll just tell me that my JavaScript in my HTML or linked properly and there's no typos in my script and everything's working just so I have some sort of content. I'm going to put in a demo heading. And I like to have some sort of title. That way I can see which tab that. I'm currently working in. js2 day one I'll just put a little pipe operator there. And I'll go live.
Lewis Benson: Okay, so I'm expecting to see Hello World in my console. So let me control shift. And there it is. I'll do a refresh to get rid of that five-acon air.
Lewis Benson: And everything seems to be wired up correctly.
Lewis Benson: So what I want to do is actually create a place inside of my HTML. I like to have a container where I'm going to be putting in my dynamically created content. Now, normally you wouldn't just create one bulk container for all of your elements for example on mdn. And this little piece here is in its own container. And then this one here has its own container. Each of these are in their own container. And then also when I go on a smaller screen size this entire piece here is within its own container. So there's gonna be multiple containers, but for today's demo, I'm just going to create one and it's just gonna be in the body of my document just for the Simplicity of it. So I'm going to go into my vs code. And inside of my index.html. I want to create a div.
Lewis Benson: And it doesn't have to be a div again. These containers can be any semantic element. What is important is whatever sort of selector attribute you're using in this case. We're going to be using the ID. So that's the important piece. So I'm going to use a div.
Lewis Benson: And it's going to have an ID of container. And this isn't related to If you recall in bootstrap, we were using classes called container. This isn't going to apply any sort of styling or anything. We don't have any CSS brought in we don't have bootstrap brought in. All this ID is doing is giving my JavaScript a place to latch onto. And say I want to access this element here and want to modify. I want to add things to it remove things from it change the size change the background whatever I want to do to it in JavaScript. I just need a place to latch on to and the ID makes a really easy way to do that. So I'm not actually going to put any content within that container not through HTML. Anyways, I'm going to do all of that through JavaScript.
00:10:00
Lewis Benson: So inside of my JavaScript, I'm going to remove the console.log. I no longer need that because we know it's working. I'm going to declare a variable. I'm just going to use the const because I know I'm not going to be reassigning this you can use if you prefer let that's okay. I'm going to call this container. the name doesn't matter. But I like to call the element the same is either the ID or the element type. So another valid name could be div because I am selecting a div, but I'm gonna be a little bit more specific and say which do by calling this container. And to access an element that's in our document we use document. Which is an object that contains a whole bunch of methods. So we Get element by ID and notice we have some other options here.
Lewis Benson: The main one will use is get ement by let's get by class name. It has a little bit different behavior. I'm actually not a fan of get by class name. I prefer to use a query selector in that case and that's something we'll get into a little bit later, but get element by ideas a very simple and easy to use method. All you have to do is pass it a string. Again. This is a method so we have to invoke it with the parentheses. And it takes any string as a parameter and the string is the class name that we defined inside of our HTML. So now I'm just going to log this container. Just to see what this looks like so we know what an element looks like whenever it's selected by JavaScript.
Lewis Benson: So what we actually are seeing here is the CSS selector inside of my console.log. We see v. with an ID of container and if I click on this Arrow It has all of the stuff associated with it what these actually Are HTML attributes that are currently assigned to this element? And there's a lot of stuff in here. We can see we have an inner text an inner HTML. These at least can be really useful. there is some of these here are actually functions. We won't be using these these are all set to know right now. So these actually wouldn't do anything.
Lewis Benson: Here's our outer HTML and this is basically showing what is going to be rendered on the Dom? and again, there are so many different things in here. It's not something you need to understand everything in here. I just wanted to show you what this looks like whenever you're actually logging one. and you might get a slightly different response as well because occasionally you'll actually see the element and I'll show you what that looks like whenever we get into more specific things like input elements.
Lewis Benson: But actually just noticed we actually have the base URL there too. This is something that's really useful later on whenever you want to redirect somebody back to the homepage and we can see what element was on that page at the time just a little side note there. But yeah, there's our URL. So again, that's just what the element looks like when it's console.logged. It doesn't really have a good way to represent that element. So what we want to do now. Is we got our container created? So m going instead of selecting an element. I'm going to create an element now. And it's a very similar process. What I'm going to create is a div. And I'll just call this new div.
Lewis Benson: the name isn't that important? You just want to have your variable names be something that helps you identify it later in your code, especially if you build an entire web application just using JavaScript you will have thousands of elements in here and it gets very confusing very quick. And it's not a very common practice to build out entire web applications. Just using JavaScript. You would do a lot of the senior HTML. But what is a common practice is building out elements like drawers navigation elements and that sort of stuff. And then later on when we get into Frameworks, you will build out entire applications using JavaScript, but the way you do it is a lot more simplified. We'll actually be able to write HTML within our JavaScript in a way that is a lot more manageable than doing it this way. Again, that's down the road. I just wanted you to know that this will get easier.
Lewis Benson: So just kind of think of this as a few steps. The first one is create your container. The next one is create the content for your container. So this is going to create element. Again, this is very similar to get element by ID. But instead of getting an element that already exists in our HTML. We are creating a new element that is not in our HTML and then you just pass it a string and the string is the name of the element you wish to create in our case. We want to create a div. So we're going to create that div there. We're not going to do anything with this just yet before we do. I want to create another element. And this one's going to be a paragraph element. So we'll do a new. paragraph
00:15:00
Lewis Benson: equals again document dot create element
Lewis Benson: and we'll just pass it the letter P because we're creating a paragraph element. Doesn't even have any questions up to this point.
Lewis Benson: Okay, so just to kind of high level overview so far we've selected a container that's currently on our HTML. We can see that container lives right here. We haven't done anything to the container yet. We just looked at it in the console. And then in our script we created two new elements. They're not in our Dom currently. They're in our JavaScript still. We haven't put these into the document. We just said create these and just kind of hang on to them. We're not going to use them yet. We're just gonna create them. So we can attributes to them. We can modify their current attributes. And if you remember inside of the container that we logged there was a lot of attributes that we can access and modify. one of the ones I like to use Is the text content attribute so I can say paragraph Dot Text content. equals
Lewis Benson: This is a new paragraph.
Lewis Benson: element
Lewis Benson: this is going to add the text to the paragraph element. This would be the same as if I were to go into my HTML create a paragraph element and write this text in between the two P tags the closing and opening and closing tags. Again, I haven't added this to my HTML yet. I'm doing this all within The JavaScript files creating. This is putting the text in but it hasn't gave it to the document yet. So to do that we need to actually append it to an element. So we have that div. I'd like to put the paragraph inside of the do so to do that. I can say new div. Not append child. because this div is going to be the parent of the paragraph we're using this append child.
Lewis Benson: Method and the parameter that it takes in or the argument that it takes in is an actual element that we created or selected in this case. We want to pass in the new paragraph element. So we'll just pass it in that. So the paragraph element that we created here is now living inside of this div. I can't show it exactly. Yeah, I can log new div. But again, I haven't put it on the actual pages, but let's see what that looks like with that inside there.
Lewis Benson: So we'll log new div. And now we have a div and when we open it up we can see. All of them pieces again, but right here if we look inner HTML there's that paragraph element that we appended to it. And it has the text inside of it. So we can see that that did work. But again, we have nothing on the page yet. So what we need to do now is append it to The Container the container does live on the document. There's just no content in it. So there's nothing being displayed. But if we look it lives right there pointing at it it has zero size right now because there's no content. But as soon as we add that div to the tainer. That text inside of the paragraph element does take up space and we should see them results.
Lewis Benson: So that's what I'll do now. I'll select my container. Does anyone know which method I'm going to use to append the new div?
Lewis Benson: It's the one I used online 10. So we'll use append child.
Lewis Benson: And a pen child takes in an element. And that element is going to be new div. So we sold our container we want to add a child to the container and that child is going to be a div up above here. We said we want to add a child to our new div and that's going to be the paragraph. So when I look at the browser now, I would expect to see that paragraph element rendered. And there it is. Again, that's not in my HTML, but it's being displayed dynamically on the Dom. If I open up this we can see it right here. It exists. We have this div that we created inside our JavaScript. We have the paragraph that we created inside our JavaScript and then we appended the paragraph to the div and then we appended the div to the container. Does anyone have any questions about how we got to this point?
00:20:00
Lewis Benson: So if you remember back to the JavaScript one, we were trying to use a method called document.write and it kept on putting everything on one line and it was really messy to work with what's really useful about this Dom manipulation is because we can create paragraph elements. We can actually lay these out on multiple lines now because these are block elements so I can create functions. That will output tax based on whatever I want on multiple lines. So we no longer have to use this console for all of our output. We can do everything through Dom manipulation and get everything to render on the browser. So it's a little bit easier to see your work now whenever you have this at your fingertips here. I do want to show just a couple more pieces to this any attribute that through You can access through JavaScript.
Lewis Benson: So one of the attributes that we use quite often is the style attribute. and if you remember the style attribute allows us to change any of the CSS styles on an element. So if I wanted to change the background color or so the text color of my paragraph. I could say
Lewis Benson: new paragraph dot Style dot color equals
Lewis Benson: blue and again, you can use your hex colors here. You don't have to use the word blue anything that you would type in HTML you can type in this string with JavaScript. So this is the This is the name of the property that we're modifying and then this is the name of the value of that property. So in this case, it's There are some slight differences we do get our blue there. They're very subtle. in HTML We have the property called font size so we can say paragraph dot style Dot Font size in JavaScript The Hyphen is a minus sign.
Lewis Benson: So you can't use a minus sign inside of your variable name, even though this would be your normal way to access this through HTML. So in JavaScript, this is one of those slight differences that you have to work on here or work with sorry instead of hyphenating things. You just use camel casing. It's the same property name, but you replace the minus with the Campbell case version and you'll have the same result and then within the quotes you can place any normal thing that you would inside of HTML. So I'll just say third old 30 pixels. And there paragraph element is much larger now. Does anyone have any questions about attributes using JavaScript?
Lewis Benson: And again, it's any attribute you can add nhtml you can access with JavaScript. So that gives you a lot of power over what you can do. You can add classes you can IDs you can literally add anything you want to your elements And then you can make it so it's more Dynamic that way. So if I wanted to change the color of something I'm going to create an H3 here.
Lewis Benson: And I want this H3 to be yellow. So I'm also going to create. a CSS file
Lewis Benson: and we'll just say dot turn
Lewis Benson: yellow This is a class and then we're going to say color is yellow. So I could add this class directly to my HTML. But there's times where you're going to want this to happen. Dynamically based on things that are happening on the page such as events if the user clicks on something. Maybe you want something to occur. You want to change the font size on something if they hover over it? Some of this can be achieved through CSS. And this is an oversimplified example, but I just want to show you some of the things you can do with this another good example of this would be If I had this as a dark mode class I could then change the background of my page to be a dark color and then I could change the color of all of my elements on the page all at once to be a light color.
00:25:00
Lewis Benson: And then if I want to turn this off, I just remove the class using JavaScript and it will invert everything with one click. All I want to do though is turn that yellow. So can somebody tell me how to select that element.
Lewis Benson: If I want to select this H3 right here.
Iris Coats: Would you turn it into a class?
Lewis Benson: I could use a class. I want to use what we already went over though. I want to use the ID attribute.
Lewis Benson: So I'm just going to create an ID on this.
Brian Kimbrow: Property. Yeah, I'm gonna say you're just gonna create an ID.
Lewis Benson: Exactly. I just need something to grab onto something that my JavaScript can latch on to so that we can actually add the class to it through JavaScript. Yes, Elgin.
Elgin Sharper: Would it be Turn yellow.
Lewis Benson: I can call it whatever we want. We can call it turn yellow. Just keep in mind an idea is unique. There's only ever going to be one turn yellow ID in this entire application. So this one doesn't really work as far as an ID name goes I'd probably just call this. H3 on. Index something very specific that identifies what we're talking about. That's probably a little bit too vague. I'm just gonna call it.
Lewis Benson: I'll go a little bit simpler with this and just call it H3. Just so we know what we're trying to select. It's just an ID for our JavaScript to grab onto. So I'm going to go into my JavaScript now. And I'm gonna create a new variable almost equals document
Lewis Benson: get element by ID
Lewis Benson: and we'll pass in the element ID as H3 because remember the ID is just how JavaScript finds the element it's not doing any sort of changing colors yet. It's not applying any of that CSS that we made and again, I know I could just add this class to it manually. But I want to use JavaScript to add the class because if I were doing this to multiple elements at the same time. And I want to be able to toggle it on and off that's where this becomes useful. So this is a little bit of an oversimplified example, but you can grow off of this to make more complicated applications as the idea.
Lewis Benson: So what I'm gonna do now is say H3 Dot. Class. So this one's giving me this option here for class list. This is the correct property name. I'm actually going to bring this up on mdn because mdn with JavaScript. It's probably the most helpful part of JavaScript. And this is where we can actually modify it. So let's take a look on here. And see what they say about the class list and how to use it.
Lewis Benson: So we got element dot class list.
Lewis Benson: And it's giving us some code example here. And we have div.class name we can add a class name like this and then we can do this class list dot remove and class list dot add. This is the part here that I wanted to show you. So the class list is the correct way to add a class. Because it allows you to also remove it here you Put one in this as well. You can say div.class name equals and that will add a class. but using the class list method allows you to say add it or remove it. So if we didn't want it to be yellow anymore, then we could remove the yellow class through JavaScript and actually change this back. here we have a toggle method on that that could also be useful again mdn is awesome for
Lewis Benson: Finding a lot of these methods and everything we need to use this for it's just one of those things that the more you use it the better you'll be able to find this stuff. So I encourage you to even if what a method does every now and then just look it up on mdn and see what it says about it because sometimes there might be something else on here that you didn't know and maybe it's something useful that you can use down the road. All right. So let's go ahead and do dot add and we want to put in the class that's inside of our CSS. It's just turn yellow class. So we'll just say turn yellow. And let's take a look at our output and see if that work. We don't have an output yet. Let me do an inspect and see if we have a class. So we have the class turn yellow on it. I may have a typo.
00:30:00
Lewis Benson: Because it was applied.
Lewis Benson: Or did I forget to import my CSS? That's what it is. Classic. All right. So, let's Link in our CSS.
Lewis Benson: I should have checked that and there it is. I want this to be yellow. So again, I didn't put the class and the HTML. I put the class and the JavaScript. Because I want to be able to dynamically change things. And what's nice is I can actually do this to anything now. I can do this to my paragraph as I could say new paragraph. class list dot add we're going to turn it yellow, too.
Lewis Benson: And we don't have the output and I believe that's because we have an inline style here. So I'd have to remove that inline style as well. Let me just comment that out for now.
Lewis Benson: And there we go. one of the reasons why I avoid using the style attribute in my CSS, unless I'm looking to override like some bootstrap or something is because of this little problem here where it gets hard to manipulate it. If you write all of the styles that you're going to be using in your CSS such as a turn yellow class. You could have a get or be larger Font whatever you want to call your special classes. These are also referred to as utility classes. Whatever you want to call them. You can put them in here. and then you could use your JavaScript later to apply them with this class list dot add so it gives you a lot of dynamic options with your JavaScript Are there any questions about this?
Iris Coats: I'm looking to see why mine didn't turn yellow. It might be.
Lewis Benson: Okay.
Lewis Benson: I'll go over each step here real quick and just see if maybe we missed a step. So you have the class inside of your CSS. And you have the color being changed there and then in your index.html, we're not applying the class directly, but we are applying an ID that we can use as a place to grab onto.
Iris Coats: AR
Lewis Benson: And we also linked in our CSS file.
Iris Coats: that's one double check and
Iris Coats: there it is.
Lewis Benson: And we don't have any typos between the file name and the CSS file name capitalization will matter. Okay, and…
Iris Coats: Yeah.
Lewis Benson: then within the script.js file, we are selecting the H3. I did get element by I passed in the ID that I chose inside of my index.html. If you remember the ID was equal to H3, so I'm passing an H3 as a string here.
Iris Coats: I see what I did.
Lewis Benson: awesome Glad you could find the bug.
Lewis Benson: Okay, so Kind of moving forward here. I want to get into What's called comparison operators? And this is something I wish we could have got into in the first week of JavaScript just because it's such a useful tool to now. But we had to push it back just because we were getting into too much stuff and I didn't want to overwhelm you. so we're going to talk about comparison operators next. And I'm going to use as much Dom manipulation as I can in order to demonstrate how these work. So here are a list of comparison operators. We have two equal Which means check equality between two items. This isn't one that we normally use all that often. I would recommend avoid using two equal signs.
00:35:00
Lewis Benson: At all costs if you can it's kind of like the strip thing. We don't really do this anymore. I do introduce it though because it is something you will see there are some developers that will use it and it's kind of a loose way of writing your code. It's not very robust. I don't recommend using that one. and let me just put a note over here and say is equal and this is kind of what it's checking is something equal. And anytime you use a comparison operator. It's going to evaluate to a Boolean and I'll demonstrate that. Here is the preferred way to compare to items. This is strictly equal this is what we normally do now is three equal signs.
Lewis Benson: We have a variation of is equal above that. We don't use. And this is not equal and I didn't want that to. Put a little minus right there, so it doesn't go red. The minus is a part of a Dodge put on all of them. So they all have it.
Lewis Benson: and the one we do use is not strictly equal
Lewis Benson: And again, I'll be showing examples on how to use these. I just wanted to introduce what each of these mean before I start using them up front. And then the last ones are your less than equal to.
Lewis Benson: so we have greater than
Lewis Benson: less than
Lewis Benson: and the reason I'm putting a question mark here. Is because these evaluate to a true or false? So each of these kind of represent a question every time you see these and then we have
Lewis Benson: a standard equal to and I won't put the note on these ones. I'll just put them in here because they're kind of self-explanatory just to show you what these look like. So these are what you would use for between two items so if you want to check if something is greater than Equal to this could be things like comparing a password. If a user's logging in comparing their username, it could be comparing numbers. Maybe you have a website that sells wine and you want to check that if the user is at least 21 years of age before you would try to sell the wine. Then you would want to use something saying is the Age greater equal to 21. If it is then you continue on with the logic. Otherwise, you can redirect them to a page that is safe for users under the age of 21.
Lewis Benson: So that is kind of what we use something like this And let me show this in the browser here. And what I'm going to do is open up my console. And I'm just going to type in some numbers here. So I say five. Strict or equals five and we can see that that evaluates to true. So this is one of the things that JavaScript you can use it like a calculator I could say five plus five is equal to 10. And that's also equal to 10. And we can see that true. And again, remember whenever I do anything in JavaScript, I always want to know what it reduces down to so when I put five plus five equals 10 and I see that that's true.
Lewis Benson: This is true. whenever you read five plus five equals 10 just think true automatically don't think this long expression with all these numbers think about what this would evaluate to now you might not know the answer. Just know that it's either going to be true or false. It's not going to be a number know the data type that results to is the main idea. So I could also say the Is equal to the string? With a capital H and we see false if I do it again with a lowercase H we get true.
00:40:00
Lewis Benson: So the clear button up here. This is where I want to talk about the Loosely versus strictly equals and this is where you can get bugs in JavaScript and this is why we don't use the Loosely equal to you could say five Loosely equals. Five and we get true. If I remove oops, sorry if I remove or add an equal sign here we get false and the reason these aren't equal is because this is a string and this is a number they're two different data types. So we want to be careful with mixing data types, especially with comparison operators. because there are a lot of times where You have a result that you're expecting to be what's considered falsely or truthy which I know those sound like made up words, but in the world of programming truthy and falsy are actual terms that we use.
Lewis Benson: A value being truthy means that and when this expression evaluates that it evaluates to a true Boolean or to a false bullium, but it doesn't have to be a bully and in order for it to be truth or falsely. So what that would mean is if I put equals
Lewis Benson: false we see that that's false.
Lewis Benson: Is Loosely equal to false? So that means zero is a falsely value by default. But if this were some sort of application that was tracking finances, we might not want this to be converted to a Boolean we might want to check is the balance actually Not the value of false. So that's where you want to make sure you're using your three equal signs here so that you don't bake bugs into your code. Later. But with that we're going to get into if else statement and the else statement, so what that means is we can check things conditionally based on. These conditionals here so we can say if something is true then execute some logic in my code. If something is false do something else.
Lewis Benson: Does anyone have any questions so far about? the comparison operators
Lewis Benson: So I'm going to go back into my script. and we're going to say I'm gonna give an example value here.
Lewis Benson: And we're just going to set this to 10. And I'm going to show you what an if statement will look like. so we want to check logic using those comparison operators execute code conditionally, so we'll say if And we're going to put parentheses. Now this kind of looks like a function. I put a space here just to show you that it's not a function. You don't have to put the space. This is a whole nother type of operator here. This is completely different than a function. We're not putting in parameters here. Whenever you have if statement. The thing that goes inside of here is an expression and this expression just means that it has to result to a single item. So that single item could be a string that says hello.
Lewis Benson: And that would be acceptable. It wouldn't make a lot of sense because we're not actually changing anything. Typically we're going to use a bully in here. So I'm going to use the comparison operator. we'll say example value. is greater than 15 and then this is kind of like with a function declaration or in CSS. We have to have a code block we have to have scope. So we need curly brackets here to say if this evaluates to true or a truthy value. Than anything that's in between. These curly brackets can be executed. If this is not true. Everything in these curly brackets is going to be skipped. It will not read it. I'm just gonna do a console.log here. and we will say
Lewis Benson: the value is greater than 15. No. I spelled value wrong.
Lewis Benson: All right, so currently our value is 10, so it's not greater than 15 so I would not expect this to work. With that I do want to add in some sort of. Dom manipulation here So what I'm going to do is actually create. A paragraph element to Output to this display as well. Is it kind of a separate thing, but it also shows That we can do more than one thing inside of this if statement. so I'm going to say const we'll just document Dot create element We're going to pass them the p. And then we will say. P dot enter text equals
00:45:00
Lewis Benson: and I'll pass in the same string.
Lewis Benson: And then we'll put this in our container so painter. dot Penn child
Lewis Benson: and we'll pass in the P element that we just created. So there's a lot going on inside of here. But notice all of this code is encapsulated Within These curly brackets. So I should see this in the console. And then I should see this up here on the page and I just want to show you something real quick, too. I did this in three steps. The first step was grabbing a container which we did up above. Here's our container. The Next Step was the manipulation of an element. So in this case we created an element. And we added some inner text to that element. So that's step two is manipulate the element and then step three add the element to the page. So three steps. grab a container manipulate an element add the element to the page.
Lewis Benson: So We're creating and adding text and here we're just adding it to the page. So let's go ahead and look at our page now. I'm going to remove this yellow stuff because it's going to be distracting.
Lewis Benson: I'll just comment this out.
Lewis Benson: There we go. So we have nothing in our console. We have nothing on our page because our example value is 10. It's less than 15. Let me change this to 16.
Lewis Benson: And there The value is I spelled weird greater than 15. Let me fix that typo.
Lewis Benson: That didn't help.
Lewis Benson: There it is. greater
Lewis Benson: All Does anyone have any questions about how that conditional logic works?
Lewis Benson: Again, it's an saying if This is true. Execute this something I want to show is anything after.
Lewis Benson: Or not inside of the curly brackets. So this log always runs. So we see this always runs. I'm going to make this 14.
Lewis Benson: And we still see this always runs, but we don't have that expected output from the if statement.
Lewis Benson: So again, everything's encapsulated Within These curly brackets.
Lewis Benson: All right, so I'm going to create another conditional. and this is going to be called the else if so we're going to say if our example value is less than 15 will execute all of this. else if We need another Boolean. Example value we'll do.
Lewis Benson: Less than five.
Lewis Benson: And then what I'm going to do is copy all of this code into here and then change these to five.
Lewis Benson: So this is where it can get a little bit hard to read. You start getting these curly brackets here. We got some here. we have our else if that's on the same line as this curly bracket. I know this can get to be a bit much to understand it comes with practice. Also clicking on your curly brackets shows you the scope. So when I click on this curly bracket immediately after the closing parentheses. All of this code is encapsulated there. And then our next curly bracket is here. All of this code is encapsulated there.
00:50:00
Lewis Benson: okay, so let's change this to a 4. and I would then expect not to run in the second if to run. And we see the value is greater than five and this always runs. I need to actually change that and say less because I didn't make sense. Sorry about that. So the value is less than five and that's always runs.
Lewis Benson: Are there any questions about this so far? Is anyone stuck and anyone confused?
Lewis Benson: All right, so there's one more piece to the conditional. And this is called the else statement. It's a standalone piece. That'll first check if
Lewis Benson: if this isn't met then it will check this. If this isn't met then it runs this automatically but it only runs this neither of these conditions are met
Lewis Benson: so we can say reuse some of this.
Lewis Benson: I'm going to change the string the value is. between five and 15
Lewis Benson: So the only time this can run. Is whenever the value is between 5 and 15 because here we're checking is the value less than five up here. We're saying is the value greater than 15. So if this is true This code executes. The rest of this code is skipped. All of this won't even be checked.
Lewis Benson: If this one is true. Then all the code above was skipped. And all the code below is skipped. But everything in between here is RAM. And this again always runs at the end. And then if both of these are false.
Lewis Benson: Then this is whenever this one here will run.
Lewis Benson: So let's try it. I didn't change the value. Let's go to 11. And get the value is between 5 and 15. if I go to 19
Lewis Benson: The value is greater than 15. So this first if block runs and I'm just going to separate this out to show you. This is the only piece of code that runs nothing else runs until it's past all of this and then this will run down here. So because this is not inside of any of these curly brackets, this will always run. These cannot run if statement is false. But the second if statement is true. Then that one will run separately. So let's change the value to three
Lewis Benson: change that in the wrong spot. There we go. And we get the value is less than 5 so that means it skipped this code block, which I can collapse it. And it skipped the else block and it only ran this code block here. Because none of the other. code blocks evaluated the true And then again when it finishes this entire if statement, it will always run line 58. What questions do you have?
Lewis Benson: And I know this can look a little confusing especially with all the extra code I had in there. I just wanted to show you that it is going to be able to do multiple things at once. I can simplify this down. I'll do one more right after this. That only does one line of code just to see a more easy to read version of it. so we can say if
Lewis Benson: new example, which I don't have a variable called that yet, but we'll get one. is we'll do greater than 30.
Lewis Benson: I forgot my parentheses.
00:55:00
Lewis Benson: so it's if parentheses with Boolean and then our code block. And say console.log.
Lewis Benson: greater than 30 and then we'll say else.
Lewis Benson: 10
Lewis Benson: in my string
Lewis Benson: Oops, I put a really back there. Sorry about that. And then the last else.
Lewis Benson: Something to note as well. These do get checked in the order. They're written. So it is checking to see if the value is greater than 31st. And then it's checking to see if the value is less than 10 and then it runs Probably not that important for this example. Just kind of keep that in the back of your mind that it does run these in order. There are some use cases for that. I know a couple code challenges where you might have to reorder your logic a little bit to make them work. Let's clear that variable. new example and we'll say 15.
Lewis Benson: Can anyone tell me what the output is going to be for this what online 59?
Lewis Benson: Sorry line 69. I just moved it.
Lewis Benson: What would you expect to see in the console?
Ryan Arnold: The value is between 10 and 30.
Lewis Benson: Thank you. And there it is the values between 10 and 30 and that's because It's going to skip this line because these were both false and it will run the else statement. Because the else is kind of like your fall back. It doesn't always run because if one of these is true, then the else doesn't need to run but if everything else was false, then the else statement runs and that's something to keep in mind. It is a very important. Kind of like little side concept that can be a little bit confusing at first. You do need to use else statements for a fallback plan. If you're going to have a condition. That could never be met. Kind of like a backup plan what happens if none of these are met.
Lewis Benson: All Are there any questions?
Lewis Benson: And we'll be taking our break soon. So I just want to make sure that everyone is feeling comfortable with. the dominipulation and the conditionals
Lewis Benson: you might hear this referred to as control flow. That's a very program term that you'll hear sometimes referring to as Control flow if you ever hear anyone talking about that what that means is code is typically read from top to bottom. But your if-el statements can kind of break that apart a little bit so you can say if this is true run this line. With control flow. Normally you would go to the next line of code. But if this was evaluated is true, then it's going to skip the rest of your code and it's going to move down to line 68 where there's no more code to run. So whatever you're hearing. We're The word control flow. That's what they're referring to is how your code is being manipulated based on what's going on with if statements? Another example is whenever we get into loops.
Lewis Benson: Whenever you make things repeat over and over and over again. Your control is going back up to somewhere in your code and then doing everything over again. So in this case, we are doing conditional Logic for control flow. Tomorrow we'll get into looping and we'll talk about how control flow works Going backward in your code and reading something over again. It's good for if you wanted to make sure that somebody's trying to put in a password and let's say that password isn't long enough or doesn't have the correct characters. You want to keep on telling them not good enough yet, keep on repeating try different input. So one use case for a loop another one might be you have a list of items and you want to display that whole list, then you could Loop over and just render each element inside of your array.
01:00:00
Lewis Benson: All right. Let's take a 10 minute break. We'll get back and we'll go over. A little bit more practice on basically everything we've gone over so far. And I'll kind of demo out how today's assignments gonna go. I haven't got all the assignments posted yet. I apologize for that. I meant to do that this weekend just as long weekend. I'll get those up as soon as I can. But we'll go over today's and how that's going to work. As soon as we get back from our break, so let me get a 10 minute timer started.
Lewis Benson: And if there are no questions, I will see you in 10.
01:05:00
Brian Kimbrow: stated
01:10:00
Lewis Benson: All right, welcome back everyone.
Lewis Benson: So I'm gonna quickly demo out kind of a use case for what we've learned so far and a little bit of review as well. This will be a way to create a quiz game kind of using JavaScript. I'm gonna create a function which will be used for creating questions. and you'll use the function to pass in the question and then based on that we can get the response from the user. And we'll just use or no questions for this. Just to keep things simple. But it'll allow us to do comparisons on strings. And see a use case for that as well. So, let me just create a new script file here.
Lewis Benson: And we'll call this quiz dot JS. You don't have to follow along with this part. This isn't part of kind of how the assignment goes, but I'll go over. More of a rundown on how we would do the assignment on a different file
Lewis Benson: So I'll do my use strict as always at the top. We want to make sure always in strict mode. And then want to include this in. my HTML
Lewis Benson: and we'll just do a quick console.log.
Lewis Benson: Sure, it's working.
Lewis Benson: There it is and interesting we can see the file in line number here. So these are coming from script.js. This is coming from quiz.js. So if you ever are not sure which Javascript file you're seeing your code from it'll tell you on the right here. I have seen some issues with Mac where it gives the wrong line numbers if you're running into that issue. You may try a different browser just to get your line numbers whenever you're doing debugging or you just manually put your line number in your code. that way, where it's coming from so I could say comma string line to like that if you're having that issue. then might not need this but sometimes it's useful if you have a whole lot of stuff going on in your console as well. I just kind of make things stand out a little bit.
Lewis Benson: All So first thing I want to do is to clarif function and this is that a little bit of review I was talking about to declare a function. We use the function keyword. And this is just indicating that we want to create a function. I'm going to name this function create question because this is a quiz. generating function and we'll put our code block there. So stop showing at us. And it's gonna take in one argument parameter. This is going to be the question text.
Lewis Benson: And we would have request. What am I doing next?
Lewis Benson: We have said the word question and sort of writing it again. The question text is a string. We're not like doing any sort of type comparison here or anything like that, but I just want to make it clear that our function is Inputting a string and it's not going to return anything but it is going to manipulate or Dom a little bit and put things on our browser page. just so we know what the scope of this function So first thing we want to do is create an element. And this is going to be where the question is going to be contained. So I'll call it the question And to create an element it's document. dot create element and then we pass in a string which is the name of the element. We're trying to create.
01:15:00
Lewis Benson: And I'm going to give this a class name. That way we can just add a little style to this later if we have time. It's just part of what I like to do whenever I create. Items in JavaScript, is this right off the bat? Always class list. I'll add.
Lewis Benson: And we'll give it a class of question.
Lewis Benson: And then we need a paragraph element. This is going to be The text that's being put into the function whenever we invoke the function. So this will be p standing for paragraph element We'll create this element with document not attribute element
Lewis Benson: and we'll just pass in the name of the element which is a paragraph element. And I like to do my modifications as soon as I create things, so I'm going to say question.
Lewis Benson: P dot text content is equal to question text something that you might have noticed is that in my script.js. I used enter text and here I use text content. See that they're here P dot enter text. And then question P dot text content. They do the same thing. It's just the information is located in a different part of the Dom. I haven't noticed a difference between using one or the other. I'm just using both to show you that there are more than one ways to do it. I could also use enter HTML and I could put in bold tags and some other things like that as well if I wanted to. Just to kind of show you that that's there. All right, and then the next thing we need to do is just append all of this to the page. So we'll do. question div
Lewis Benson: dot append child and that is question B.
Lewis Benson: And does anyone know how I can append my question div to the page?
Lewis Benson: What I actually attach that to.
Lewis Benson: You'll notice I have. anything in here that's on the page. I don't have anything get element by ID. If we look at our index though. I'm actually going to delete this H3 for now. So it's not in my way. We still have this container here so we can still select this even though we're in a different file. We can select this in as many files as we want. So at the top I'm actually going to do that first. I'm going to say container equals document dot get element by ID. And I'm going to pass in the ID of container.
Lewis Benson: And I now have this in two different pages. It's the same element. It's just being selected in two different locations. And that's not going to hurt anything. So now we can take this container. And we can append our question to it. So we container dot pend child. And we'll put the question div inside of it.
Lewis Benson: Okay, so if I create a question now. We can create question and we can pass in the string. Is Javascript? a programming
Lewis Benson: language Let's see what that looks like on the page. This is the function invocation. This is the function declaration.
01:20:00
Lewis Benson: I gotta have this inside of the function. Because this is a const and it's being declared across two different applications. It's still one Dom. It's still contains it in one so we'll just continue put it inside of the function and that'll solve that little air we had there. So there's the question is Javascript a programming language. So now we need a way to answer the question. So we can do this with a prompt. I could also do this with a input and a button for now. We'll just do the prompt.
Lewis Benson: Just so that we get a little review on that. So we'll say I notice some typing create question function still. I'm inside of that. code block I'm just gonna be equal to prompt.
Lewis Benson: We'll do text Plus
Lewis Benson: I'm gonna do a little concatenation here.
Lewis Benson: Yes slash no so that it is implied that the user has to respond with yes or no. and then we'll say answer
Lewis Benson: we're going to create a paragraph element For the answer so we can store that under the question.
Lewis Benson: create element pass in the paragraph
Lewis Benson: and this is where we kind of want to. Use our control flow to actually check is the answer yes or no.
Lewis Benson: so I don't want to make this so that I mean, yes, we know the answer to this one is yes, but future questions might be no. And I don't have a parameter whenever I'm passing this and that is going to be checking that I don't want to make this too complicated. So for now we're just gonna say what they answered and not if they got the correct answer or not that would require multiple parameters and more logic then I have time to implement right now. So for now we'll just say what they answered. So we'll say if user answer dot I'm going to use this to lowercase. Because we want to normalize whatever the user types in. So if they type in a capital instead of a lowercase y we want to just make sure that whatever we're comparing is exactly the same.
Lewis Benson: So if I say is strictly equal to the stream, And they typed in this then this would return false and that's not what we want. We want to normalize this with this two lowercase method so that if they type in it like this, it will be converted to this. And we can see that it will be the same as the comparison operator and that'll work. So if statement we put our code block and we're going to say answer. P dot text content is equal to
Lewis Benson: U Answered. Yes.
Lewis Benson: else if
Lewis Benson: We're gonna do the same thing. But this time we're going to compare with no. So the user answer. dot to lowercase
Lewis Benson: I want to use regular lowercase just simple.
Lewis Benson: And we're gonna check is that strictly equal to the string? No. if this results as true Then we'll do the same thing. We did here but instead of we're going to say no. And then we need a full block a fallback plan. If the user types in something other than yes or no, this is where you would need to have some sort of validation to handle that. We don't know Loops yet, so we can't tell them to actually Go back and re answer this question. So until we learn Loops, we'll just say invalid answer
01:25:00
Lewis Benson: and the last thing I want to do is append this to the document. So we'll do. the question div Dot a penchild remember a question is being appended to The Container here. So whatever I append into question div is automatically going to be appended to the document. And we'll just pass them that answer p.
Lewis Benson: and I'm just going to yeah, that should be good.
Lewis Benson: So when I load the page now because I have these prompts. I'm probably gonna have to do a little bit of a refresh thing. We'll just take cancel. Refresh here we go. And we see is Javascript a programming language. I notice we don't have it on the document because prompts interrupt things so we have to kind of go with what we got and type it in here. We'll say yes. And we see is Javascript programming language. You answered. Yes. So now we can create as many questions as we want. Based on this we have this if else statement going on checking what answer we typed in. So just another one we can say create question. Is the sky green?
Lewis Benson: Create question.
Lewis Benson: We know the answer to this one now. So again, I'm just going to cancel refresh. And is a programming language? Yes is the sky green. No. Can JavaScript manipulate the Dom? Yes. And then there we get all of our answers output into the Dom on the left here. It's not the cleanest approach just because we're using prompts right now. We'll get into more advanced methods later. In fact, we'll get into a little bit of input and a little bit of button pressing today. So that'll help out a bit. Does anyone have any questions about this little demo here to show you kind of the use case of this? Yes, Ryan.
Ryan Arnold: 
Ryan Arnold: So I'm encountering an error when I go to look at the page and get it to run that little quiz. When I inspect it,…
Lewis Benson: mmm
Ryan Arnold: it says uncaught syntax error identifier container has already been declared.
Lewis Benson: Yes, so I ran into the same error earlier. And it's because we declared container inside of script.js.
Ryan Arnold: so we don't need that line that declares it again.
Lewis Benson: technically we don't but at the same time we do because it doesn't know that script.js exists right now. So it's gonna think that it's undefined. So what I did was just moved it inside of the function scope. And it can redeclare it as function scope instead of global scope and that should get rid of the air for you.
Ryan Arnold: There we go. It's working now. Okay. Thank you.
Lewis Benson: Yeah, and I think if we would have created it with let Nest I wouldn't have worked we had to get rid of you strict so having an inside of the function solves it it's not a common bug because we don't typically redeclare our variables across multiple Pages like that unless you rename them. It could have renamed us to a different container. We could have said quiz container or something like that. Just for the variable name and it would have worked fine. We would have had that stolen Global scope. Encapsulating things inside a functions though is actually a really good practice. So anytime you can put all of your variables in a function or inside of a class or an object later go ahead and do that because it does avoid errors like we just encountered that is a very Advanced concept though. That's something you'll hear referred to as object oriented program.
Lewis Benson: Were you encapsulate all of your code inside of objects? or instead of functions and methods Again, that's something we'll learn eventually, but it's not something that we can learn all at once. it's a big topic. Are there any other questions about this little quiz again? It's just a demo to kind of show you the use case of if else statement as well as a review on what a function is the Declaration and kind of show you how you can do multiple questions with one function call here. If I would have added a second parameter to this. I could have said correct answer this way and then here I would have said yes.
01:30:00
Lewis Benson: No.
Lewis Benson: This isn't something I'm gonna fully set up. It's going to show you you could do this where you have the correct answers being passed in as well. And then here you would actually compare.
Lewis Benson: Answer like that.
Lewis Benson: And then you would just say correct.
Lewis Benson: I guess I will fully set it up.
Lewis Benson: So there's a way you could do that to actually display. The correct answers. I don't know if you've seen that all that little bit of refactor. I did there. I added a second parameter to the function that checks for the correct answer being passed in. When you're invoking the function you're passing in the correct answer as well. And then we're just comparing the correct answer. It's a little bit more complex that I wanted to show but for anyone who's interested in that. Let me just run that real quick to make sure there's no errors. And we'll say I'm gonna say yes to this one. So it's incorrect. And And there we go. I got an invalid answer there.
Lewis Benson: that's because there's a little bit more logic. I'd have to implement I guess to make this work, but that's close to how you would do it. Because I said yes.
Lewis Benson: Yeah, I'm just undo that. It's not gonna fully work yet. Not without the loop. So I apologize if I confused anyone with that just to kind of show you that you can kind of go down that route. It almost worked. So if there's no other question about this little quiz, I'm gonna kind of go into how we're gonna do today's assignment and what we're looking for on that you don't have to code along because we'll still have our breakout room time. But if you want to feel free to and then I can always go over anything again for anyone who maybe fell behind during the demo. Or there's any concepts that are your holy understanding or you have any questions? so For the assignment. I'm going to create a new file again. And I'll just call this. assignment.js
Lewis Benson: You'll probably call your script.js or whatever it is if it's determined in the instructions. Put our use strict at the top.
Lewis Benson: And we'll console.log hello world just to make sure is wired up correctly. This is just a common practice that I do on every single script file. I ever make even today whenever I'm working on applications for a client. I'll always do something to make sure that it's wired up correctly and everything's working. And then let me go ahead and import that.
Lewis Benson: And this is going to be assignment.js.
Lewis Benson: And I want to get rid of the quiz.js. I'm also going to take out the script.js for now too. Just so we don't have any conflicts of variables. We have a container.
Lewis Benson: so I'm actually going to make this Output container just to show you that you don't have to use that name.
Lewis Benson: Hopefully that doesn't confuse anyone. So the output container it's another ID name. It's the same thing as before. I just want to show you that you can literally call these IDs whatever you want. It's just a way for JavaScript to find it and be able to attach it and use it. All right. So in the assignment now, I can remove this why I actually tested refresh and there's my hello world. I can delete this. I see it's working.
Lewis Benson: All right. Now I'm actually gonna bring the assignment instructions up as well just so that we don't have any confusion
01:35:00
Lewis Benson: These up here. All right. So step one is to create the Repository. I'll go over that real quick just because we haven't been in session for a while. We might need a quick Re a bit of my GitHub Create new Repository.
Lewis Benson: Step One is the name this JavaScript logic Dom.
Lewis Benson: Just give it a quick description. I'm going to add a readme file so that I can clone this.
Lewis Benson: And we create the repository. I'm not actually going to clone this down because I'm already in a working repository. But at this time you would hit Copy that paste it down to the nuts when you create your index.html and your Javascript file if you're already working inside of a Javascript file, and you already have that then you'll have to link these remotely. To do that if you created the readme, I believe you can just delete it. And it should tell you the command.
Lewis Benson: I click code.
Lewis Benson: That's not going to give me the command because I have two commits here. So I believe it's get remote Dash you and then the name of let me get that command real quick.
Lewis Benson: Get remote ad origin notice.
Lewis Benson: So if you need to remote, I'll just paste this into the cohort chat here.
Lewis Benson: I put that in the October cohort that if you already have yours, that's the command you would use and the URL. You'll replace it with the URL that's inside of here.
Lewis Benson: So if anyone has any questions about that. That's how you link it up. All right. So next is the dominipulation part and that's where I kind of left off. So in the index.html create a div element with unique ID to serve as a dynamic container for the output. And add a text input field and a button to facilitate user interaction. So we're going to be doing some things. We haven't seen yet. We're going to be having a way to using a input field and a button so it's kind of like a form element. So let's go ahead and add that.
Lewis Benson: That's inside of our index. I'll place that here on an input. That's a text. And we'll have a button.
Lewis Benson: And we'll just say Something I'm going to add to these. are IDs Just so we can grab onto Inside of our JavaScript and we'll say user input for the input one. And the ID for the we can say submit button.
Lewis Benson: Does anyone have any questions about this so far? So all I've done Created my index.html. I have an empty JavaScript file. I linked that into my index.html and I created three elements with these IDs.
Lewis Benson: So let's take a look and see what that looks like now on the page.
Lewis Benson: Okay, so we have where somewhere to type we press submit doesn't do anything. When I press submit. You don't want to wrap this in a form element. I know that would be more semantic. If you do it'll actually cause the page to refresh when you press submit and that would make it hard to actually work with this right now for now just have these outside and your body and that's perfect. refund for this assignment
Lewis Benson: So next is in the js rate code to create new paragraph elements and append them to a container with On Dynamic content based on user input and logic so it's basically like that quiz. We created a little bit ago.
01:40:00
Lewis Benson: We don't have to get that complicated with it though. So let's go ahead and create. That logic so what I'm going to do is create my container again. So if you already have a container in your Global space, you might want to name this something else like dynamic.
Lewis Benson: container you can call it whatever you want. I'm just gonna call mine container since I only have one. yes, Ryan.
Lewis Benson: Yeah, yeah, no problem. So we have a div and I gave it an idea of output container. You can just call your container if you prefer. I have an input with an idea of user input. And button with an ID of submit button. Again, these don't have to have the same IDs. It's just something that JavaScript will latch on to and I'm actually gonna select one of these a little bit differently just to kind of show you the other option that's available out there where it doesn't even use an ID. So, I'm going to remove this for now. We'll select the button separately without an ID. Just to show you another alternative. If you don't have an idea available. But before that let me select this output container. So it's document dot get element.
Lewis Benson: By And then we pass in the ID output container.
Lewis Benson: And let's also select. You can call these variables whatever you want.
Lewis Benson: That part What is important is that you're consistent? get element by ID
Lewis Benson: and the ID we used was? user input
Lewis Benson: So let's put comma here.
Lewis Benson: Just so we know it's kind of going on. I like to add some comments. And then the last thing we want to select is the submit button. So again, I don't have an ID. I'm just to show you the other way to do this. It's the way that I actually prefer to use whenever I'm selecting elements because you can be more Dynamic with it. This one uses CSS selectors. We still need to give it a variable name. I was called submit button.
Lewis Benson: document so instead of get element by ID. We're going to use Query selector. And whenever you pass anything into this string you pass it in it is a selector. So in CSS, if I were selecting an ID, I would use the pound sign and I would say submit button if I had an ID on it, which I don't so this won't select anything. I'm just going to put button in because in CSS if I wanted to select a button element, that's all you would typing your CSS file. If This Were a class I would put a period here and it would select it like that That's why I prefer query selectors because it uses CSS selectors and it just kind of keeps things consistent across your different files. But again, this isn't a class it is just an element. So I'm just going to put in the element name button. because I only have one button on my page.
Lewis Benson: Query selector Returns the first result found so the first button it runs into it'll return it. And it'll be I only have one button so it'll return the one button I have. Are there any questions about query selector?
Lewis Benson: So I'm going to create a function now and this is going to display an output.
Lewis Benson: So I'm going to call the display output
Lewis Benson: You want to be as descriptive as possible when you're naming your functions? It blocked there, so don't yell at me and this. Function is going to take in a message as an argument. So it has one parameter that's message and it won't return anything, but it will do dominipulation. So this is going to create an element. Similar to what we did with our quiz.
01:45:00
Lewis Benson: new paragraph equals document Dot create element
Lewis Benson: and we pass in the P element.
Lewis Benson: and then we can say new paragraph enter text Is equal to the message? And again, if you prefer to use text content instead of intertext you can do for that as well. And can someone tell me how I would append this to the container.
Ryan Arnold: Is it a pen child?
Lewis Benson: It is a penchild. And that method will be called on the parent element that we want to append it to. So in this case dot a pen child because container will be its parent. And we pass in the element that we want to append which is the paragraph.
Lewis Benson: and that's basically all this function is going to do every time we call the function. It'll take in a string. It'll create a new paragraph. It'll write a message that's being passed in as our parameter. And it will append that to the page. So that function is complete. Let's take a look at the instructions here. So we have code that creates new paragraph elements and appends them to the container. Based on user input and logic that part we don't have just yet.
Lewis Benson: We'll get to that just a second. I haven't gone event listeners yet So the event listener, let me actually just bring that up on mdn here.
Lewis Benson: This is the method we're going to be using it's called add event listener.
Lewis Benson: it's a method of the event Target interface, which it doesn't really tell you much. I know looking at this documentation. This is one of those things where as you use things you just want to kind of come and read about them. And get an idea of what they do. So the event listener is actually a method. That has two parameters. The first parameter is a string that describes the event. I'm looking for. All the different events. I was hoping they'll be listed here. I believe they are somewhere.
Lewis Benson: Just one second. So we can see click.
Lewis Benson: It's getting into a little bit too complicated things. Maybe if you look at event Target.
Lewis Benson: Yeah, I don't see a list of them here. And I just search for it.
Lewis Benson: All right. Whenever I find a list, I'll actually share that with the classroom just so you can see a list I'll end up putting one together if I can't find one, but basically there are these different events that allow you to listen for things. One of them could a click event there is a submit event on this would be if you're in a form. It'll listen for submissions. They're scroll events hover events. So if you hover over an element that's considered an event anything you're doing to the Dom. Is that you can have an event that you're listening for? So if you click on your Dom somewhere on the event listener will listen for that click and then whenever that happens, that's when it performs the logic.
Lewis Benson: So what we're going to do is we're actually going to create an event listener on our submit button. We want to know for now, I'm just gonna say when the user clicks the button. Let's very simple way just to kind of see if this is working. So we'll say submit button. dot add event listener and our first parameter is a string. And The second parameter is a function declaration. This can be done directly in line. I'm doing here or it can be done. Separately and then you pass reference to a function Without invoking the function. I'll show you both ways. Just so you can see the difference.
01:50:00
Lewis Benson: I'll do it this way first. I'm writing the function keyword because I'm declaring a function. Normally, I would put my function name next but I want this to be an anonymous function. We don't want to have a name. It's just reference to a declaration. This function will not take any parameters and it does have a code block. So as we can see my first. Umar is a click as a string. The second parameter is a function declaration. Currently. My function has no logic. I'm going to add some logic now, so to do that I could type console log. And I just want to log the string user has clicked. So we can see that's not the same as this over here. I did this hole in one line just to show you. This is perimeter number two. This is perimeter number one.
Lewis Benson: But typically you'll put a new line here and the new line here like that whenever you're writing So this is kind of what it looks like whenever it's all done. Now again, I showed you I wanted to actually make this a separate function now. So I'm going to remove that. And I'll do it up above here. I'll say. function
Lewis Benson: click Handler is typically what you would call these. And then you just pass the function name. This is the exact same code. But now I have a named as my callback function But notice I'm not invoking the Callback function. I don't have parentheses here. If I put the parentheses here. Then it's actually going to result with this. And then this is going to result to this. So what I'm actually putting here is a string. We don't want to put a reference to a string. We want to put reference to a function. We want to know the function name, but we don't want to invoke the function. The reason for that is we're saying when this click occurs, that's when this function is invoked not when we're passing it in.
Lewis Benson: We don't want to invoke it early. We want the event listener to determine when does this function actually get called? And that time will be when the click happens. I could make this a hover event. If I have this as a hover event, then this function gets called anytime. I hover the submit button. I'm not going to use the hover event though. I'm going to use the click event. So whenever I click on the button, that's when this function gets called. I'm actually going to undo I want to put the function declaration back in here just because that's the more common way. You'll see this written. So I'm just going to control Z this back.
Lewis Benson: And we'll put it like that again. This is the exact same logic if you converted yours, you don't have to undo it. Like I just did you can leave the function above what the function name here. It'll work exactly the same. I just want to show you this syntax because this is the more common way You may also see this written as an arrow function. I'll just show you what that looks like and then I'm going to undo it. I would remove that. And go like that exact same logic. this is an anonymous aerial function. It does the exact same thing? It's just a different syntax. A lot of times the arrow functions though. You'll see where they don't use curly brackets. Just so that they can put things on one line. This isn't something that I'm really that big of a fan of. So again, I'm just going to go back to the way I had it.
Lewis Benson: And we'll have the standard function declaration as our second parameter on the event All right, let's see this in action Make sure everything's working correctly. I should see anytime I click this event button show up in my console.
Lewis Benson: And every time I click that number increases. I know you can't see me actually clicking. On my finger here, but you can see the mouse moving the button on the cement and you can see the number going up so. User has clicked increases each time. Does anyone have any questions about this event listener?
01:55:00
Lewis Benson: Okay, so I just wanted to show you how this event listener works now, we can Implement a little bit of logic and our code that makes it Dynamic based on what the user puts in there. So first thing I want to do is check if the input element is blank. So We make a comment here and we'll just say what each pieces doing.
Lewis Benson: and what I mean is checking if I mean here if the user doesn't type anything they just press submit. I want to know that this is empty. So I have a comment here just saying what this piece of logic does you don't have to put the comments if you don't want to that's just for kind of a note thing. So we'll say if
Lewis Benson: user input Dot
Lewis Benson: input field
Lewis Benson: I'm actually going to simplify this a little bit because I'm going to get a lot of Dots here. So let me create a variable called user input. I apologize for backpedaling here a little bit. We want to know's to be user input field dot value and the only reason I'm doing this extra variable so that I don't have to have dot value inside if statement and then a DOT method on top of that. So I'm just creating an extra variable here to eliminate that. I could show you what that would look like without it. It would be like this dot value and then I'd have to add methods to this. And it gets a little bit meth messy. this trim method
Lewis Benson: if there's an empty space if I go in here and just do a bunch of remove empty spaces. So what I want to do is make sure that this is not empty and that includes empty space. So instead of doing I'm just going to do this variable. Since I already have the value here. I can just say User input not trim and it just cleans if statement just slightly. I could also do that up here. I could say dot trim like this and then I don't need the trim here. I'm not going to chain all this together though. I'm trying to avoid chaining as much as I can. I'll just keep this simple thought and then what we want to know is if I remove all the empty space. Is it equal to an empty string?
Lewis Benson: if it is then we're going to use our display output function here.
Lewis Benson: And the message is going to please enter a value. So this function all it does is create text to the page based on whatever is in there. So let's try it out.
Lewis Benson: I press submit and I get please enter a value.
Lewis Benson: so far we have some Dynamic content based on user input if I put actual text in here. Let me do a refresh so we can see. It doesn't do anything. I remove the text I put a bunch of white space in here. Press submit. I please enter a value. so far this is working as expected. next Let's check for. a number we'll go very specific with this. So I'm going to go down here and create some new logic and we'll say
Lewis Benson: If the user input the number 10.
Lewis Benson: user input strictly equals 10
Lewis Benson: then we're going to do the display output again. But this time the message is going to be different. We're going to say you entered number 10. something to note here, I'm using strictly equals. And I'm saying number 10. But I'm also receiving user input. one thing with JavaScript and just I believe it's the same for most programming languages anytime you get user input is a string and we're comparing a number with strictly equals. This will never be true. And I'll show you that if I put in the number 10, press submit. It's not giving me the results I want. One option would be to make this two equal signs. I put a number 10. You entered 10.
02:00:00
Lewis Benson: This is not best practice. We don't do that. We avoid using two equal signs instead. We want to make the data type the same. one way to do that is to say parse
Lewis Benson: then wrap this function around the user input. And this will convert person as a function that s. the value from a string to a number
Lewis Benson: and if it's equal to 10, it'll display the output. So let's try that 10 you entered number 10. It's working correctly. I enter the letter d. We don't get any errors or anything. It just doesn't do anything. Let's do a refresh.
Lewis Benson: white space we get please under a value. I put in the number 10. We get you entered number 10. So everything is working as expected. There is another way you can do. We call this casting whenever you change data types. Sometimes you can just put a plus sign at the beginning. like that and it tries to do math. So if I put in 10, we also get the same result. I put in G. It doesn't do anything so it still works the same An alternative this is kind of like a little shortcut. I do want to show it to you just so it exists because you will see it occasionally, but it's not the most readable thing. It's not very clear that this is being cast to a number so I'm actually going to put this back as parseint. This is the more
Lewis Benson: explicit way of saying I'm turning this into a number right here. But if you prefer to use the plus sign feel free to use it one way isn't more correct than the other. It's kind of comes down to preference. You'll see me do both ways. So then we're going to do another check else if
Lewis Benson: user input Again, we want to normalize this so we're gonna say two lowercase. in case they type in a capital h
Lewis Benson: strictly equals Hello.
Lewis Benson: And if that's true, we'll say display Hello to you too.
Lewis Benson: Let's try that.
Lewis Benson: And we got our hello to you too. I'll put in a You enter number 10 empty space, please enter a value. So this is dynamically creating content to our page based on user input. So we are fulfilling what's going on where we are also using comparison operators and if else statements for this control logic here. Let's add one more. And this is just going to be an else statement. And this will basically be the catch-all. If we didn't have something specific we could just say display output. and say you entered space Plus user input
Lewis Benson: and let's try that. empty space 10
Lewis Benson: hello, I'm gonna use a capital this time. Hello to you too.
Lewis Benson: the road is down there you entered the road is down there.
Lewis Benson: Doesn't even have any questions about any of that logic of them implemented there.
Lewis Benson: Okay.
02:05:00
Lewis Benson: so we kind of created a way that if we wanted to create another quiz. We could actually list all of our questions in the HTML above. And then we could possibly even create multiple inputs here with multiple event listeners. And then have an input filled for each question and then plug in the answers above if you want to do that as a stretch goal. Feel free to build your own version of a quiz. If you want to experiment with this, feel free to go about that.
Lewis Benson: I believe this fulfills all of the requirements for today's lab. We're not using every single comparison operator. That's not a requirement for the lab. We just want to use some comparison operators. So we are using the strictly equal if we wanted to throw in a few number checks, we could say. Anytime there's a number. That's not 10. We could say you put in a number less than 10 or greater than 10. We kind of create a guess the number game in that way.
Lewis Benson: It's actually a common first project. I see a lot. We could put in another else if here.
Lewis Benson: And inside of here we could say. I need mine. my check
Lewis Benson: just copy this one pasted in here. and say if it's less than
Lewis Benson: 10
Lewis Benson: And we would say.
Lewis Benson: higher
Lewis Benson: and then I can put in another else if this is actually a good demonstration of chaining together else if statements you can only ever have one else you can have as many else as you want. so I could put another one here else if
Lewis Benson: And we'll say I'll use the plus sign this time user input is greater than 10.
Lewis Benson: And we'll display output. lower
Lewis Benson: and the formatting targets us nice and line back up again notice we start with and then we go into the else elseif L's something to note about this. Whenever you could do this with all if statements like this. It's not going to throw an error. But keep in mind. This else statement is only going to work on the last So that's going to break your L's statement also.
Lewis Benson: this one isn't red is Or sorry if this one is reddish true, it's also going to read this line of code. It's also going to read this line of code and it's going to read this line of code. It's not going to stop. And just skip to the end. On the way that a normal lsiff would whenever you have else if this one evaluates is true. if all of this code isn't even executed. It's completely skipped. So it makes your code a lot more performant to use the alphys else Unless you need to If you need to check every single one of these then if you're checking the same condition in this case, we're checking. What is the value of user input?
Lewis Benson: Then you want to use an else if for that because that isn't changing as your code is running. So, let's see if our little guess the number game works. Let's say 5. submit it says higher nine higher 11 lower. 77 lower
Lewis Benson: you entered number 10. So we have a little guess the number game there. Kind of neat little thing you can do with this as well. What questions do you have about today's assignment?
Lewis Benson: I did demo the solution for today's assignment. So whenever you are doing this I ask that you don't just kind of blindly type what I typed if you're following the video if you're going back through this or if you were even coding along Please experiment with this add more if you completed it already and you're feeling pretty good about it. Do it a second time create a second Javascript file and just run through this and practice it again during the breakout rooms. Help each other too when we're in the breakout rooms if If you're unable to attend the breakout rooms, that's fine. You don't have to have your camera on and all that when we're in there. I just break it apart like that so that I can divide up the TA than myself. And if you don't have questions, it gives you that opportunity. Are there any questions for? the assignment at all. Yes, Ryan.
02:10:00
Ryan Arnold: You real quick. I do like a refresher for their commands for add commit and I forgot what the last one was.
Lewis Benson: Yeah, so it's add commit push for the ACP.
Ryan Arnold: push it was
Lewis Benson: Yeah, let me do that real quick. So I created a repo here. I always go through the whole process. Let me clone this Open get bash and my projects plug in my link
Lewis Benson: Okay, I'm going to CD into that.
Lewis Benson: Museum in a little bit there All right, so I seated into it someone used code period to open it there. You could also click into it and open your vs code. However, you normally do it.
Lewis Benson: And I'll make some changes so I can ACP it that open in a different page. Where's my vs code? here this alright, so we would create an index.html just throw a little bit of content in it. Let's quickly. Create a new Javascript file. Okay, and I'll put my U strict in then I'll ACP. Alright, so I got my two files. They're not tracked. I'm going to go back into my terminal you want to make sure that your terminal is in the correct
Lewis Benson: that's the working directory of your repo. I can see it says here. So I know I'm on the main branch if you're on a Mac, you can always say get status. And that'll tell if you're in a repo if you get a fatal air saying you're not in a repo, then you're working directory is probably Incorrect and you'll need to CD into your actual project. Once you are in the project you use get add. And then you can add these individually or you can add them both at once. I'm going to add them both at once using get add period
Lewis Benson: and once they are added we will write a commit message with Git. Commit - M my message will create starter. files for lab
Lewis Benson: If you created features, you would want to put those commit messages in there. For example create function to add Dom manipulation things like that. All right, so they are committed now we need to push them with Git push origin mean.
Lewis Benson: And there they go.
Lewis Benson: Are there any other questions about the ACP process? Linking your Repose that it was everyone able to get this link together.
Ryan Arnold: That was all I had. Thank you.
Lewis Benson: Yeah, no problem.
Lewis Benson: All right. I'll open up breakout rooms for the last of class or arrest a class. If there's no questions. I'm going to stop the recording so that we can get these uploaded as soon as possible.
Lewis Benson: and then we can
Meeting ended after 02:14:10 👋