nia-amar-wfe (2023-11-29 19:30 GMT-5) - Transcript
Attendees
Brian Kimbrow, Daniel Perez, Elgin Sharper, Gregory Robertson Jr, Iris Coats, Krystal Jefferson, Lewis Benson, Lewis Benson's Presentation, Umar Z
Transcript
This editable transcript was computer generated and might contain errors. People can also change the text after it was created.
Lewis Benson: So this is week six day three we're going to be going over callback functions and some array methods are kind of the bread and butter of JavaScript. They really give you a lot of power between string Methods and even I think array methods are the most used at least from what I've experienced. There's some of the most useful ways to implement functionality. But we got to start with callback functions because you can't use most of the array methods without having callback functions and understanding callback functions. So mdn defines a callback function as a function that's passed into another function as an argument. And basically what this means is when you're building your function.
Lewis Benson: You will create a parameter. And that parameter is going to in the future be a function getting past to your current function. And then your current function will determine when that is actually invoked. So you can perform a bunch of logic before you invoke that function you can kind of delay the invocation and it will happen whenever it's ready. the time that these are used the most is whenever you're using asynchronous code that's not something we're even going to really dig into it all for level one. But sometimes you might want something to happen later. I think ar had a timeout at one point where you used the set timeout method to create a delay because you didn't want the background color to change immediately when we were doing awesome CSS stuff.
Lewis Benson: And that's kind of an asynchronous action there. So it's kind of in line with that and that actually did require a callback function the second function got invoked at the end. This might be hard to see without actually seeing some code. So I'll start with a demo. And I'll keep this as simple as possible. I've already created my index.html and my script.js I'm gonna go live and just make sure all the stuff is wired up correctly. And there's my content.
Lewis Benson: And there's my proof of life console.log that I included in my script.
Lewis Benson: Go ahead and remove that console. I no longer need it. So what I want to do now is I'm going to create a function. That's used for processing so that user input I guess we'll just be a prompt asking for your name. I will keep it fairly simple here. So we'll have a function. And we're going to input And for the Callback function, you can call these parameters or arguments whatever you want. Just so we're clear on what I'm passing in here. I'm just going to write callback.
Lewis Benson: And this was going to be representing a function whenever I actually invoke my current function. This isn't currently anything. It's just a very variable that's representing something in the future.
Lewis Benson: But it doesn't currently have anything to find yet, but we know that it's going to be a function. So the next thing I want to do is get the name, so we'll say let name equal prompt. And will prompt the user for what is your name?
Lewis Benson: Once We're going to have our callback function do something with that name. So we'll invoke the Callback function at this time, and we'll pass in the name variable as An argument to our callback function again, our callback function doesn't exist yet. But we are function here knows that it's going to be receiving a function as a parameter. And when it finally does get whatever this function is, that's when it will invoke it. So when this could be useful maybe we want to have a function for greeting someone
Lewis Benson: and that will take in their name. And it'll just console.log.
Lewis Benson: And it takes in that name. So this Greek function is representing this future callback function. So, of course I could just do this logic inside of my process input and that would be very simple, but I might have multiple functions for multiple actions. We could have a goodbye function.
00:05:00
Lewis Benson: And it also takes in a name.
Lewis Benson: So our process input function can take in either one of these as a callback function and depending on which one I pass in during the invocation is the function that's actually going to be used during the time of invocation. So, let me go ahead and invoke this first with the greet and then with the goodbye. We'll do process input. And then we'll pass and greet. And whenever I'm passing in greet, I'm not actually invoking the function. I'm just telling it this is the function. I want you to use when you're ready to use it. I don't want to actually pass in the parentheses here and invoke it. I just want to give And the function name represents all of this code block here. So it'll know when it's ready to call this function. It'll do it at that time. So let's take a look. So if asking for my name type in my name.
Lewis Benson: And we see callback is not a function.
Lewis Benson: I'm not sure. I made a mistake here one second.
Lewis Benson: Let me do a refresh it could have been from the prompt. we go. sorry about that. Whenever I had my prompt in there. I didn't have callback to find yet. So the page wasn't fully refreshed. That's why I have that air so I get the result I expected I have my name and I get to So I'm using a function to pass any function and then later call that function whenever I'm ready for it. if I wanted to do the goodbye function. I can say process input and I could pass in. Goodbye.
Lewis Benson: And I hope the paper my name and I might have to do another Refresh on this it looks like
Lewis Benson: and it's asking my name again because I'm invoking the function again. And because I'm using that prompt I'm not globally storing my name anywhere. So it wants to know who I am again. And there I get my goodbye.
Lewis Benson: Does anyone have any questions at this time about the Callback function?
Lewis Benson: So hopefully this is a little bit of decent review on just function declarations in general. As far as this parameter goes again. You can call this parameter, whatever you want to call In our case, we call it callback. You could call this call back. function
Lewis Benson: that would greet or say Goodbye, so really long.
Lewis Benson: Function name, but just to make it clear. This would still work the same. And we have this obnoxiously Long Function name, but It doesn't matter what this parameter is called as long as whenever you invoke the function you're passing a function to do something with that. One thing to know whenever you have a callback function. there are certain parameters that are expected sometimes to be fast into your callback function. And in this case, it's expecting a string to be passed in and so our process input function is passing that string in for us.
Lewis Benson: And in this case, we're not returning anything, but that is something to note for whenever we start looking at the array methods because they require a very specific parameter. They have certain inputs and outputs that we need to keep track of and we kind of need to memorize those luckily mdn is a really good resource for array methods. It's probably the number one reason I visited mdn is to review the different array methods and string Methods to see what parameters is actually required what they return sometimes just the general syntax on them as well because it can vary a little bit from method to method.
Lewis Benson: All So another one we discussed yesterday two days ago now it was the Advent listener. It used The Callback function we created inside of the definition and I'm just going to do this again real quick. I'm going to create a button. inside of my HTML
00:10:00
Lewis Benson: so we have our button. And now I need to select that button. So I'm going to put an ID on it.
Lewis Benson: Call it my button for the ID. And for now, I'm going to remove these invocations, so we're not getting blasted with prompts. And let me grab that button.
Lewis Benson: Better get element by ID. And then we pass in the same ID that we created within our HTML.
Lewis Benson: And I'm just going to add a click listener on this. So it's going to be button dot add eventlistener. It gets two parameters. The first parameter is a string. And this string is a very specific string. It has to represent a JavaScript event that can occur a JavaScript event could be anything. from clicking hovering scrolling
Lewis Benson: focusing basically anything to interact with the page whatsoever is an event. Even waiting if you wait a certain amount of time that can be considered an event. And then the next thing we need is a callback function. I'm going to put the name of a function here. I'm not going to put the actual function just yet. I'm just gonna put it some amen. I'm going to call it And I'm going to Define my on button click. It's not going to take any parameters at this time. And we're just going to Button was clicked. So it's just kind of a little bit of review on how do you add an event One thing I want to notice our note here is this is reference to a function. I want to make that really clear this reference to a function. I don't invoke the function.
Lewis Benson: I just passed the reference to the function. So what does reference of a function look like? Let's actually log the function name on button click. And see what that looks like.
Lewis Benson: So this is the log result here. We see the on button click. We have that little F there that stands for function. So this is what reference looks like. It's basically a function declaration. within our code This isn't the function being invoked. We're not actually seeing this log occur and less I were to hit sources you go back to console. Unless I were to actually click on the button and then we can see that button is click to happen. But this reference right here is the reference to Something to note about references is you can actually pass those to variables too. I could say const.
Lewis Benson: function reference equals on button click and then I could pass the function reference this way. So again, I'm not invoking the function here. I'm just taking that reference and I'm passing it to this variable. I'm taking it's just pointing to the same location and memory. And that's all this references here. this is what it finds when it looks in that location and memory. It just gets that and then if I hit that I get the same results clicking the button still works. We're just passing the reference around so with that I can also. Pass reference to a function without actually declaring a function name. And to do that' going to comment. I don't need to comment that I'm just going to say function.
Lewis Benson: I'm going to say there's no parameters. I'm gonna give it a code block and I'm just gonna do Button was clicked. And let me make that a string so that it doesn't throw an error. And just to make sure there's a little bit of variance here between the two. I'm gonna say
Lewis Benson: reference function button clipped so we can see that difference there.
Lewis Benson: And we get the same result because when you declare function without a name. It's still reference to a function. If I were to console. That right there. We'll get the same result as we were having before. It's just showing me the reference to the function. So whenever you're doing anything with callback functions, you're only passing reference to the function, even though I have the function declaration as my parameter. I'm still passing reference as a parameter. I'm not actually passing a function invocation. I'm going to put this one back.
00:15:00
Lewis Benson: and sometimes you could have parameters here and one of the parameters you might see. Is the event.
Lewis Benson: the event parameter It's actually an object it's huge. I'm just going to log this and show you what it looks like.
Lewis Benson: That's a very common one to pass. So here is the event object. Now we have a pointer event.
Lewis Benson: There's a lot of stuff in here. we can see all of the different things. We have all these different key presses if we were using our keyboard, we could actually track every single key that's pressed on the keyboard. That's one thing to keep in mind too whenever you're install Chrome extensions, make sure they're trusted because they could set up an event listener to listen for your keystrokes. We can see on the screen where I clicked. I was at 56206 for X and Y axes. I didn't hold down the shift key when I clicked we have type click. On this right? Here's a kind of a useful thing too. If we wanted to just see the type of event I could do type and it would show me that it was a click event. Here is our view.
Lewis Benson: Whenever we have this view we can get a lot of information about the browser. So if you have a user click on something you could set up metrics. Maybe you have some sort of commerce website where you're selling products and you want to see which products they're clicking on. And then once you see what products they're clicking on, maybe you want to know what screen size they're on. So here is the enter and enter height and inner width of my current screen size. There's a lot of information in here that you can access and send back to your server for information. So this is a very very verbose object and it does have some built-in message will occasionally use. There's actually a built-in method for when you're submitting a form.
Lewis Benson: default it prevents the page from refreshing because by default anytime you submit a form your page will automatically default. Our refresh. So that's how you would prevent that from happening. And then we have default prevented false.
Lewis Benson: so I just wanted to show you that there is some parameters you can pass with your event listeners and you have the Parameter I've seen some people. They also just call this e instead of event. It's the same thing. It doesn't matter what you call the parameter. You could call it banana. You'll still get the same result as long as you understand what this means. So when I look at my console.log. I get the same result. It doesn't matter what I actually call the parameter. It's kind of like a variable name.
Lewis Benson: So again, you'll see this is Those are the two common names for that or EVT sometimes as well. And then if you wanted to see the actual event you would just say edot. event
Lewis Benson: wait, that was like
Lewis Benson: and we get to click event.
Lewis Benson: So anyone have any questions about any of this so far?
Lewis Benson: And we're still just covering the Callback function aspect to A little bit of review with the add event list Center. and function declarations
Lewis Benson: If you have any questions, feel free to ask them. I don't want anyone to feel like to launch right now. the Callback functions can be a confusing topic. Especially when you start getting nested inside a functions and the stuff can get really quick. here, we have two different functions that are being accessed through one function here. And just by this long callback function that could be greet or say. Goodbye.
00:20:00
Lewis Benson: And then depending on which one we pass in as the one that gets indicated.
Lewis Benson: Okay, so we'll start getting into the array methods now. Since we seem to be having a firm understanding of the Callback function. Again, it's just a function that you're passing as a parameter and that function can be used at a later time by its parent function. for the array methods every array method lives within an array. Let me create a quick array. We'll do a numbers array.
Lewis Benson: And I'll just do one through five.
Lewis Benson: And let's take a look at this in the browser.
Lewis Benson: So here's within the numbers array Because this is a reference type object it gets this thing here added to it called The Prototype comes by default whenever you create an array, we're creating an array literal here using the square brackets. There's another way to create an array where you can say const my equals new array with a capital and you invoke it. And then you could pass in exactly what you wanted for your values and how long you want it to be and everything like that. This does the exact same thing as this this is just a shortcut and they say this is actually a little bit more performant than using this by a couple milliseconds or something like that. So not a big deal if you wanted to use this new array.
Lewis Benson: I maybe used it twice ever in code challenges. But it's not very commonly So whenever you have that prototype would my Rego.
Lewis Benson: I didn't put the numbers.
Lewis Benson: So whenever you have this prototype. Pretty much every object in JavaScript comes with a prototype and again this prototype just contains all of the methods. That exist on your array. So here are the method called at? This just tells you. The index location. This is similar to indexing. The only difference is you can use negative numbers here instead of just a regular numbers what I mean by indexing is like your square bracket notation where you're accessing values through the array. so if I wanted to access Let me just do it in here. I could say at three that gives me four or like I said dot at three and I also get four it's the same thing, but I can also do it backwards with negative 3. And it will count from right to left instead of left to right.
Lewis Benson: So that's one of the methods we have a filter method. We'll be going over this one today. This one allows you to remove certain items from your array without actually modifying the array so that one's pretty useful. Concat, let's just joins things together. It's kind of like your plus operator and a string. Join, this will actually make your entire array into one big string. Here's our push on our pop methods reduces. Probably one of the most powerful but it's also one of the most complicated array methods. We're not going to be going over this one today, but I do encourage you to maybe watch a YouTube video on reduce.
Lewis Benson: 'm just because it is so powerful. One of the main use cases of reduce is creating a sum of arrays if you remember yesterday, I created a loop and I had a function that took him an array as parameters and I had an accumulator variable and I added up all the numbers the reduce method does all of that for you, but the syntax is a little weird so it might take a little time to get used to it. But it can also do more than that. It's actually a very powerful method to Reverse that one just Everything from being to left does exactly what it sounds like. We a sort can get a little complicated. That's another one. You might want to look into on your own maybe watch a couple videos on it sometime. It could take things and make a mouthful medical it can make things be arranged numerically.
00:25:00
Lewis Benson: But it has different build an algorithms that can be accessed through different parameters. So it's one of those ones where? Maybe put it in your notes to learn this one someday the sort method there. And yeah, that's some of the ones we're going to be going over. Today, I just wanted you to be kind of familiar with where these are located. And this is how we're actually able to access these because when we do anything with an array and then we put a dot and then any value after that that's where it's getting these from. So if I have an array. One two three, I could put any array method I want on here.
Lewis Benson: I could say push. And then pass on a new value. We'll put in And four was added to this array. I never stored it into a variable so I don't have access to it. But four is on that array.
Lewis Benson: Alright, so I got my array created. Let's actually get into using some of these now again, the first one I want to show you is for each method since we just gone over the for Loop. And we went over the while loop. That's kind of just line great up with yesterday's lecture. This is another way to Loop but it only works with a raise. It is. Significantly easier in my opinion to use than a regular for Loop if you need to just Loop over something and do something. One thing to note is it doesn't return anything. So if I do numbers dot for each I just need to pass in my callback function. So I'm going to do this outside of the method first. I'm going to give this a function here that I'm going to pass and we'll call on count
Lewis Benson: and then I'm going to create the count function here. This isn't the normal way that you would actually do this, but I just want to make it very clear how callback functions work.
Lewis Benson: So for on count, we're just going to number Times two the number parameter needs to be passed in here. This is one of those things where before each method by default is passing in whatever value. Is inside of your array. So I could also just call this element. Because it's representing each element of my array.
Lewis Benson: It's similar to when we're doing the for Loop and we say for numbers that I represents element Let's see what I mean let me first not multiply by two. We'll just take a look at what this looks like without multiplying by two. And we just get a count of every item in the array. Because I called this element. It's representing the third element and we're just saying to console.log that Again before each doesn't return anything so I wouldn't be able to say array equals Every time this runs it returns an undefined so I would just have a variable that's undefined if I did that. There are some array methods that do return things and that's why I wanted to mention this now.
Lewis Benson: Where you're able to restore that result into a variable for example, the pop method whenever we remove an item from an array with pop it returns. Whatever value is at the end of the array. So on if I did numbers dot pop it would return five and I can store that into a variable if I wanted to use that later and I would have an array of one through four and then I would have a variable that storing five separately. So I want to show you the normal syntax for this now. I'm going to do the exact same thing. But I'm going to do it in the way that you're going to see this whenever you're actually using it. So you'll do numbers dot or You'll invoke for each method and it takes in a callback function as a parameter, and we normally use an anonymous function here so you can say function.
Lewis Benson: You can call it number since every single item in. The array is a number. You can call it element. It doesn't matter what you call this. I'm gonna call it item for now. And then I'm gonna put my code block. I'm just gonna each item And I'm going to multiply these by two as I'm doing it.
Lewis Benson: So let's watch that result. So here's my initial count. one through five and then here is the second array with the more modern syntax. We have two four six eight and ten because we multiplied it is all by two. So our numbers array isn't changed even though I'm trying to modify numbers. I'm just modifying the output of the current element. I'm not actually modifying the array and that's actually a good thing. we don't want to actually change our original array. Especially if we're pulling data from a database that we just want to kind of manipulate temporarily to display it to the user in a more meaningful way maybe at all uppercase a letter. if it's some sort of maybe add all these up and get the average of the value, but we don't want to actually
00:30:00
Lewis Benson: delete every item in our array to have an average. so Modifying the array isn't the best practice. Sometimes we'll duplicate arrays if we need to. We'll get into that with the map method.
Lewis Benson: But does anyone have any questions so far about four each?
Lewis Benson: So this right here? We're passing reference to our callback function the same way we did up above here. Where did I invoke that right here where we put the function name in there? That but here we putting the function declaration in there, but we have no function name. If I did have a function name, I would say on count two or whatever. The function name This is not valid syntax. This will not work so you can't have a function name here. This has to be an anonymous function. More commonly you're going to see this written as an arrow function. To do that you just remove the function keyword. And then on the right side of the parameters you say greater and we're going to have the same result here. This is the most common syntax you're going to run into for callback methods and they may also remove the Pearly brackets.
Lewis Benson: And make this into a one-liner. That's perfectly valid syntax. I gotta remove this extra semicolon now.
Lewis Benson: We can have this all in one line. And then the one last little caveat with arrow functions. It kind of makes these hard to read sometimes but this is a thing you'll see this. Is whenever you only have one parameter, you can omit the parentheses around the parameter. So it looks like So it just tries to make everything very small. If you don't have any parameters, for some reason you have to put empty parentheses with these if you have one ter two parameters. Or sorry if you have one perimeter, you don't need parentheses if you have two parameters.
Lewis Benson: Then you have to have parentheses. So a lot of little roles there. Don't worry about memorizing all those right now. I'm just trying to get you familiar with the syntax so that if you do run into it, it's not as confusing. And with that note there the index is a valid parameter for each method. So let me actually make this back into a multi-line deal where I put the curly brackets in.
Lewis Benson: And I'm going to log the index as well.
Lewis Benson: So I did that as a concatenation, let me put So the index is exactly the same as whenever you're counting from zero. It actually just tells you what element you're on and what the index is of that element. So index 0 we did the item times 2 we got four on index 1 we did item times two. We got six. And so on.
Lewis Benson: So this can be a little handy again to four each is just looping the same way for Loop loops. But it's a little bit shorter syntax. You don't have to worry about setting up your three parts. If I did the same thing, I'm going to actually create a standard for Loop here and I'll have the exact same result as this with a standard four Loop. So the four equal If I is less than numbers dot length. I plus put in my code block. And then I'll say console.log. numbers at I
00:35:00
Lewis Benson: times 2 console.log
Lewis Benson: index it's going to be a string space plus and I'm going to comment this one out so it doesn't run. And we'll see the exact same result. So index 0 we get four index 1 we get six and X2 we get eight and so on. And I want to uncomment that so we have that. so This is each syntax. These do the exact same thing. for each is a little bit more readable because you can name this parameter. so numbers that you could create a varia you could say let item equal numbers at that would kind of give you the same result We could say item now here.
Lewis Benson: That does the same thing but for each is doing all of that under the hood so we don't have to worry about Creating and our parameter again. We don't have to call this item. it And we can call this number here. Because every item in our array currently is a number. If these were Foods then I could call this food item or something like that. So you can name these parameters anything specific and then this index here if I wanted to I could call this I
Lewis Benson: you can pull these parameters whatever you want, but your second parameter is always going to be your index. No matter what. So just something the note there. It's not used all that often. Maybe whenever you get into working with Frameworks, you might use it occasionally to create unique identifiers on something. But beyond that we don't really use the second parameter on. These methods but it's one of those things where you just want to kind of try to remember that it's there in case you do need it. If you forget again anytime you're using a method just check it on run the mdn look at it. Make sure you understand it.
Lewis Benson: Because it might be a while before you end up using these again. Here they're using element as their name. They're using the arrow function. And they have letters in their array. And they're just expecting a b and c all in separate lines like that.
Lewis Benson: And Are there any questions about for each?
Lewis Benson: All right, no questions about for each. So I'm gonna move on to The next array method is called map. So let me bring that up on MDM. The map method is very similar to for each. It basically does the exact same thing except for one big difference. It returns an array. So whatever it does to the item, it actually creates a new array with the modifications to it. So let me show you what that means.
Lewis Benson: I'm going to comment these out.
Lewis Benson: But I'm going to leave my numbers array.
Lewis Benson: For my other ones yet. They're still console out. So we'll keep that numbers away for now. And I'm gonna make a new array. of all of these values, but I want them squared I want to Go to the power of two.
Lewis Benson: I don't think I've showed that how to do that. So that's a good thing to see So'll say I On this variable is going to be the array that we're creating.
Lewis Benson: And we're grabbing this off of the numbers array dot map. And then it requires a callback function.
Lewis Benson: And for my parameter, I'm going to call this each number. So it's clear. What each of these are again. You can call this whatever you want. You can call it element you call it you can call it item. I like to be explicit though with what this parameter means whenever I'm defining these. I'm going to use the arrow function syntax because that's the most common way to do this. And the one thing with map is that it actually has to return something so I actually have to write to return keyword here. And it has to return. Whatever you want to be stored in this array. So Whatever is happening here. Inside of this return statement is actually what's going to be returned. You could do a whole bunch of logic above this you could say each number I'm actually going to do that. I'm gonna create a variable here.
00:40:00
Lewis Benson: We'll do squared number equals each number times times 2 this is how you do a exponent in JavaScript use two multiplication symbols. And that does your exponents and then we're going to return the squared number. so every time this map method iterates because again, this is another loop. It works exactly for each except it's returning these values. into a new array that I called squared So every time this iterates it's going to make a new variable called squared number. It's going to take the current number that it's working with it's going It's going to put it into the squared numbered variable and then it's going to return that squared number variable.
Lewis Benson: Once that squared number variables returned it's going to be stored into whatever index. We're currently working on inside of this Square array. So let's console.log squared. And we'll see the result of this.
Lewis Benson: So here it is. I want to put a little note on this because I want to see On the flags on them. So I'm actually going to make this a string template literal.
Lewis Benson: I'm going to say each. Number this is also stringent literal.
Lewis Benson: So it's going to be an array of strings whenever this is done and it's gonna show me the original number. I'm going to show me the squared value just to make it kind of more clear what's happening inside of this map method. There we go. So I stretched this way out we can see the whole thing on one line. Now we get one squared 2 squared is 4 3 squared is 9 4 squared is 16 5 squared is 25 and we can see all of those listed there as well. So we actually created a whole It's an array of strings. But the original array still exist. We didn't modify the original array at all. And then there's the squared array. So it created a whole separate array. We stored it into a variable called squared.
Lewis Benson: But it works the same way as for each it Loops over the original array. It does some sort of logic to the code and then whatever you return during that logic. we're returning this string here. That's what's stored into each index of the array.
Lewis Benson: Does anyone have any questions about the map method?
Lewis Benson: These can be a little confusing especially with this weird looking syntax here. Some common bugs I see. are With the arrow function for getting As a common one, sometimes I'll see the arrow function and the word function here at the same time. That doesn't work. Another one I see is missing parameters.
Lewis Benson: You forget to put the element or the item if you wanted to call that item. Or in my case. I call it each number.
Lewis Benson: For getting the return statement and the map method is a big one. That's one of the nice things about.
Lewis Benson: the arrow function now Is you can actually not have a return statement if you don't have curly braces? So what that would look like is you would remove We'd have to remove this return statement remove that
Lewis Benson: and then put this all on one line. Remove that extra curly bracket. or that extra semicolon And then squared number. Doesn't exist. So this would be each number. times times 2
00:45:00
Lewis Benson: and that's how you get the same result as a one-liner. Let's take a look at that. There it is.
Lewis Benson: This might not be as clean to read just because unless you understand Arrow functions, you might not realize this as being returned. Whenever you have no curly brackets within an arrow function. Whatever is on this line is actually being returned. So it's just kind of one of those little things where you got to learn the rules. Because we don't The return keyword is happening. plicitly this is called an implicit return. If you were to put curly brackets here.
Lewis Benson: And put this on multiple lines. Then you have to put the return keyword here. This is called an explicit return. It's the exact same logic. It's just different syntax. Again, I know there's a lot of roles with this the more you use it though. The easier it is to understand. Are there any questions about the map method?
Lewis Benson: I'm going to do another quick example with it. I'm going to do some words. And we'll just create another array with words. So let me first create. I'll do a names array.
Lewis Benson: And I do like short names.
Lewis Benson: And will trust even there.
Lewis Benson: So what am I actually do is make this a first names array
Lewis Benson: so we have first name last names. And we can actually do some. Nested stuff like this. Where we would say? full names equals first names
Lewis Benson: dot map name
Lewis Benson: and what we want to return here is the last names At each index. So what I'm going to do is
Lewis Benson: put an eye there. Remember the second parameter and our callback function is going to be the index. and then we'll do return we're doing an explicit return. on name Plus
Lewis Benson: last names at I
Lewis Benson: I think we need to have a space in here as well.
Lewis Benson: And we should be able to all names
Lewis Benson: and what I'm doing is each index represents one of these names. I'm just kind of merging these together. It's not really the best way to merge something together. It's one of the kind of show you though that you can do some logic like this. And there we get John Smith Bob Steele Steve Johnson.
Lewis Benson: And it gave us a whole new array called full names. There's something just to show you that just a little extra demo for you. There any questions at all about map?
Lewis Benson: Okay, I'm going to use the numbers array again. I'm gonna add some more numbers to it though.
Lewis Benson: What the 13 with it? And we're gonna get into the filter method now is a way to get items out of an array without modifying the array. So what that means is the filter method is actually returning a new array. So let's bring that up on mdn.
Lewis Benson: So here they have all these different words and they're going off of the word length. and they're saying if the word has a word length of a greater than six then it's going to be filtered out and then we can see the expected output down here. So we're going to do something similar, but instead of using words. I'm going to use numbers. And I'm gonna filter out all of the odd numbers. I only want even numbers. So we'll say const even nums. equal to numbers dot filter
00:50:00
Lewis Benson: And this takes in a parameter. I'm going to put my arrow.
Lewis Benson: And to get the even numbers I'm going to do an implicit return again. I'm not going to have the return keyword here. I'm going to do an explicit return this time just to demonstrate that.
Lewis Benson: So we're going to return. num
Lewis Benson: mod Get the even numbers only. So what he num mod 2. Modulo is for remainder If you are dividing five into six. 5 goes into six one time it has a remainder of 1 so Five mod six would be one. So let's just Returns the remainder during division. If I do num mod 2 strictly equals zero. Then what this is actually returning here is a Boolean because I'm using the strictly equals expression anytime you're strictly equals anywhere. It returns a bully and when that means is filter is expecting you to return a false every single time. That's how Filter Works.
Lewis Benson: So you need to set up some sort of condition based on the elements in your array in this case. Our elements are nums numbers. And we can see each of those numbers here. That's what we're actually checking. We're saying if my current number. Divided by 2 has no remainder. And then return that number.
Lewis Benson: So let's just even thumbs many comment out that one and this one save a little less noise.
Lewis Benson: and here's our result 2 4 6 8 10 12 We have only the even numbers being returned and we're creating a whole new array. So numbers is not modified at all. but even nums is what I call it.
Lewis Benson: Was created with only the even numbers so we're filtering out the odd numbers. Can somebody tell me how I would filter out the odd numbers or sorry? How would I feel filter out the even numbers now?
Lewis Benson: What would that logic look like?
Lewis Benson: And this time I'll do in implicit return.
Lewis Benson: Does anyone have any idea?
Lewis Benson: It's kind of like a little code challenge there for you.
Lewis Benson: if I want to create a new array with only odd numbers.
Lewis Benson: What would I put in my return statement? It's going to look pretty similar to line 66.
Lewis Benson: We will be using this mod operator here.
Lewis Benson: So if this is equal to zero. That means those are even numbers. To do this as an odd number. It's going to be very similar. We're going to say numb. mod
Lewis Benson: To find out my keyboard again mod.
Umar Z: equal to 1
Lewis Benson: It's still going to be two. But we're going to say is not equal to zero.
Umar Z: okay.
Umar Z: or not
Lewis Benson: Yeah, so it's very similar logic. And this is a really common case for this. That's why I wanted to bring this up finding odd numbers and even numbers with this mod symbol. Is pretty commonly done? So this is how you do it if you ever need to do that for some reason. Return mod 2 strictly equal zero that gives you even num mod 2 not equal to zero gives you the odd numbers. It's very very similar logic. And again, I'm doing two different types of returns here. This This is the Xplicit return they're both being returned. because this one has no curly brackets. It automatically returns without the return keyword. It's going to make that really clear. And also these are optional.
00:55:00
Lewis Benson: Pretty or…
Umar Z: to basically It's very using Boolean function,…
Lewis Benson: put them back in.
Umar Z: right Boolean logic a true or false.
Lewis Benson: Yes, Which the filter method has to return a Boolean no matter what you're doing in the logic The Returned result is going to end up having to result as a Boolean so you could do all kinds of stuff here You could be checking for very very Niche edge cases. Maybe you're doing this you're searching an entire database for a specific user and you only want to filter out that user's comments that have certain say profanities in it for some reason or another. And as you're filtering through that you might have 30 lines of logic here. do something to numb. Do this is cut pseudo code something else to Keep working on numb.
Lewis Benson: Check the result.
Lewis Benson: And then we're at the end you ruined up returning that result. So you could have hundreds of lines of code here where you're doing all kinds of Math, or checking it for if it's some sort of doing different times of concatenation filtering things out like doing all kinds of stuff there. And then in the end you just return a Boolean. And then whatever bullying is returned, if it'll add that value. Whatever. This gets automatically added to that new array if it's a false that value is skipped. It's not added to the array. And it doesn't leave an empty space for it. So whenever I didn't do the odd number console log.
Lewis Benson: So whenever I console.log this out, we now have all of our odd numbers. And we have all of our even numbers. We have two new arrays for that. Plus we still have our original numbers array. It is not modified. does anyone have any questions about filter?
Lewis Benson: I've got a couple minutes before the break. So if you do have any questions, feel free to bring those up.
Lewis Benson: filter for each map or any other method that you might have seen and just are curious about
Lewis Benson: All right, I'm gonna start the 10 minute timer for our break. When we come back, I'll do a little bit more practice with these methods. Once we are done with that, we'll roll into reference versus primitive types. I've grazed over this from the beginning, but I haven't really dove into what this means.
Lewis Benson: the reference versus primitive type It's not the most crucial thing to understand right now. But I do want to introduce it because it can make your life so much easier when you do understand it. It'll prevent a lot of bugs down the road. But if you never understand it, it doesn't mean that you can't develop in JavaScript. So it's one of those things where it's A very very good nice to have but we do want to cover that just so that you're familiar with those. Especially for technical interviews. I must start 10 minute timer. And when we come back, we'll start back into some more practice on those methods.
01:05:00
Lewis Benson: All right, welcome back.
Lewis Benson: So we're gonna do just a little bit more practice with these methods try to come up with some. More realistic examples where we use some of this stuff make it a little bit more interesting as well.
Lewis Benson: Before I do does anyone have any questions?
01:10:00
Lewis Benson: Okay, so I'm going to get started again. I'm gonna create an array. This is going to be an array of people. We got our first names there. We do this a little bit differently though. Typically when you're dealing with data. pretty much in any programming language You're going to receive this as an bject. Or a dictionary or in Json format at all. Pretty much means the same thing. So this is going to be an array of objects in this case. So we're gonna have
Lewis Benson: name And this is going to have a string Alice. We're going to have an age.
Lewis Benson: 25 for that
Lewis Benson: and we'll do one more. Just so we can get a feel for how this works. And again, this is a fairly realistic example. Of data you would see. Maybe a little slim compared to what you get, but this is a lot like what you're gonna Retreat from say an API or from a database. You're gonna have data that's broken up as an array of objects. So then you want to access those objects out of that array. So let's make an array of names based on these objects. So we don't want to have the entire object remember objects aren't iterable if we want just an array of names what we can do then is And create a variable It already have one called names first names. We're good here still. And we could say people.
Lewis Benson: dot map
Lewis Benson: one thing to keep in mind every item in these parameters is representing this entire object now. So when I say person here. Person is referring to this object. So name person dot age. That's the kind of results we're going to be looking at. So I'm going to do this as an arrow function. Within implicit return so remember if I had curly brackets, I have to use the return keyword, but because I'm not including. Curly brackets I can say person dot name. This might be a little weird to look at. but again person It's representing each item in the array. So the entire item in the array. Is this object?
Lewis Benson: And because the item in the array is called person we can do Just to kind of show the difference and what this would look like for Loop. I'm just going to do that real quick. So we'll do let I equal 0. if I is less than people thought length
Lewis Benson: We'll do an i and we would want to do people at I
Lewis Benson: Because this isn't a for loop I actually have to create an array outside of here Ponce names for Loop is equal to we need an empty array whenever you're for Loop because it doesn't return anything. We have to create this container. so we can just push these in now we can say names for Loop dot push
Lewis Benson: and people at eyes gonna do the entire object. That's not what we want. So we want to do people that I name.
Lewis Benson: So this is the same as this.
Lewis Benson: Same logic, but you can see the map method gives you a little bit more power here instead of having to create this empty array container. We're doing that with this variable here. And instead of having to push each item in we're doing that with the return happening here. So this is happening all in one line for what's taking four lines here and imagine if we had a lot more complex stuff happening. this for Loop can get really hard to understand where the map method it's all in one spot. So it's really easy to kind of just look at it in a glance and understand what it does and it's also pretty easy understand that. This is an object because we see this dot notation. If I were to just glance at this I'd say Okay person's an object that's being passed in so this people is an array of objects like I could deduce that based on just a little bit of logic here. I can see that here as well.
01:15:00
Lewis Benson: But it's not as clear that people is an array sometimes. because I might not be what we expect to be at a glance. So I might have to analyze that one a little bit further so we have our map method. I'm just going to go into the browser. I wasn't the browser.
Lewis Benson: Remember browser go. And I'm gonna type in names.
Lewis Benson: And there's our three names out of that object and to see the original one. It was people. We have an array of objects. We didn't modify the original. So we just wanted to get the names out of here. So we did that with that for Loop and then with the map method and then we can say names for Loop and we can see we have the Does the exact same thing? It's just done differently.
Lewis Benson: Does anyone have any questions so far?
Lewis Benson: All right, so I'm gonna use this same array of objects and I'm gonna do the filter now
Lewis Benson: I'm going to create an array of just gonna say adults. I'm just gonna use this example just because the variable name was easy and I'm just gonna say anyone over 30 is an adult basically. people dot filter and pass in the person again and again I could call object as well if I wanted to because it's representing this entire object. So actually for this one, I'm gonna call it object. I could call it person. It doesn't matter what I call it. It's a temporary parameter. This is a function declaration right here. And this is a parameter and a function. I'm just try to keep that in mind whenever you're using these. I see some people get hung up on the names. so object dot age
Lewis Benson: is Greater equal to 30.
Lewis Benson: And let's take a look at that.
Lewis Benson: I suppose adults wrong. Here we go. So we only have two items in here now. But let's take a look at the original. We have three items. So we filtered out one of the objects. We didn't modify the original array, but we did create a new array. With the filtered items that we were trying to get. And that's another realistic use of filter where maybe you only want to have a certain age. appear Or maybe you could have literally any trait in here any property that you're filtering by. Anyone whose name starts with B. You don't have one result. You could use anything as long as you have data to go off to filter.
Lewis Benson: It's also good for commerce if you're going to filter by deals filter by categories. Maybe you have a weather application and you want to filter you got a lot of weather data for a whole lot of areas, and you just want to filter by a single area. But you don't want to lose all of your data. The filter method is perfect for that.
Lewis Benson: Going off of this. We have an array of adults. I'm going to map over that because I just want to get the names of the adults now, so I'm going to say adult names equals adults.map and we're going to pass in the Arrow function And adult dot name.
Lewis Benson: So again, I can call it item element. I can call it whatever I want I chose to use adult. Because it's actually representing what the item is. I try to make it a descriptive as possible to make this more readable using object here isn't the most clear. It's giving us the data type. This is one of those things. It's kind of a little rabbit hole there. I'm going to go down. But whenever you're naming your variables and your parameters, if you name them the data type, you should always name everything with the data type in the name. You should do that everywhere in your code or not at all. You shouldn't have halfway do that. If you're gonna say that these are objects.
01:20:00
Lewis Benson: And then maybe somewhere else you're gonna say these are strings or these are numbers then you want to use those data types everywhere in your code or just don't do that at all and use a more descriptive name for example person adult for that. So it's like a styling guide. You don't want to cross styles with two different versions. So again, it's kind of A little caveat or of we call tangent. I just wanted those little things that we look at so I should have an array of adult names now only the names not the entire object. So let's take a look at our console.
Lewis Benson: And There's our original people. So these are objects now we have an array of strings. So that's filtering and it just gives us a little bit more of a realistic approach there. And then I'll just do one more just so we can recap on people. are sorry for each we people thought for each. I notice I'm Somebody tell me why I'm not assigning this to a variable.
Lewis Benson: with anyone remember
Lewis Benson: so for each isn't being assigned to a variable because for each doesn't return anything. It doesn't create an array. It just does something a certain number of times. It's basically a for Loop. for arrays
Lewis Benson: So just keep that in mind whenever using for each if you're trying to get a new array. You would have to create an array outside of the 4-H and then push all of the data into it. So in that case you might as well just use map.
Lewis Benson: There got a little string. I don't need to return anything. I can actually put this in curly brackets. because again the for each method doesn't return anything even if I have a return statement.
Lewis Benson: There we go. I got my curly brackets, but I don't have the return keyword here because it's pointless. Before each doesn't return any values other than undefined.
Lewis Benson: there are my results. with the 4-H before we move on to reference type versus primitive type. Does anyone have any questions? anything at all about these array methods there are hundreds of array methods. There are many videos on YouTube just explaining one array method at a time. I encourage you to watch those. Study them learn them. They're very very useful, especially for technical interviews. It's something that You want to memorize as many as you can. The better you are with methods the more solutions you'll be able to come up with later for not just coding challenges and Technical interviews, but for actual real world problems as well.
Lewis Benson: Being able to think of a solution as a lot easier if a one-line method that does the entire solution for you.
Lewis Benson: any questions
Lewis Benson: All right. I'm going to create a new file. For this thing again understanding reference versus primitive not the most crucial thing, but it is important enough that I want to go over it.
Lewis Benson: Just do a rough.js and I'll include that in here.
Lewis Benson: f I'm actually just going to comment this one out.
Lewis Benson: Just so we only have the one file. We'll put a u strict here.
Lewis Benson: And get our Proof of Life.
Lewis Benson: Yeah, I've got our It's working. So reference type versus primitive type does anyone remember what A Primitive is? This was day one of JavaScript long time ago. weeks ago Has anyone remember that? We went over about five different primitive data types.
01:25:00
Lewis Benson: So we had several different Primitives we had. the string
Lewis Benson: the Boolean
Lewis Benson: the number
Lewis Benson: those are the three main ones. We also have undefined. null
Lewis Benson: there's one called a symbol. We didn't go over that one because it's very rarely used. But it does exist. It's basically a way to have an identifier. It's typically used with maps, but it's not something that you really need to worry about right now. And so these are the main Primitives that you want to be aware of so. We have our string our Boolean our number undefined and null. Those are the primitive data types. And the reason this is important is because with reference types versus primitive types, you'll have different behavior when you're trying to modify your data. And it can lead to bugs that are unexpected if you don't fully understand this. And you could be sitting for hours trying to figure something out and then it's just a primitive versus reference type issue. So I'll show you what I mean.
Lewis Benson: So if we assign a reference type variable could be a function. It could be an object. It could be an array. We're going to start with an object. So we're going to say let person one will do Alice
Lewis Benson: and let person to equal person one So, what did I just do here? I created an object. I assigned it And then I took that variable. And I assigned it to another variable. so what I'm actually doing. Is I'm creating this object. It's storing this object Somewhere In my computer's memory Once that's created the location and memory never changes. So whenever I'm assigning this to a variable, I'm not actually assigning this object to this What I'm actually assigning is it's reference in memory. So wherever this object lives it's being stored in this variable.
Lewis Benson: Whenever you access to variable. It's kind of like having an address to your house. You put in that address to your GPS. It goes to there and you're at the address. So it's the same thing here. We're putting the reference to the ject location here. Not the object itself. So, why does that matter? Why do we care? if I were to do something like this. person, too dot name equals Bob
Lewis Benson: person one thought name
Lewis Benson: let's see this result. I changed person 2 but person one got modified. So this is what I mean by you could run into bugs down the road because We're not changing the actual object. So whenever I'm modifying person two, I'm also modifying person one because this is it's referencing the same object. Because whatever location and memory is that's what's being stored on the variable. Not the object itself.
Lewis Benson: We could do the same thing with arrays. Let me do that here. And that's also the reason why you can use const. whenever you're creating an array and an object because you're actually storing the location and memory. To the variable not the ar or object itself So we can say const equals array 1
01:30:00
Lewis Benson: And these are both the same location and memory. So if I say array two dot push and we push the number four. and we check console.log of array 1
Lewis Benson: it's the same array so we get one two, three four. So I'm modifying. Only one array there's only one array in my memory. But I have two variables that represent the location of that array. So that's important to know and understand.
Lewis Benson: it's one of those things where you're trying to. Change a value without changing the original. And you accidentally change the original because you changed through reference that could run the problems. let's try the same thing. with numbers I will do let numb one equal 10
Lewis Benson: latinum to equal num1
Lewis Benson: num two equals 20
Lewis Benson: number one anyone want to take a guess on what this log output is going to be for number one.
Lewis Benson: So we're doing this a very similar process here. They want to have a guess.
Lewis Benson: Yeah 10 I see 10 in the chat. Let's take a look. And it's 10. And that's because this isn't a reference. to memory This is the actual value being stored in the variable. So that's what we're talking about with reference versus primitive. Whenever you create a primitive variable. That actual primitive variable is what gets stored inside of the variable not a reference to it. So even though we assigned number one to be number two All we did was say number two is going to be 10 online 23. But then online 25 is it no number two is actually going to be 20 that has nothing to do with number one because number one is still 10. We never reassign someone.
Lewis Benson: and that's an important distinction whenever you're dealing with this if you wanted to modify number one, and you had number one assigned enough at some point and you thought that would change it. You're gonna have a bug in your code if you go that route.
Lewis Benson: Let's do it with a string now. str1 equals
Lewis Benson: Hello.
Lewis Benson: and str2 equals I need a letter.
Lewis Benson: Str one
Lewis Benson: str2 almost world
Lewis Benson: and then we'll log stream one. So again, Were modifying string 2 we assign string two as string one. And we're going to log string one now. And it's still hello. It didn't change it to world again. That's because the string is a primitive. And we're storing the actual string on the variable not a reference to the strings location in memory.
Lewis Benson: Alright, so I'm going to get into a little bit more advanced concepts with this. This is the amount that I would want you the advanced stuff pay attention, but at the same time. It's not crucial if you're a little confused, so don't worry about it yet. It's one of those things where it'll start to click later on if you don't fully understand it, I'll just yet. so to first off I'm going to go into the spread syntax, so I'm gonna create a person. Which I think I still have one you have person one.
Lewis Benson: So I'm going to create a variable where it actually clone that object. And this is to prevent modifying the Reference if I wanted to modify an object, but I don't want to modify the original. This is how you would do it. So that doesn't start A new object so we can see all this one spot so we'll have an original person. Equals name or with Carol?
01:35:00
Lewis Benson: and let I'm going to create a clone of this person.
Lewis Benson: And to do that let's say this is thousands of lines in this object. You don't want to retype it all out. So you type Original person and this is the spread syntax. You'll sometimes hear this referred to as the spread operator. to me it's funny. There's a post on stack Overflow about it where this is not an operator because it doesn't evaluate in an expression format So they call We want to be really spread syntax. It doesn't matter what you call it. It just know that it creates a shallow copy of an object or an array. That's its main purpose. So let's look at we'll do clone. Person.name we're going to reassign this to Dave.
Lewis Benson: And let's take a look at the original noun.
Lewis Benson: And we get Carol, so we didn't modify the original object because we cloned the original object into a new object. So we didn't clone the reference in memory. We actually created a new object and created a new reference in memory so cloned. Some is an entirely separate object to original person these both exist independently. It's similar to when we had our map method and we created a new array that way without modifying the original.
Lewis Benson: All So let's get into deep cloning. I'll just show it here because if you don't see the result. Of the shallow versus the Deep then it doesn't really make sense. So I'm going to create an object with a nested object or name. Eve
Lewis Benson: address
Lewis Benson: This is going to have a city.
Lewis Benson: New York country
Lewis Benson: USA All right, so I want to do a shallow copy first.
Lewis Benson: And again, that's just not. complex person and let's take a look at that.
Lewis Benson: So we're not going to be able to see it because we don't have any methods but it wouldn't carry over your prototype methods like we were to have those as well. I can't really get into that right now. But to do it actual deep copy where it brings over your methods. And again, those are stored on your prototype. These are the only ones on here right now, but you can create your own custom ones and Adam.
Lewis Benson: I could try it do complex person dot prototype. equal to function
Lewis Benson: and we'll pass and
Lewis Benson: Do it like that.
Lewis Benson: Let's take a look at the complex person.
Lewis Benson: I spell that wrong.
Lewis Benson: I'm gonna let me add it to the Prototype because I didn't create this with a Constructor function. So I'm just gonna back off on this. It's not that big of a deal but I just wanted you to know if you create method on the Prototype using Constructor functions. They don't copy with the shallow copy was the idea here. I thought I'd be able to demonstrate that. But I will show you how to do the Deep clone in case you need this again. This isn't that important, but it's one of those things where you'll run into this eventually and you'll know the difference between it. Based on this explanation, hopefully. So to do a deep clone person. It's a more complicated method. You'll do Json dot parse.
01:40:00
Lewis Benson: Json stringify
Lewis Benson: and then you pass in the complex person. So just to kind of show you the difference here. We'll do a console.log.
Lewis Benson: So we don't see a big difference between these two. But under the hood, there will be a difference whenever you have built in methods. Actually this one. Has two pretty no it'll be in here.
Lewis Benson: So I can't add anything to my prototype unfortunately, but if I were able to they wouldn't clone over in the shallow copy as the idea. just so you see what that syntax looks like. It's not pretty it's one of those things where if I were to see this it would take me a minute to realize what I'm actually looking at. But I just wanted to be familiar with that. It's one of those things where when you're dealing with references and you need to make copies for modifications. You have to do some crazy stuff like this. Sometimes I got this solution off stack overflow on how to do a deep copy just because I'm one of the demonstrate that are there any questions about the difference though between reference and the reference and primitive types you want to say string?
Lewis Benson: And just one last quick example. This one is the copying of an array. I still have an array up here. I believe yeah, there's my array one. If I wanted to make a copy of that that I wouldn't be modifying I would do. our current copied array equals I put in my array brackets dot array 1 and that creates the shallow copy of the array. Whenever you have that copy, I can modify copied array and it's not going to affect array 1 whatsoever because we made that copy.
Lewis Benson: And that's the biggest takeaway here. as far as this more complex part goes that you need to make copies to make modifications to your objects. In order to not accidentally overwrite them. If you try to create a new variable and assign that to your original variable, you're still referencing the original variable. Even if it's a new variable name.
Lewis Benson: Does anyone have any questions at all?
Lewis Benson: This is one of the things where it doesn't hurt to kind of explore on your own. It's not the most crucial topic right now. But when you start running into these kind of bugs, it does help figure out what's going on. So you're not spending hours trying to find out why your new variable is modifying your old variable. And that's the biggest takeaway there. I'm going to get into the assignment now.
Lewis Benson: We bring that over to the screen.
Lewis Benson: And we got that weird going on again. Let me just fix that real quick.
Lewis Benson: subtracting me crazy
Lewis Benson: That should do it. All So for this assignment, we're doing the Create Here's the repository name. Call back array methods. We're going to clone that down. And you're going to create a Javascript file within that you're gonna create an array of numbers. and use the map method and within the Callback function modify each element. So you can multiply by 2 as an example. You could try out the squaring thing. Whatever you want to do just modify each one.
Lewis Benson: And log the new array so you'll actually have to log that. Next is the Filter elements of the array I showed you how to do the even numbers that's an example you can use. So this one should be pretty straightforward if you did any following along with me. And for each method you're going to iterate over an array and perform an action on each Such as log the element to the console. And then you'll just ACP your changes and that's it for today's assignment is just those three methods. So if you did fall behind it all on your previous assignments, I'd ask that you do this one first. And then go back and start working on some of those previous assignments now and get caught up on them. Does anyone have any questions about the assignment?
01:45:00
Lewis Benson: And as always if you do have any questions while we're in the breakout rooms. Just reach out and we'll get those resolved. I can walk you through anything that you're stuck on if you're having any bugs, let me know. If you're stuck. For more than say five minutes and a breakout room. Definitely ask for help. Don't be stuck. And it doesn't do you any good to be stuck carrying the time that the instructors and Pa's are available.
Lewis Benson: All right, I'm gonna open up the breakout rooms. Let me stop the recording now.
Meeting ended after 01:46:39 👋