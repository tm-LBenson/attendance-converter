nia-amar-wfe (2023-12-13 19:30 GMT-5) - Transcript
Attendees
Brian Kimbrow, Daniel Perez, Elgin Sharper, Gregory Robertson Jr, Iris Coats, Krystal Jefferson, Lewis Benson, Lewis Benson's Presentation, Umar Z
Transcript
This editable transcript was computer generated and might contain errors. People can also change the text after it was created.
Lewis Benson: All right. So for today's little lecture, I'm gonna dive into apis a little bit. I'm not expecting anyone to be an expert at apis after this. I just want to give you a very high level kind of fast-paced overview of what they are and how you can maybe use one in an application. It's an acronym API. It stands for protocol interface. That probably doesn't tell you much but what it actually means is you can have a computer talk to another computer and use that information within your application somehow. The one I'm going to be going over here is actually a weather one. If you couldn't guess by some of the starter code. I already started here. I built this HTML just because of time constraints the very deep topic. Okay, I could go on forever building all this stuff out. So I tried to save a little bit of time there.
Lewis Benson: But I do want to give you that high level of what this is and how you could use one. There are many different ones out there weather apis are great. Because a lot of the information is actually coming from sensors all around the country. They have temperature win sensors. All this different data is being collected and stored within a database some And what the API does actually goes to the database grabs all of that data and allows you to view it in a meaningful way so that you can actually use it on your application.
Lewis Benson: So that might sound a little bit confusing right now, but I'm just gonna go ahead and start building this out just to kind of show you what it looks like before I do most apis do sign up. They do require some sort of cost. There are a lot of free ones as well. The one I'm going to use has a free trial involved and the way it works is once you use it so many times it'll shut off for a day or two and then after the day or two it resets and allows you to start using it again, so it prevents a high level of traffic and keeps it on the educational side. So let me bring over a browser. I think I actually already have one ready here. I mean
Lewis Benson: Yeah, so This is What we're going to do is make it so I type in a zip code and it just going to return some weather data. Let me go to their website. So the one I'm using is called weatherbit. I'm just gonna do a search for that. It's not a top result. Here it is this bit free weather API.
Lewis Benson: And I'm going to sign up. I'm just going to show you the whole process on how this would work.
Lewis Benson: I'm just gonna put in a random user name. We need a password. Just put in a random one for this and then an email. Let me see if I can use.
Lewis Benson: this for an email
Lewis Benson: I'm putting a bunch of periods in the middle of my email and what that'll do is a Gmail actually creates multiple emails with the same email address, but it actually creates it with every single version of a period throughout so I've already created an account on here once and I just wanted to show you the process of signing up. So I'm going to try to trick it just by putting some periods in the middle of my email. These are valid email addresses through Gmail. It's just something they do. In case you weren't aware of that. They are aware of this apparently, so they know that trick some page. Sometimes you can get away with that oftentimes. I'm just log in with The once you get signed up, you'll get into the login process and then it will look the same from there.
Lewis Benson: So the way this works is I'm on their dashboard right now. Let me get back to their home page. I'm going to click on dashboard. you can see where we're at. This API key right here is something that you want to keep secret. I know I'm sharing it to everyone right now and I'm going to end up putting this on YouTube as well. So I'm gonna have to actually go in and change this. Otherwise this API could become useless. One of the things about this is up here. We can see him in the free tier.
Lewis Benson: If you were not any free tier and this API key became public for example, you accidentally shared it on GitHub. Somebody could end up costing you thousands of dollars. They could hit your API millions of times a second and every single usage would cost you money. So this is something that you want to treat a credit card number again. This is on the free plan. I'm not worried about it. If somebody exceeds my usage a little do is make my application no longer useful. It'll just not work for Three days. It looks like or not 50 calls per day so I can use this API 50 times a day. That's the limitation for the free tier on this. So let me go ahead and put this in my file. I'm just going to copy and paste this as a string into my JavaScript. So I have reference to it. Later. I don't need it just yet. But I will need it later.
00:05:00
Lewis Benson: And I'll just make this a variable.
Lewis Benson: and I did this as all capitals because this is a typically constant that are going to be primitive don't typically Change so this is going to be an all caps. It's just a convention thing. Because it's a primitive data type and a constant. Next thing I'm going to go into their documentation and the documentation is the most important thing with any API because every API is going to be different. I want to get seven day forecast. Let's see what they have.
Lewis Benson: They have a 16-day forecast here. I'll use this one. So just documentation. They do have a Swagger UI. This is another version of documentation. I'm gonna use their normal documentation though. The base URL is how you actually access the API. So all you have to do. This is saying it's supported method as a get you could actually put this in your browser. And it says it requires the key as a request parameter. So actually just show that real quick what this looks like when you send four data from an API. So if I put this here I put a question mark to symbolize a query anytime you're doing a query it requires a question mark and I believe it was key equals key so to be E equals
Lewis Benson: and again, I'm not too worried about you being a master of how all the syntax works right now. We will get into these more later. I'm just giving you a high level of how these kind of work in case you come across one or want to use one. You'll be able to pick it up pretty easily. So I'm just gonna send that. I forgot to put in another parameter.
Lewis Benson: The language is optional. I need some sort of search. I'm going to do this by postal code because that's what I'm using. And we'll just throw this in here.
Lewis Benson: And my first parameter is key equals. So if I want to add another parameter, we put the ampersand. And I'll just paste that right in there.
Lewis Benson: And here's what the data looks like coming back from an API. This isn't the prettiest looking. I actually have a browser extension on my other browser. Let me bring that open real quick. To see if we can get a better view of this.
Lewis Benson: So it looks like a JavaScript object except notice the keys have quotes around them. You can do that in a JavaScript object. This is Json data and your JavaScript can interact with this really easily and access all of this data and look how much data is coming in from all these different sensors. It's just grabbing all of this information from this 27601 area code. And it has all of the information needed for a weather application. We can see sunrise this is seconds.
Lewis Benson: This is in our milliseconds. I think something like that. You have to convert just to actual time. But JavaScript has methods for that already built in if we were going to use that. Now we're going to keep it pretty simple. But I just wanted to show you all of the different things. You can use. It. Looks like we're in North Carolina. Here's the longitude and latitude for that am sorry the postal code. So this is all the kind of data you can get and again you can just plug all of this into your Dom just by using this URL here. because this is a get request you can just access this into browser like this. Let me go back to my other one again. just the reason I went to that brows because I have an extension which makes this a little bit easier to read. This is all machine code. So it's not supposed to be human readable. It's supposed to be read by your computer.
Lewis Benson: So I just wanted to show you how this works in general now. I'm actually gonna build out the JavaScript and we'll get a working weather API whether application using the All right, so we have the API key next. I need to put an event listener on my search button. So that is With a ID of search button. Let me go to This is search button here. I want to put a clicklistener on this. I'm not inside of a form element. So I'm just going to put a click listener on my button and then I will select this input element and get the value out of that and use that to update the same URL that I'm passing in here.
00:10:00
Lewis Benson: And I'll show you how all this works again. This is going to be kind of fast-paced just because time constraints you're not going to be an expert at apis by the end of this. I just want to show you what they are and how you can use them in general if you wanted to explore this more before we get into level two. Feel free to watch some YouTube on it. We will be doing a full lecture on apis later. This is just a high level. Let me get into the actual application though.
Lewis Benson: So we need to select that button. So I'm going to do document dot get element by ID. And we're going to pass in search. button And I'm just gonna add my event listener. I'm gonna chain it right onto this. I'm not gonna put this into a variable and then add the event listener to the variable. This is called method chaining. It's a pretty common practice especially for event listeners because after I'm done with this, I don't need to access this button again so I can do all this. and one line I'll put my callback function. I'm not going to need to prevent default because I'm not inside of a form, so I'm not submitting anything. And we're going to add in a zip code. So the ZIP code I'm going to be getting from my
Lewis Benson: four or sorry for my input element and the input element has an ID of zip code. So I'm just going to select this and access its value and I can do all of this in one shot as well. I don't need to be creating multiple variables for this. So we'll create a zip code variable. equals document dot element by ID I'm going to pass in zip code.
Lewis Benson: So it was the name of my ID and we need the value of that. So I just chain on value at the end of that and that should give me the value of whatever is in that form. Let's test it real quick. Make sure it's all working.
Lewis Benson: Oops I did that as a string and seems to be a variable. There we go. So I'll put it in one five five five. Let me do an inspect before.
Lewis Benson: And we're getting the result of 1555. So that seems to be working so now we can pass that into our URL As what we're actually searching for so that's the next thing I need to build out as my URL. So I'm actually going to go back to my browser. grab this URL here
Lewis Benson: And again, I can also get this from the documentation. Let me show you where that's at. If I scroll away to the top right here is the https URL. This is the one I would prefer to use. It requires us to have a key parameter. And again, I put a question mark in and then say key equals and put in my API key. This is an optional one for languages. I'm probably gonna add this units one in as well. Just because I want to be in Fahrenheit and I know by default it's in Celsius, so we don't want to be trying to convert that. I'm from the state. So I don't really know of what Celsius temperatures look like in comparison to Fahrenheit all that well.
Lewis Benson: And we also want to use the postal code parameter here. So I just look at what they have for how to use it and we can see and postal code equals and then they put in the postal code and then they added another parameter to this and Country equals us. So I'm going to use both of those and I already have those in that URL that I grab so I'm just going to create another VAR. Here called URL equals. I'm going to use back text because I'm going to replace the values in my URL with actual variables this ZIP code. is going to be the variable zip code
Lewis Benson: I'm going to replace with. My API key variable. I have an extra Ampersand there as well. So that would have broke things. dollar sign curlies something to note is you don't want to post this as public code on GitHub. If you have an API key embedded with it. I just did that wrong. If you have an API key embedded within your application, we're going to learn a way to secure API Keys later using servers as a proxy and you'll have a back end which handles all of your API requests. So you can keep this safe. You don't want to just have this out there. If I were to push this to GitHub actually get Hub would be like we found an API key in your code. You might want to fix that because that's a big problem again, it cost you a lot of money if they're out in the public. this one won't cost me anything just because
00:15:00
Lewis Benson: it'll just shut off and then my applications broken for a day. So there's a method in JavaScript for accessing requests through an API. It's called Fetch. So just type in Fetch. And fetch whenever you're get request only requires one parameter and that is the URL because I have that as a string already it will then get request as if I were typing this in my browser URL thing. It'll send that there. And it will retrieve all of that information. So I'm going to use. What is called the?
Lewis Benson: Sorry, I lost my train of thought every second. I'm going to use What's called the dot then syntax. I'm actually going to put this into. a separate function this stuff here. I don't want to.
Lewis Benson: Let me see how I just wanted to see how I can actually approach this Making this too messy.
Lewis Benson: So what I'm going to do is actually create instead of having my zip out in the open like this. I'm going to create a function that takes in the zip as a parameter. I think that'll make this a little bit easier. And a little bit cleaner as well. So I'm going to call this function.
Lewis Benson: fetch weather data This is going to take any zip code as the parameter. Rather than doing all of this inside of my click listener because everything is related to The Click. It's just doesn't really make sense to have it all there. So let me put
Lewis Benson: all of this down here
Lewis Benson: We still have our ZIP code here. And what we'll do is once we do the click, we'll invoke the fetch weather function. Like that, that'll make this a little bit simpler. So this is only doing one thing and then this is only doing one thing that's a better practice. So the dot then syntax on the fetch. This is a function that takes time we call these asynchronous functions or
Lewis Benson: you can also use callback functions to do this. And there's also a newer syntax called async await. I'm showing you the dot then just so you have an introduction to this now. It's a very common thing you'll see dot then requires a callback function. And what we want to do is we want to call this fetch. And then whenever this returns is going to get past into the dot to drag that the dot then will take in a parameter. And I'm going to call this response because that's what's coming from the fetch is a response. And as we can see in the browser, I bring that back up. This machine code needs to be turned into proper Json. It's currently just a string of Json. It's not actually in Json format here. It's not being parsed as Json is being parsed as a string.
Lewis Benson: Even though we don't see quotes on it, that's just the way the browser handle strings. So to turn it into Json. I'm just gonna say response dot Json. And that's a method that will just take that string and convert it. And once that's completed we're going to say then we're going to do something else and each one of these takes It to get a response from that API. It takes time to convert it. So it'll wait until this one completes then it will do the next operation. That's what this kind of the syntax kind of means. It'll take whatever is returned from this function. Which is going to be our data from the API so I could call this whatever I want. I'm just gonna call data because that makes sense. another function
00:20:00
Lewis Benson: I could log the data here.
Lewis Benson: And anytime you're using this dot then syntax. You need to end it with a DOT patch. The dot catch is if something went wrong during the operation. It will retrieve an error. So I'm just going to pass air in here again, you can call these parameters whatever you want to call them. I always just do what makes sense. I've also see quite a bit people just passing e there for air that could get confused with event. So I'm just going to leave it as air just so it's very clear what this happened here. And then I'm going to do a console dot error, which is the exact same thing as a console.log, except the logs it in red. and I'll just say
Lewis Benson: I'll put in a string air fetching data. And then I'll pass in the actual error that is coming from this parameter here. So that is it for the syntax on this. I know this looks really weird. It's really confusing. We will learn the newer syntax when we actually cover apis in depth. And it'll be a little bit easier to work with so hopefully that'll help out with that. Let's go ahead and see if this is working. Let me go to here.
Lewis Benson: Search and here we got data from the API and there's the data we can see that and is it a good way to check and see what the data looks like? We can see that it's in an object and then inside the object. There's another data property and then within that data property we have an array. So that's what we know we're working with. So that's how we want to build out our Logic for how we're going to render out all of our cards. because this is an array we can render out a card for each day. So let me show that. I'm going to create a display weather function.
Lewis Benson: And it's going to take in the data from our API as a parameter. And I have this. Item Where's that weather cards? I'm gonna select that and this is where we're gonna plug all of our data into it's going to land in here whenever being rendered to the page. So let me select that container.
Lewis Benson: Argument dot get element by ID.
Lewis Benson: And I'm going to be using the nrhtml and what I want to do is every time we call the API. We want to clear all of the data out of there in case there's cards that have been generated from a previous one. So we'll just do that by saying enter HTML equals an empty string and that'll just delete all of the cards that we've generated on a previous request.
Lewis Benson: And then we want to take data and this is from our parameter here. And we know when we looked at the data in this console.log we've seen that data has a data property on that. So it's data. And then we have I'm going to oops. And we use for each Loop, which is the same as for Loop except I can pass in a specific variable that represents each element within the array. our callback function We'll be using an arrow function for that. And then I just want to create a card. I'm going to do all of my HTML within JavaScript as a ring template literal. This is a really cool way to build out HTML and JavaScript. You can actually write HTML in here. And render out the entire thing. So our weather card is going to be a string template literal. I want to make this multiple lines.
Lewis Benson: I'm gonna start with a div I cap locks. A div and I want to give this some bootstrap. We'll do column medium four. And a little bit of margin bottom so whenever it runs the multiple lines it pushes it away from the other lines. And then we close that in.
Lewis Benson: So this is our outer container. We need another div.
Lewis Benson: and I'll give this a class of card The formatting is not going to be pretty here for a minute. another div
00:25:00
Lewis Benson: This is just the bootstrap stuff. We're going to give it a class of.
Lewis Benson: card body
Lewis Benson: And then within all of these containers now, I finally got all of our stuff laid out the amount of containers. we can actually start putting some content in here. We want to class. of card title this is straight out of the bootstrap documentation. I have it in my notes here so that I can reference it. But if you go to the bootstrap documentation, look at cards, this is the same code that you'll see So inside of the H5, we're going to put in are some actual data here now. I'm going to use dollar sign curly brackets. And I'm going to use the date object. This is something that allows you to create a date within JavaScript and it has a lot of built-in methods with it.
Lewis Benson: And we want to grab the day dot valid date property. And this is a property that was inside of the API. If I open the console logs gone, let me bring that back up. I look inside of here in the data open up. One of these there is a valid date property right here. And this is what it will return. So there's the date.
Lewis Benson: And that's where I got that from so day dot validate. That's going to be the title of the card. And then we can put in the weather description and the temperature so we have an H5. Let's put in a paragraph.
Lewis Benson: And then inside of this let me give this a class of card text. I'll create two of these.
Lewis Benson: This is a little weird doing this in JavaScript because it doesn't give me all the autocomplete options because it thinks that I'm supposed to be writing JavaScript, but I'm inside of a JavaScript string. So it behaves a little funny. It doesn't get me all of my HTML autocomplete. So we had Day thought weather description.
Lewis Benson: this is coming right out of the API if I looked at that console log, I'd find that in there. Make sure I spelled that correctly.
Lewis Benson: We'll get on to Description so this is what the description will look like for this day specifically. I'll just grab that. Yes, it is spelled correctly. and then for the temperature we'll say temp.
Lewis Benson: dollar sign curlies
Lewis Benson: and I'll do day dot temp.
Lewis Benson: And then we can say we can put an F there for Fahrenheit. Let me get the degrees. thing
Lewis Benson: everyone copy that and I'll paste that in right Just search for it copied and pasted it then that works fine. So That should be good. Let me see if my formatting will work now. It's not gonna work. So to format this what I'm gonna do me just try this real quick. Should be able to paste this into my HTML format Let's put it back in my JavaScript. So that's a little better.
Lewis Benson: That looks good enough. The browser can handle the rest from there. and then I have this weather cards container. That's the
Lewis Benson: Div at the bottom we want to just go ahead and put everything inside of the inner HTML for each card. So outside of the string. I want to say whether parts container dot enter. HTML or do plus equals this will concatenate each piece of HTML. It's going to be machine code but the browser knows what to do with it. Oops, and that's going to be the weather card variable above this one here.
Lewis Benson: if I were to log this weather cards container it would just be a very very long string of HTML. That'd be super unreadable because there'd be no empty spaces in it. But again, the browser can handle that. So that should work now all we have to do. is invoke this function inside of our last then statement. So instead of logging it. I'm going to invoke the display weather function and pass in the data just like that. So let's go ahead and try it.
00:30:00
Lewis Benson: And let's see what's happening here display weather takes in the data. Are we not putting it on the document?
Lewis Benson: enter Try that again.
Lewis Benson: And there we go. We got looks like seven days of weather. And again, we're in Celsius right now, even I put the F in there. So I need to switch that over to.
Lewis Benson: We'll put an ampersand. units equals and I'm getting that from the documentation. It says I is for Fahrenheit. So that's why I put units equals I there. So again, I'm not expecting anyone to be an expert or even be able to build one of these out completely right now at least not without a little bit of practice and a little bit of research on it. But you do see how this could be useful on an application. Where I'm now Gathering data from somebody else's computer. And I'm displaying it on my page as if it's my own data, there are so many different apis out there.
Lewis Benson: This one right here is a very basic one for building a weather application. This might not be the prettiest way to display the date. I could tailor this using string manipulation or convert this into a string or not. Use the new date object. I could just pass in the value. There's lots of ways to do that. I would probably turn this back into a string and then slice it so that it shows the day of the date in the year like that and not the time and this extra information over here. I might get rid of this Eastern Standard Time. Yeah, this right here is pretty useful Got we're actually out of time. But I just want to show you a couple more apis that are out there. One of the more popular ones for practicing is the Pokemon API for any Pokemon fans.
Lewis Benson: You can use this for free and it doesn't require an API key. Here's their documentation. All you have to do is go to this. URL
Lewis Benson: And it starts returning Pokemon data. And then if you put in slash Pokemon and a name, you can get more specific information about specific Pokemon. And let me actually switch over browsers here for this. Because this isn't displaying it very pretty. I don't have that browser open anymore.
Lewis Benson: So this is all of the abilities. And how actually You could build your own Pokemon game using this. and here's a URL to
Lewis Benson: more information about the version of the game. I believe there's also a image URL
Lewis Benson: so you could actually create your own Pokemon card game.
Lewis Benson: I'm not sure what the URL was I've used it before and it might be the same one. It's definitely out there. And it might be in this data here somewhere. It just has a small image of the one you're searching for. So this is another example something you can use. There's a Dungeons and Dragons API. This is another free one doesn't require a key. You can just come in here and start manipulating the data and use this to build out your own online best web-based game. So that's another good one. There's also a lot of Google apis. You can use apis that will in an interact with Google documents do Google Sheets and pull the data from those sheets and then add them to your actual application. Does anyone have any questions about apis at all?
Umar Z: And it takes some time until the question starts popping up, It's time to process,…
00:35:00
Lewis Benson: Yeah, I know. This is a lot. again I wanted to give you that high level that they exist.
Umar Z: .
Lewis Benson: If you hear the term, you'll know what they are now and how you can kind of use them. You might not be able to fully build on an application today. But with a little bit of practice maybe a little find a couple coats along YouTube's or wait for the lecture when we get in. I believe it's level three we start getting into apis. We might touch on them a little bit level too. I have to double check the curriculum to see if there's Where we did bring in data, eventually, we'll make our own apis as well. It works the same as how I'm getting this data here will basically generate a whole bunch of data into a file and then we'll make it so you can share that data with another application.
Lewis Benson: So We'll be able to interact with external apis. It's very powerful things again, that's going to give that high level there on that and what they are and how you can maybe interact with these if you're interested in that if anyone has an interest in building an application at some point Yes, Elgin.
Elgin Sharper: Yes, can you go back and show me how you did the Pokemon API? How did you copy?
Lewis Benson: Yes, you just type in Pokemon API. And it's the top link here. And you just interact with this URL? And we can use the fetch in JavaScript to get the same data. I can actually just log all that out. And it will retrieve all of this data here. This is a sample of what the data looks like coming back from the API. So it's just showing you kind of an idea. Let's check out the docs.
Lewis Benson: here is the get request endpoint.
Lewis Benson: There's a lot of different parameters you can plug into this one So if we do ability one on this URL. I plug that in there. it'll give me your turn me some data here again. This isn't a prettiest looking. Let me see if I could put this inside of some JavaScript. I'll do this on top level. We'll do a fetch. I'll pass in that URL. dot then we want to do. Call back function response.
Lewis Benson: Doesn't matter what we call it. But the arrow in and then another response. dot Json and then we want to do a DOT then off of this once we have the data turned into Json we want to Put another callback function. Oops, I forgot to wrap that. And then we put in our arrow and console.log data.
Lewis Benson: So when I go to the browser now and I use my here we can actually see the data. all of the Pokemon that have Dent should be listed here. It looks like some of this is in different languages. Here's some more data. So basically whenever you use these apis, you'll need to kind of explore what's being returned. Every API is going to structure their data differently. So typically I'll do something like this or I'll build out a Fetch and our console.log the data and then I'll just kind of dig through it and see what they're actually giving me and how I can use it. So for example, if I wanted to use this specific endpoint this ability one endpoint,
Lewis Benson: I would go through there and see what's actually being returned. The documentation is great for this type of stuff. You just got to kind of read through this and try to see what it actually returns so how to interact with it. But again, we're kind of out of time on this. Hopefully that answered your question for that. I just wanted to give that high level on what an API is and how you can use it. They're not answer your question, Elgin.
Lewis Benson: So again just if you're interested in using this one just read through the documentation. There are lots and lots of videos on YouTube on how to build out Pokemon applications using this API because it's a free resource. So feel free to explore those practice with it. If you want to build things using apis, it is a lot of fun. It's one of my more favorite topics is using apis to build applications because it's so powerful.
00:40:00
Lewis Benson: I'm gonna go ahead and get the breakout rooms going so we can get started.
Lewis Benson: Opening these up now. I did before I do it anyone have any other questions.
Lewis Benson: Or is there anyone who's currently stuck on what they're working on wants me to come straight to their room.
Lewis Benson: Or if you think of any questions just request me to your breakout room and I'll come in and see if I can assist you with anything open these up so we can get going.
Meeting ended after 00:41:02 👋