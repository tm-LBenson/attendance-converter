nia-amar-wfe (2023-11-08 19:30 GMT-5) - Transcript
Attendees
Brian Kimbrow, Chantrice L, Daniel Perez, Elgin Sharper, Gregory Robertson Jr, Hannah Richards, Iris Coats, Justice Miller, Krystal Jefferson, Lewis Benson, Lewis Benson's Presentation, Reece Renninger, Ryan Arnold, Umar Z
Transcript
This editable transcript was computer generated and might contain errors. People can also change the text after it was created.
Lewis Benson: All right, so welcome to day three week four. We're gonna go into JavaScript functions today. Before we do that I want to do something similar to what we did yesterday to start off. We'll do another code review. This is going to go over the topics we did yesterday. So all I want to do is add meaningful comments to each of these code Snippets, so Does anyone want to start this off and tell me what comment I could put here for the use strict one?
Lewis Benson: And I'll come around the room and call on people too. If you're not sure about a line just give it your best guess and if you're not even sure about a guess then don't worry about it. We'll just move on and whenever we review these topics, hopefully that'll help understand. What's happening here in the code. So Gregory, I'm just gonna go around the room as I see these listed on my screen. Do you want to start off with? What is this line here on line five?
Gregory Robertson Jr: Good on make sure you come cold corrected.
Lewis Benson: Yeah, so this is so that we're using the latest syntax and JavaScript and it prevents pitfalls that JavaScript used to have by turning those off.
Lewis Benson: So I'm just gonna add a code comment here.
Lewis Benson: Okay, Justice you want to tell me what's going on with this line line eight.
Lewis Benson: if you're able to
Lewis Benson: okay, and that's fine Omar. Do you want to help her out?
Umar Z: Yeah, so with that we are commanding JavaScript there. Example string is like a placeholder and in the placeholder that the string will be JavaScript. I mean that's
Lewis Benson: All Yeah, and in the term we're looking for is Plays yeah placeholders like the definition of a variable.
Umar Z: variable
Lewis Benson: Yeah, so it …
Umar Z: Okay.
Lewis Benson: we're just trying to get that terminology embedded there as much as we can. There's so much terminology to learn so I understand and we'll just keep using that as much as possible. So this is a variable declaration.
Lewis Benson: we are assigning To a mutable variable using the let keyword.
Lewis Benson: And typically whenever I'm reading code I often will read this from right to left because the expression is on the right side of the equal sign. And this will get simplified down. So I could either say this variable declaration is doing this expression or I could say this expression is being assigned to this variable declaration. Either way is fine. It's just One of those things where I like to do it from right to left. But you can read it from left to right if you prefer.
Lewis Benson: So next I have Krystal. You won't tell me what's happening online 11.
Krystal Jefferson: 
Krystal Jefferson: it looks like it's on.
Krystal Jefferson: is it where you just
Krystal Jefferson: log in the variable or
Krystal Jefferson: I'm not exactly sure.
Lewis Benson: Yeah, so yeah, you're on the right track. So the log function is going to send this variable to the console in the browser. And this last little piece here is called indexing and it's going to make sure that it grabs the first letter of this JavaScript string. So this is actually going to Output. the letter j And this is indexing.
00:05:00
Lewis Benson: console logging
Lewis Benson: All right, Elgin. Do you want to tell me what's happening online 14?
Elgin Sharper: line 14
Elgin Sharper: That's the console like you said So you can see it in a console not on the page. And I can't exactly remember…
Lewis Benson: Yep.
Elgin Sharper: what the slice was. I remember you talking about the insurance to slice. But I need I know the numbers part though.
Lewis Benson: Okay.
Elgin Sharper: don't know what the slice Paul was.
Lewis Benson: All right, that's So the slice method is used on a string or an array in this case. It's being used on a string and we can tell that because the variable declaration online 8 is a string. So the value that we're logging is going to be the values starting at in index 0 and going up to index 3, it won't include index 4 on slice. So what it does is it slice of the piece of the string and returns it for the console to view? So in this clay case we're going to get 0 1 2 3 and it won't take the S because that's index 4. It only takes indexes 1 2 3 and that's one of those weird things with slice. The second number is up to but not so the output for this would be
Lewis Benson: j a v a
Lewis Benson: anyone have any questions about how that works?
Lewis Benson: This is one that I advise you you practice with a little bit too play around with this if you can manipulate the slice changing this zero to a different number. We're at a really long string maybe put the whole alphabet in a string and just play around with this method on that string just so you can get more comfortable with it and how it's being used because it is a very powerful tool. So next we have Iris. Do you want to try telling me what's going on online 16?
Iris Coats: Your identifying first name is Joe.
Iris Coats: I mean John got buttons away.
Iris Coats: the
Lewis Benson: yeah, so go ahead.
Iris Coats: yeah, that's your declaring. The first name is John, but I wasn't sure what the next line was doing.
Lewis Benson: Yeah, and this is something we didn't cover. This is just a shortcut just a quick way to declare three variables using comma separated and typically you'll see this written like this. It's not something I normally do. But I just wanted to show you that this is a thing and it makes a good point for a code review because sometimes when you're doing a code review, you might see some unfamiliar things if you're working in a code base that you're sharing with other Developers. And that would be an opportunity for you to ask your senior developer. Hey, what's going on here? I don't understand this line of code. So this is declaring three variables at once and notice that it ends in a semicolon, but they're comma separated. This isn't something you'll see very often that I just wanted to show you that this does exist. I actually don't know of any developers that actually declare their variables all in one line like this. But it can be done if you needed it for some reason.
Lewis Benson: Hannah do you want to take a guess at line 19 and tell me what's Happening Here?
Lewis Benson: If there's any part of this right here that you remember actually just moved the line number. It's actually line 20 now.
Lewis Benson: Okay, we can come back to you if you're not able to. talk Daniel you want to try it.
Daniel Perez: What's the question in Westland again?
Lewis Benson: line 20
00:10:00
Daniel Perez: on 20
Lewis Benson: Yep.
Daniel Perez: We got a variable right there. I know that with all.
Lewis Benson: Yep.
Daniel Perez: declaring full name to be He extreme cut continuation. I think something like that. You mentioned before…
Lewis Benson: Yep, that was the word I was looking for.
Daniel Perez: what you have to
Lewis Benson: You can just call this concat if you want everyone knows what you're talking about. Yeah, it's called concatenation. But if you can't remember the word maybe Comcast is easier to remember this is just kind of like the shorthand term sometimes here developers use I'm just gonna come cat that together. a lot of syllables in concatenation And I spelled it wrong.
Lewis Benson: concatenation
Lewis Benson: Okay, Ryan. Do you want to take a shot at line 23 just tell me what's going on with this line right here.
Ryan Arnold: It's very variable declaration.
Ryan Arnold: the values within the brackets but I'm not sure you're declaring that it's equal to them individually as opposed to them strong together.
Lewis Benson: Yeah.
Lewis Benson: Yeah, so this is called an array if you remember from yesterday. I don't know if you caught that, but It's just a list of values. So we're the favorite things variable to this array So we're gonna say we're assigning this array to the favorite things variable and I remember an array is just a list of items and the list is in a particular order. since we're getting close to our 15 minute Mark, that's all I wanted to use this for. I'll go through the rest of these just so we get that review on whatever thing here is doing. So we're assigning array to variable.
Lewis Benson: And just to recap whenever we're using inside of the array. you can use any primitive data type. You could even put another array inside of here. So if I wanted to I could have an array here as well. And then inside of this array I could put another list of items. I could have this one just be an array of numbers like two six seven. Or we could put a string in there if we wanted to as well.
Lewis Benson: And this is perfectly valid. So as we're trying to access the data and the array we'll use indexing to do that. So this is similar to how we get one letter on a string but this will give us the first element and the array. So in this case, it'll give us the entire Pizza string whenever we use zero.
Lewis Benson: And then when you're writing code comments, you just want to kind of give a rough idea of what's Happening. You don't have to comment every single line. You just want to kind of call that the major parts of your logic and your code and we'll get more into that too today as whenever we start getting into functions. This one is logging. the length of the favorite things array I'll just call the array for now just to save some time there here. We are adding an item to the end of the array. So it's actually going to be added here. And I'm just going to put some brackets right here. It looks like HTML.
Lewis Benson: Just to show you where that's going to be inserted. This is just a note. This isn't valid code. I just wanted to show you where that would be added in the array when we use the push method and this is a string. And I'm using the brackets just to represent that it's not actually in the array currently until this line is run.
Lewis Benson: And I'm going to call a list just so it's clear that an array is a list. Pop will remove.
Lewis Benson: jazz
Lewis Benson: from the array pop removes the last item in the array. So after I push Jazz into the array we pop it right back out again. you could store this value. into a variable if you wanted to so if I wanted to I could say let item equal and now item is going to be assigned to Jazz because when this is popped it's going to send it into this variable. Here we are declaring a 2d array. These are also called a matrix as I name the variable.
00:15:00
Lewis Benson: And just to recap also these are called array literals whenever we use the square brackets to declare RS. Does anyone want to take a shot at what this line is returning from The Matrix?
Lewis Benson: What the output would be for this?
Lewis Benson: Yes, Omar.
Umar Z: Okay, so zero means that we are picking up first line, which is one two, three. And after that it says go bring two…
Lewis Benson: Yep.
Umar Z: which is 0 which is 3 the output should be three.
Lewis Benson: Yep. Yeah, good job. So again the 2D array remember we have rows and columns. The first index value is the row. this is row zero. This is Row one. And this is row. two because we have zero as the first item. Then these are going to be counted. It's going to start some more space there.
Lewis Benson: zero one
Lewis Benson: two like that. So does everyone see how he got three is the output
Lewis Benson: Okay. this is
Lewis Benson: assigning I should say a reassigning rock music to the first element in the favorite things This might look a little weird because they have the indexing on the left side of the equal sign. But if we look up at the favorite things the first element is 42 Pizza is the zero element and then 42 is pizza. So 42 is actually going to be replaced by rock music.
Lewis Benson: So this would turn into. rock music like that, and I'm just going to throw the Thingies around this too just to remind it. This wasn't originally in the array. This is just being replaced and that's just a symbolize that it's not actual syntax.
Lewis Benson: Okay, and the last piece is we have a constant array? And we have three strings in it. And we are assigning this array to the constant array and then we are reassigning the first element to programming so coding is going to get swapped the programming here and I'll just leave the comment out on this similar what's above this is valid syntax, even though It looks like we're reassigning a va We're not actually reassigning a variable. We're just reassigning the first element of a variable. So this will be valid syntax as well. does anyone have any questions about this code review?
Lewis Benson: And the more we practice the easier this will get so if you're not sure about variable declarations yet or how logs works or even some of these methods that's perfectly fine. Just keep practicing and just rewatch The videos if you need to ask questions make appointments with your EAS and the most important thing is that you just keep practicing and you'll get All right, so I'm gonna get my demo code started and I need to bring in my boilerplate code for HTML. I'll put in a title. And I need to bring in my script. So this just links to JavaScript to the document so that we can actually get some output SC r i p e dot Js. Okay, and then I just want to put a little content so I don't have an empty screen. And for my content, I'll do an H1. And I'll just say hi.
Lewis Benson: I'm going to hit go live. It's probably going to go my other browser I did.
Lewis Benson: And then we control shift and I forgot to put in some JavaScript code to see if this is working. So let me do that now.
00:20:00
Lewis Benson: Script first line that I'm going to write is use script to prevent bugs. And then after you strict, I'm just going to Proof of life and what this will do is tell me that the JavaScript is properly linked to my HTML you can always put whatever string you want in here. This is a common one that I use it's just Something that makes sense to me whenever I see proof of life. I'm thinking okay. This is working. You can put hello world. You can put whatever message you want just to make sure that you get some sort of message in your console. And then once you have that, you can remove that line. It's just a test to make sure that it's linked properly. Just a little debugging before you get started with everything. Okay, so now let's go over functions. We've been using functions on quite a bit up until this point, but we just haven't did cleared any of our own One function we used was alert.
Lewis Benson: So whenever you see a variable like this and if you look up here, it actually tells us this is a function called alert and even tells us the parameters it says message and it can be of type any we don't worry about the types and all that right now. This is actually a little bit of typescript there. But what this is doing is it's telling us that there's a function called alert and these parentheses are what actually is invoking the function. So when you put a function name followed by parentheses, this is called a invoking the function. You also hear it as calling a function call. There's lots of different terms that surround this and I'll try to use as many of them as I can just to get you kind of familiar with that. But if you hear me say invoke this function, that's what I'm referring to is saying call the function. So the alert function takes in one argument and that is a spring.
Lewis Benson: And this string is typically some text that will be output to the user. I can also put an array in here and it will convert it to a string. I prefer to use a string though because it has near syntax. So I'm just going to say pest the alert function. And when I go to my browser, I'm going to see this pop up. It's probably gonna be MP because I waited. and a refresh and now we have test the alert function. So this is a What's cool about functions is they are reusable meaning I can call this again? But I can put different arguments in here.
Lewis Benson: This is also a function invocation as the text I Just to remind you that terminology test the alert function. And then I have nothing because I created the function and didn't type right away. So it refreshed my browser automatically. So now I got to manually refresh That's just one of the annoying things about using the alert is sometimes it pauses your page for a bit and you have to do a manual refresh. So we have testy alert function and this is also a function invocation. So I just invoked the same function two times with different arguments and got different.
Lewis Benson: Results and the reason I'm showing this here is because I just want to show you how useful functions are especially when you have your own custom functions with large Big Blocks of Imagine the amount of code that goes into creating a square on the page that includes a button that includes your IP address and it also includes this message here. There's a lot of code that goes into this and all we're doing is writing one tiny little line of code with a string and seeing some output so this is what I mean when I say a function it's a name parentheses and you don't always have to have arguments if you remember from when we had the array if I do an array like this, I could say one two, three four. And let me undo these alerts here. So they're not popping up on my screen.
Lewis Benson: I'm going to log this array. That way we can see what's happening. And another function we can use is And this function is removing the last item in the array. This is also a function. And I still got a refresh because these were already up. And we can see the value of Pop is being returned into my console.log. if I want to I don't have this array into a variable. So let me put this in a variable real quick. Let my array equal. And the reason I'm putting this into a variable is just so that I can show you my array. And I'm going to log my array here as well.
00:25:00
Lewis Benson: So I have log of my array. We're going to have a log of the pop value and I'm going to do another of my array
Lewis Benson: So's the array before we used the pop function. Here's the value of the popped item. And here's the array after the pop function. So again, the point of this is showing you that functions don't have to have arguments. You can have a function. It just has empty parentheses and it calls out if I forget the parentheses then we're going to see the F it has the name of the function and then it has the code that's going to be inside of the function because this is native code. That's part of JavaScript. We can't actually see what their code looks like for this. But I'm going to declare my own custom function now and I'll show you what that code looks like once I get to that part.
Lewis Benson: So to declare a function in JavaScript, you have to write the word function. This is similar to writing the word lat notice. Even the coloring of these are the same. It's because this is a reserved word in JavaScript and it's a keyword that says the next thing I type is going to be a function. So I'm going to write a function name now. And I want to function that writes something onto the document of the page using document.wright. It's kind of annoying for me to have to pipe out document dot right? So I just want something to do that for me. So I'm going to call this docq right? You can call these functions whatever you want. I just try to make sense for the use of it. I put parentheses here because if I wanted to include arguments
Lewis Benson: This is where they would go whenever you're declaring a function though. You don't call these arguments. These are called parameters whenever you declare or whatever you call the function as if I would hear. These are then called parameters. They're the exact same thing. But there's two terms that are differentiated for some reason. So when you're declaring a function, they're called parameters whenever you invoke the function, they're called arguments. Most of the community doesn't care. The reason I'm bringing it up is because it can be an interview question. What is the difference between arguments and parameters and a function? I just wanted to throw it out there. So you're aware of it. The technical correct answer is parameters are in a function declaration and arguments are in a function invocation. If you don't fully get it, don't worry about it. It's just one of those little nuances of programming. And then you put curly brackets here.
Lewis Benson: As if this were CSS, so if you remember in CSS, you had your selector and then you had the curly brackets which contained all of the code related to that selector. So this is similar to that and a function everything within these curly brackets is code that can be repeated. So every time you invoke your function, it'll call all the code written here so I could say log I am inside the function.
Lewis Benson: this function has completed. Running so this will do these two console.logs right now, but what I want this function to actually do that's useful is a document. dot right and I'm just going to say hello world in my document right and I somehow switch. Tabs. I don't know how I did that. It's kind of a neat shortcut.
Lewis Benson: So this function now is going to do doc you write Console.log. Remember this is just a function declaration. I'm not invoking the function yet. I'm just saying this is the code that I'm going to repeat later, but I'm not repeating it yet. I'm not actually doing any of this stuff yet. That's for later. So when I look at my console, There's nothing on my document if I refresh nothing's there because it doesn't exist yet. I can invoke my function right here in my console and I'll show you that doc you right And then I put my parentheses and press enter. And I am inside This function is completed running. I get my Hello World.
Lewis Benson: So that I just invoked my function from inside my console Let me refresh my page. And I'm going to actually go into the code here and I'm going to invoke the function here. So remember with alert you put the function name and you put the parentheses and then within the parentheses any arguments and again, I didn't Define any parameters. So this function will have no arguments. So I'm going to say Doc you Right. I'm going to invoke the function and when I look at the browser, I expect to see Hello World And I am inside the function. This function is completed running. And that'll always be there every time I refresh the page because every time I refresh the page that function is being called.
00:30:00
Lewis Benson: if I wanted to call this again later. I could put this anywhere in my file. I could even put it up here above the declaration. It doesn't matter where I put it the function is declared. It knows it exists. It'll call this function three times. Now, it's going to call here. It'll Justice array. It'll read that This is being read ahead of time and then it will read this and it will read this. The way JavaScript works is it actually reads all of your code twice? So it'll start up here say okay, we're using you strict. I see a function invocation. I'll come back to that here is a variable declaration. It'll store that memory it will do.
Lewis Benson: These console.logs it will store This to Memory and then it will see these and it will put those in memory that are happening but it doesn't call them yet. Then it goes back to the top of the page and it will actually start invoking these functions. It'll call the function because these are functions too the console.logs. It'll call it and that order so it's not that important to understand that just reads twice. But I just want you to know that your function declaration can be at the bottom of your page. This is something sometimes you'll see a whole bunch of functions at the bottom that way they're out of the actual code logic. It's just one of those weird styling things. I don't typically do that myself. It's just a choice and here we can see hello world is printed three times because we invoked our function three times. Does anyone have any questions at all about the declaration versus function invocation?
Lewis Benson: Or anything at all about anything I've covered so far.
Lewis Benson: So I want to actually add a parameter to this function. Currently it says hello world. But if we add a parameter here. We can actually make this more Dynamic we can make it more reusable. We can make it more like alert because an alert we can put a string in here and whatever you put in that string is being returned. So, let's see how they do that inside of there. We're just going to write a word it can be whatever word you want. I can call it banana. It doesn't matter what it is. As long as you're using this word inside of here. Or wherever you want to put it. It's kind of like a variable. I'm not going to call it banana. I'm gonna call it message. I just wanted to show you that it can be literally whatever you want. But whatever you put this message. Whenever you invoke the function, it's like a variable declaration, but the variable doesn't get declared until the function gets indicated.
Lewis Benson: so what I mean by that is in this function, I could say hello space. I could say my name is space.
Lewis Benson: Lewis like that so This function is being called three times with three different strings being passed in. Each time it's called this variable parameter is being redefined to each of these strings. So on this line line 6 message is being assigned to this. And then when lever line 12 happens messages reassigned to my name is and then whatever line 14 happens messages reassigned to Lewis. So, let's see what that looks like on the page and we get My name is Lewis. Let's document. Alright. Has anyone have any questions about that?
Lewis Benson: Okay, so we can actually use this to build out entire strings as well. I'm gonna remove these console.logs. I just wanted to show you that you can do multiple things at once inside of here. In fact, I could do another document dot And I could put in here slot backslash. And does anyone remember what backslash n does?
Lewis Benson: Whenever we covered strings. Remember, this is an escape character.
Lewis Benson: So, let's see what this looks like.
Lewis Benson: I did not get the result I expected.
Lewis Benson: It appears HTML still doesn't like this because it's not inside of a paragraph element. That's unfortunate. It kind of messed up my point. I'll show you in the console though what this would actually do. Cument dot right it's one of those things where it's useful for some things but sometimes it can be kind of a pain because it doesn't have all the functionality I like about it. But if I do log, this will show you what I'm trying to demonstrate here. Until we can learn more complex ways to manipulate the document. So with the console we get my name is and then we get an empty line here after each one. So the slash end just creates an empty line. And what I was hoping to do is actually create text going down the screen but again without a paragraph element to contain our text in
00:35:00
Lewis Benson: we put that back to where it was without that see how there's no paragraph element here. This is just plain text written underneath of our script tag. Without the paragraph elements. It's not going to break it up into multiple lines. It just reformats it back to one line. It'd be the same as if I were to go into my HTML file. And write the same text here like this my name. Is as soon as the browser sees this it puts it all back on one line. That's unfortunate that didn't work but Again, this does demonstrate that you can do more than one thing in your function. That was the main point of this. You can do the console.logs. You can do the docume All right, and you can have an entire file of hundreds of lines of code inside of one function.
Lewis Benson: And the nice thing is you don't have to rewrite those hundred lines of code. Every time you want to call that logic. You just call the function you invocate the function. And you get the output so does anyone have any questions at all about functions right now?
Lewis Benson: So I just want to show you real quick. just to kind of Show you what would happen if we didn't have a function? Just to show you why this is useful. So my Str equals. Superman I'm going to use the slice function to retrieve the first four letters of this. But I want to show you what happens without the slice first. So if I didn't have slice this is how I have to solve this I have to do St. I'm just gonna do this copy. Paste my Str at zero plus. My Str out one, that's not putting me know that way my St at 2 plus minus TR at 3 plus my Str at 4.
Lewis Benson: And when I look at my console. I see super as written there. Or I can do console.log.
Lewis Benson: My Str. dot slice zero comma four five
Lewis Benson: it's five because to get the first four it doesn't include the fifth. And then we have the same So this is what I mean by repeating code. Look how many times I had to repeat the same variable call in order to get the exact same result as just one function call. So functions are a way to reuse. I didn't have to type this five times. I just type it once this is nice. They're just a way to reuse a bunch of code at once. Hopefully that makes sense. What questions do you have about functions?
Lewis Benson: Yes Justice.
Justice Miller: So it's like creating a code word. But okay.
Lewis Benson: Yeah. Yeah, it's kind of like a variable in a way too if you think about it. Because a variable is a container that just contains some data.
Justice Miller: All right.
Lewis Benson: But a function is a variable that contains a whole lot of data. And some logic too. It's a little bit more advanced version of a variable in a way. You can't really store Primitives. Actually you kind of can But it's not really the use for them.
Lewis Benson: All So this is how we do the parameters and arguments and you can also create multiple parameters as well. Let me remove this little bit. I just wanted to show you why these are useful we could say. Message and we could also have a second one. We call it whatever we want. And then we could do something like I want to use this template literal here. dollar sign curly bracket message
Lewis Benson: greeting dollar sign curly greeting
Lewis Benson: and whenever I advocate this function, Whenever I invoke the doc you right function I have to pass into arguments now because I just declared to parameters. And again, these parameters are temporary variables that only exist whenever the function is called. So we do doc you right? And my message will be.
00:40:00
Lewis Benson: This is a message. And then I put a comma after that one. and my second parameter will be
Lewis Benson: hello there.
Lewis Benson: I do a little format. So my function invocation has two arguments and it's comma separated. And my function declaration has two parameters. So we see this one is like I'm storing this string into this parameter and I'm storing string into this parameter. So whenever we see doc U dot right it's going to print out each of those strings now I could also docu dot right again. And we can do a second message. This is also a message. This is but my screen this is a reading.
Lewis Benson: So if we think about this in slow speed now. As this Coach reading it's going to read this line. It's going to skip the code comments. It's going to find the function declaration. It's going to store it in memory and then it's going to come down to the docq. Right and it's going to say okay, this is a message. We're gonna sign greeting to hello there. Okay, those are assigned. Let's run this function cright and it's gonna send this message to the document and then it's going to come at this function is going to end and now it's going to be called again and the second time it's called message is going to be assigned to this string and greeting is going to be assigned to this string and I just wanted to make it really clear that each time. This is called this code block is referenced. I just want to make sure everyone understands.
Lewis Benson: These are Dynamic and they change every single time. The function is called to whatever you're placing inside of your arguments. So does anyone else have any questions about functions?
Lewis Benson: Yes, Omar.
Umar Z: Okay, so for my clearance understanding we invoke the function by.
Lewis Benson: The invocation is online 11. online
Umar Z: for this online 11. what is nine? sorry line eight.
Lewis Benson: so line eight is my function logic.
Umar Z: I'm kind of or still function. Okay, so says
Lewis Benson: Yeah, so this is like CSS. We have the curly brackets and it contains all of that code within those curly brackets. So you remember if I wanted to change the background color of my body and I also want to add some margin to my body and I also want to change the font size of my body. I'm doing all of that on one set of curly brackets, and this is called scope. Everything that's within the scope of this function only exists when the function is called. so let me show an example of that…
Umar Z: okay.
Lewis Benson: if I do let my string equal This is a string. And then down here. I say, I'm outside of the scope of my function now log. My Str. We can already see. My string is declared but it's value is never read. And if we look down here.
Lewis Benson: it doesn't even know what this is. when I look at my browser uncaught reference errors. My string is not defined. That's because it's not defined outside of my function. It only exists within this block of code. So you'll hear me refer to this curly brackets as the code block. You'll also hear me refer to it as the scope. Or just the curly brackets.
Lewis Benson: So everything inside of here exists temporarily whenever the function is actually invocated as of right here. So if I were to put console.log my string right there. This is now valid it's going to first whenever I called docu. Sorry, I keep calling docute t It's actually just doc you right? That's what I named my function. Here's my function and I'm gonna rename my function to my function
Umar Z: 
Lewis Benson: Let me go something a little bit different. Just I want to make a really really clear. What's happening on I want to write a message who the document And sometimes you'll see function names like this…
00:45:00
Umar Z: Thank you.
Lewis Benson: where it's a complete sentence and they should.
Lewis Benson: It's a really long function name. But what this does makes it really really clear that you can call this whatever you want whenever you declare your function.
Umar Z: Yeah.
Lewis Benson: And whatever you invocate your function, you have to use the same function name. And so I'm invocating the function twice.
Lewis Benson: And each time it has this would and mix it actually pretty clear with this longer message here that we have two arguments in our function and vocation. And up here we can see we have two parameters. Does that help clear up? What's kind of going on here?
Umar Z: Yes, So I mean by a little bit that now is making a picture in my head. I need to make a picture in my head for my understanding.
Lewis Benson: Yeah, I got you. Yeah, and again, I'm gonna rename this is something a little shorter just because it's doing some weird formatting, but I just wanted to make it really clear this function name can be whatever you want to call it. Just like a variable name. Except you want to make it somewhat descriptive of what the function does that way when anyone's reading your code they can see. What the function does and just kind of understand your code without having to read the function logic itself. So if I wanted to have a function for logging the user and I would probably call it log in the user. And I typically use more than one word when I name my functions so I would say right. message to talk something like that would be a good function name and this is probably if I was actually making a function, I would probably use a name like this just so it's understood what this function does.
Lewis Benson: And then my parameters they're okay. This is just one small example of what you can do with a function.
Lewis Benson: We still have a few minutes before the break. So I want to show you some examples where functions are actually useful so far. This is kind of boring kind of it's actually kind of dominant doesn't really do anything useful. It just put some random text on my document. I want to that's actually functioning that actually has a purpose. Other than just write some text to the page. Which maybe that is a good use case for you. So we can have a function that Help you late area.
Lewis Benson: of rectangle so it's very clear what my functions doing. If I spelled rectangle, right it would be clear.
Lewis Benson: We're going to calculate the area of a rectangle. Can anyone tell me what these parentheses are for again in the function declaration?
Lewis Benson: These parentheses right here.
Lewis Benson: If you don't know the term, that's fine. Just in your own words what I would put inside of these parentheses.
Lewis Benson: Yeah, you want to give it a try Justice?
Justice Miller: Is it for setting the parameters?
Lewis Benson: Yes, exactly. It's the parameters. And again, you can call your parameters, whatever you want. For calculate area of a rectangle I think length. And width makes sense as parameter names. And I'm going to create a Inside of here and this is just to make it more readable. I don't have to use a variable name. And we're going to count the const area equals length. Times width we didn't go over these mathematical operators. I will show you the documentation for this real quick. Just so where these are so you can reference these.
Lewis Benson: I'm just gonna put in the asterisks and look for it's not there.
Lewis Benson: I can spell divide a little we hear the multiplication by. Spelling isn't the greatest.
Lewis Benson: we Where's operators? Hoping there was a whole list of them. I may have to go to.
Lewis Benson: W3 schools, here we go. This is what I was looking for. So on W3 schools. We have the list of all these operators plus sign as addition minus a subtraction times is multiplication. If you have two of these it does exponent exponents. And the slash Modulus is division with a remainder. So if I were to do a modulus of for example I actually do this in the browser here because thinking of remainder kind of hurts my head a little bit but five divided by 6, we get that point eight. This would be one with a remainder of 1 if we were to do regular division. So if I put mod here?
00:50:00
Lewis Benson: sorry, it's one with a remainder of 5. Again, I'm not that's the math. so whenever you divide five divided by six five goes into six one time and then you have a remainder of 5. So the mod Operator just gives you the remainder. The only time I really use this is for determining if something is odd or even so you could say if you want to know if this number is an even number. Yes, I can look at the number here manually and see that it's an even number. But the code you're not going to always be able to read the code manually. It's going to be running in the background and you may want to run something to see if something is already even so you could say mod 2. And we can see that that's zero. So if anything mod 2 is 0 then it's an even number. And we could do something like this.
Lewis Benson: And we can see that that's an even number and we'll get into what this means these three equal signs later. I just wanted to show you that the mod operator is used for determining if something has a remainder and what that remainder is when you're doing division. It has some uses. And then we have increment and decrement. This just adds one and subtracts one from whatever your value is so I can do that again in here. I can say one minus minus. but we have to be a variable equal 5 Num minus minus and if I look at Nome again, it's now 4. So I just subtracts one and then if I do num. plus plus
Lewis Benson: and then I look at num. It's now five. So it adds one and subtracts one just a little shorthand. If you ever need to add one or subtract one. There it is. You will be doing that and weeks and three weeks from now, we'll be using that quite a bit. So we'll get a lot of practice with that. The main point was I just wanted to show you these operators before I move on with using this for math. So this calculates the area and then we can console.log. area
Lewis Benson: and now we can haul this function calculate area of a rectangle and we can pass in two values we can do five. We can do 10. and that should be 50 if we look at our console and there it is 50 and you can always give this a better message to You could say.
Lewis Benson: Area, let me do a string template literal here.
Lewis Benson: What I'm doing is I'm putting my parameters inside of my console log as well.
Lewis Benson: That way we can see this entire string being printed out at once. So every time I call this function now. We can put in 10.
Lewis Benson: and 10 We'll call a couple times here.
Lewis Benson: 56 and 11 Okay. So every time this function is invocated, we'll see this console message and let's take a look at that and we get area 5.
Lewis Benson: Area 5 and 10 is 50 the word is in here because that would make more sense is. There we go area 5 and 10 is 50 area of 10 and 10 is 100 area 56 and 11 is 6 16. So this is a useful function. You may have values coming into your application. Perhaps you have a calculator on your application.
Lewis Benson: for example
Lewis Benson: Maybe you have a rental store. You rent out a canoe for an hour and you want your users to be able to calculate the cost of what it would take to rent the canoe cluster life jackets ever how many hours they're going to be out on the river and then maybe the cost to get the canoe back to the start point. So you can have this whole little form build out on your website and you can use this function to calculate out the call the total cost that it's gonna be also for just an commerce website. If you're selling products, you might want to calculate the tax you might want to calculate anything at all. You can use functions to do that and each user is going to have different values being plugged in because they're all going to be getting different products. So if you didn't use functions, you would have to manually figure all this out and then probably send them an email with their totals and it would just be a mess especially for big companies like Amazon doing millions of transactions an hour.
00:55:00
Lewis Benson: So this is a useful function and here we can see the function declaration. And again, I can move anywhere in my file. I could put a way down here out of sight and just focus on my function.
Lewis Benson: Let me do that again. And just deal with my function invocations and we get the same results and then I can have my functions out of the way so that all this extra code is not being worried about basically and I'm going to bring this back up. Typically, I like to have above my function invocation. It doesn't matter and this concept of being able to put these above your declarations is called hoisting. That's something I'll talk about more in a couple days. But basically it just allows you to put your function declarations at the bottom. That's all we need to know for that. So now I'm going to do another one. We'll do a function that calculates Fahrenheit to Celsius. So we'll call this one. convert fhr fair in height to
Lewis Benson: Celsius I picked the worst words to iPad. So with this one is one parameter. and that parameter is going to be the temperature
Lewis Benson: and just to make it clear it's the temperature fair and height
Lewis Benson: So this is what it's expecting to be passed in when you invocate the function, so we'll have to make sure we pass in the correct value so s Celsius equals temperature in Fahrenheit
Lewis Benson: So to do the calculation for this, I'm going to use some parentheses here because of a JavaScript uses PEMDAS. If you're familiar with that from algebra class where it does parentheses exponents. and multiplication addition subtracting and that order I'll just bring that up in case you need a quick refresher on PEMDAS. And it's an acronym parentheses exponents multiplication division addition subtraction, so it'll do it in this order. But also from left to right and so if you're subtraction as before your addition, it'll do the subtraction first.
Lewis Benson: So temperature minus 32 times
Lewis Benson: five nights is Celsius what I'm missing a
Lewis Benson: sing something
Lewis Benson: I'm missing my curly black Yeah, thank you.
Lewis Benson: But instead of logging my Celsius, what I'm actually going to do is type return Celsius. Typically, when you have a function, you want your function to return a value not just logging is only useful to see text in your console. Returning is used to actually get the value. so for example if I have an array.
Lewis Benson: I 1 2 3 items in it. and I'll do another variable let item equal my list dot the value of Pop is being returned. That's why we're able to store it into a variable like this. So they're using the return word inside of their function to retrieve that value and we're going to do the same thing with our Celsius which means whenever we invocate our function, we can actually store that into a variable so we could say const value equals and we're going to use the convert to Celsius function. And let's pass erature in fahrenheit. Let's say 97 degrees. And now we can log to value.
01:00:00
Lewis Benson: So return takes the value and returns it out of the function so that it can be stored into a variable. And remember anytime you can store a value into a variable. You can also. Pass it directly into where this console.log is and I'll show that after we see that this is working. Here we have 36.1111. So in or 97 degrees is 31.1 degrees Celsius.
Lewis Benson: if I wanted to not put this into a variable because I can place the expression directly in my console.log like this. And I'll get the same result. And the reason I can do that is because this function is returning a value. And any time a value is returned. It can be stored directly into a variable and anywhere you can store a variable you can pass that data right through now this kind of goes back to what I mentioned yesterday and the day before I'm breaking things down to their simplest form. When you look at this function invocation. You don't see a function invocation. What you need to imagine is this is a number because that's what the function returns. So because this returns a number we know that this actually is a number. This right here. So that means I can do math too. I can say plus 100. And there we have 136.111.
Lewis Benson: because this returns a number this is a number. So hopefully that makes sense and it's a hard concept to grasp at first, but whatever something reduces down to is what it actually is. So whenever you look at this and you see that 97 being passed in you want to thank this is actually 30 32 or 31. Whatever That's an actual number. You don't have to know what the value is going to be just know the data type and how it's going to be reduced down.
Lewis Benson: Does anyone have any questions?
Lewis Benson: Any questions at all? We're going to be taking our 10 minute break soon. So if you have any questions, let's get those answered before a break.
Lewis Benson: Alright, if we have no questions, I'm going to start the 10 minute timer. We'll take our break we come back. I'll do a quick little overview of this again just to make sure everyone's comfortable with this. I'll go over the return keyword a little more and then we'll go into more of the same. Basically. We're just kind of show you more of what you can do with this. Okay, so let me start my timer.
Lewis Benson: And I'll see you in 10 minutes.
01:10:00
Lewis Benson: Okay, welcome back everybody.
Lewis Benson: So I'd like to do a quick review of what we've been doing so far. Somebody want to talk about this line of code. what is this right here? What do I have highlighted currently?
Lewis Benson: I was like Gregory that had to hand up. Yeah Gregory.
Gregory Robertson Jr: or function
Lewis Benson: Yeah, it's a function key a little bit more.
Gregory Robertson Jr: on
Lewis Benson: Is it an invocation or a declaration?
Gregory Robertson Jr: how to say that first one again incubate invocation
Lewis Benson: invocation Yeah or My declaring a function or…
Gregory Robertson Jr: declare
Lewis Benson: my calling a function.
Lewis Benson: That's So I'm declaring a function. That takes in two parameters. And it does not return anything it just console.logs of value. Yeah, great job these three right here. Somebody want to tell me what these are.
Lewis Benson: Justice
Justice Miller: Are they? declarations
01:15:00
Lewis Benson: So this up here is the Declaration. These are invocations.
Justice Miller: toward the invocations or they just okay.
Lewis Benson: Yeah, so this is what We're calling it three times. We're making this function work three different times. So the value of five.
Justice Miller: Okay, I see it.
Lewis Benson: Yes each time.
Justice Miller: I see it. right
Lewis Benson: We reassign that Good job. Okay, somebody want to talk about this one What's Happening Here?
Umar Z: To this again is the Declaration.
Lewis Benson: Yep, this is the Declaration. And this one's taking in one parameter. And it's doing a little bit of math to that parameter it subtracting 32. And then multiplying that result by five nights. And that will return a number. Whenever you're talking about functions and you're doing a code review for a function the things you need to.
Lewis Benson: touch on What the function Returns what the function takes in and what the function does so in a number. This function calculates a value of that number and then it returns a number. So the data type stay important thing what the number is we don't know yet. If I had a variable here. And I said temp equals 55. And I was using this function to calculate temperatures. I don't want you to think about this variable at all. I've actually seen this is a really common mistake where instead of using they'll have the temperature in fahrenheit parameter, but then they do this.
Lewis Benson: this would still work, but it doesn't use the parameter. And the temp is coming from here. So this function is only good for one thing. It's not reusable unless you only ever need to calculate 55. So this is a common mistake. I see all the time and they'll have external Global variables that are being accessed inside of the function. Sometimes. It's okay to use a global variable. For example, if you had a variable called Monday
Lewis Benson: so this is a global variable the values never going to change because it's a constant but Monday. Can be accessed inside of this function now, let me change this back to that. And we could return. a string instead of a number and we could do this.
Lewis Benson: and say on
Lewis Benson: open your dollar sign.
Lewis Benson: And we'll need another one here. like that and then we could say mo and
Lewis Benson: the temp is That so what this would do is return the string on Monday. The temp is Celsius. This would be okay. I probably still wouldn't do it unless You going to be configuring this file each day, manually? so you'd have to come into your code and say okay let's change this to Tuesday and ever you wanted to do it but this variable no longer works. So you'd have to say day of week like that. It's just better practice to keep your variables inside of your function. So let me just turn undo all of this and show you what I mean.
Lewis Benson: if I needed some sort of temp variable in here I could say const.
Lewis Benson: Here's something I can do I can say value equals. Five divided by 9. And then over here. I could multiply by value. That would give me the same result. because it's going to store this five nights into this value variable. But I don't want to keep the value variable outside of the function because that would imply that this variable is being used outside of the function as well. It's only being used inside of the function. So I'm going to encapsulate it inside of this function. Does anyone have any questions about that?
Lewis Benson: One more thing to note is The return keyword it sends the value back to where the function gets cated. So here we're invocating the function and we're receiving this value from the return it does one more thing as well. It actually terminates the function. It doesn't allow any more code to run within the function. So if I try to log My Celsius here.
01:20:00
Lewis Benson: And I'm having trouble putting it in there. try again. We can see this is gray and it says unreachable code detected and that's because whenever return happens this is done. It's not going to run this line of code. m so if I actually wanted to see my result in the console. I'd have to make sure this is above my return statement. The return statement is almost always going to be the last line of code. And the reason I say almost always is because you may have what's called conditional logic within your function and we can say if this condition is met Return if it's not met then don't return, something along the lines and we'll get into conditional logic in a couple weeks. It's not something I want to cover right now, but I just want to let you know that this is almost always going to be the last thing you see inside of a function declaration.
Lewis Benson: Unless there is some sort of conditional that needs to. Say that if this condition is met return. Otherwise, don't return. And that's just one little caveat there. I just want to make sure that that's understood so that you just don't think the return is always the last thing no matter what but it's almost always going to be last. Does anyone have any questions about the return keyword?
Lewis Benson: Anyone have any questions at all about functions yet?
Lewis Benson: All let's see. We talked about hoisting functions. And again that just means that you can call your function before it's declared and I keep bringing that out. I don't know if you tried this yesterday at all. online 24, I have this Online line 25 I have this array declared if I try to log at above it. We see my list. And when I look in the browser, we get an uncaught reference error cannot access my list before initialization. So this is saying that I'm trying to call this variable before it was declared. We don't get the same error with functions will hoist and the reason I bring this up now is because I want to show you This is the classic way to declare functions. There are a couple more ways that you can declare functions.
Lewis Benson: And I just want to go over these briefly because you might run into them and I don't want you to be confused if you see them. The next one is called a function expression. So what this looks like is you use a variable? const my
Lewis Benson: bunk equals function parentheses and then our code block and I can just this Is a function expression. This is typically used more often and front end Frameworks. So you might run into this from time to time. It does the exact same thing as this function declaration here. it doesn't do the same logic, but it declares a function. Just as this declaring a function. So this is just another way to do it. And if I invocate this function now my bunk. And we take a look at the console. We see this is a function expression. It's working. It invocates the same. It just the Declaration looks a little bit different.
Lewis Benson: If we look to the right of the equal sign, I remember I said this is an expression and that's the same with this function here. This is also referred to as an anonymous function because we never put a function name in here. If we look up here. We have the function name and then we have our parameters. This one has the function keyword no function name and then our parameters and then we're storing reference to this Anonymous function into a variable which kind of gives it a name but one thing to note. As you can't hoist a function expression now, we have a reference error. Does anyone have any questions about that?
01:25:00
Lewis Benson: And again, these do have use cases. This value is a We'll get into function references a bit more when we start talking about callback functions. I think I talked to Umar about this a little bit last night when we wanted to know how you could delay. an action this is a reference to a function. So you could use this in that timeout function as well.
Lewis Benson: That we talked about yesterday. yeah, so the function expression is just another way to do it and then there is one more way to clarif function and this one is more common one. It's growing in popularity. So I want to show you this that way if you see it, you're not confused about it. It's another way to do a function expression. It's growing in popularity, but it has limited use case. The reason it's growing in popularity is just because of how streamlined and how short the syntax is. And this is called an arrow function.
Lewis Benson: So I'm just going to do this the same as I did my function expression. I'm going to say equals. and for an arrow function the first thing you do is you put your parameters.
Lewis Benson: You put an arrow. And then you can optionally put this code block. Or if you don't put the code block you can just put your logic like this.
Lewis Benson: And this is all in one line so you can see why people might kind of want to use this you'll see this a lot used in coding challenges so that people can put all of their code in one line and say I did a fancy one-liner even though it's 3000 characters long. It's sometimes not a good option. But if I want to invoke this, it's the same as before you put the function name you put the parentheses and we get to hello right there. whenever you use Or don't use curly brackets. This is called an implicit return. Don't worry about what that means. I just want you to be aware that this is returning this value so I could actually For a string here and say hello like this. And then I can log that invocation.
Lewis Benson: And again, the only reason I'm showing this to you is just so you understand what it is if you run into it. And I forgot to put the parentheses.
Lewis Benson: And there we get our So yeah, this is an arrow function. This can be converted back to a regular function to do that. I'm going to remove the const. I'm going to remove the arrow. I'm going to put the word function here.
Lewis Benson: Our So I put my arrow function name back in. And then we have to have a code block for a standard function and a return keyword.
Lewis Benson: And now this function does the exact same thing as the arrow function. Let me call this standard. Funk and I'm going to redo the arrow function just so we can see the difference between the two.
Lewis Benson: So it's function name equals parameters. Arrow and then the logic so this is the exact same as this. Except you can hoist us.
Lewis Benson: So I can actually invocate this function online 36 if I wanted to. And again, this isn't something that I'm expecting everyone to have memorized these different syntaxes. I just wanted to introduce them so that you have some familiarity from familiarity with them so that it's not a New Concept if you run into this on stack Overflow if you're looking in documentation because the arrow function is a very popular solution, especially for array methods and string Methods, and I'm actually going to show that real quick that way you can see what I'm referring to here. So if I go to mdn, And we're going to search for an array function one that I know We'll do four each.
Lewis Benson: And here we can see There's the parameters. And this is being called inside of this method. So there's only one parameter in this method and it's an arrow function. So this is commonly used inside of other methods. Let's see if there's some other ones.
01:30:00
Lewis Benson: uses an arrow function as well.
Lewis Benson: Here's the arrow. And this one has two parameters.
Lewis Benson: we don't really need to get into what these do The moment There's a flat map that There's our Arrow. So I just wanted to show you that you will run into these was my point here, especially when you start going through these different methods trying to find different solutions. You're going to be entered. You're definitely going to be seeing Arrow functions, but what you could do. is if you don't want to use an arrow function You can use a claration like that. But again, if you're using a standard function declaration, you'll need a return keyword. So this isn't something I'm expecting you to know how to do today. But again, I just wanted you be aware of it that it exists out there and there is more one way to do things. There's more than two ways to do things. It's something you're going to run into.
Lewis Benson: if you do have any questions, if you run into stuff like this as ask me if you were graduated and you find issues like this. You can always reach out to your network. If you're working in the industry. You can talk to your senior developers and ask them questions like this as well. You always have resources to ask questions stack Overflow is another good resource use YouTube If you see A New Concept check it out on YouTube. There's always somebody out there trying to teach and I just want you to be aware that there are so many different ways to do this stuff. I'm gonna try to show you the easiest way. So for now, I'm gonna remove the arrow function. And we'll just use the standard function declaration. That way we can keep this as simple as possible. Does anyone have any questions about that?
Lewis Benson: Okay, so does somebody want to walk me through declaring a new function that takes in two parameters and returns a string?
Lewis Benson: And I can repeat the steps as we go. Hey Ryan, you want to give it a shot? Just give me the first keyword that we need to start the function declaration if you don't mind.
Lewis Benson: And if you're not at your mic. Give you a second here.
Lewis Benson: Elgin you want to give it a try?
Lewis Benson: So to start off with the classic function declaration. What keyword do I need to start with?
Elgin Sharper: I start with function.
Lewis Benson: Just to declare a new function. Yes. Yeah,…
Elgin Sharper: To the left, okay.
Lewis Benson: you said function I wasn't sure if that's what you meant. If I was doing a function expression. I would use letter const but again, I'm not going to be using function expressions from this point on I'm only going to use the classic function declaration. So it's going to use the function keyword. Iris, do you want to tell me the next part of this?
Lewis Benson: for declaring a new function
Iris Coats: What do you want to name it?
Lewis Benson: Whatever you want to call it.
Lewis Benson: It's going to return a string.
Iris Coats: just
Iris Coats: Okay, so you like next function?
Lewis Benson: and it's
Iris Coats: and then parentheses
Lewis Benson: yeah, that'll work next function. Okay, so put the parentheses and then I'm going to call on someone else for this part. Daniel you want to tell me what goes in these parentheses.
Daniel Perez: I know that an apprentices. Those are the parameters. And we're trying to get too parameters,…
Lewis Benson: These are the parameters. Yeah, we'll put in two parameters.
Daniel Perez: so I know that you keep talking.
Lewis Benson: is there a Go ahead. As you ask if there's a certain name you wanted to use for the parameters.
Daniel Perez: I'm just one and two.
Lewis Benson: Okay, I can't use numbers but I can use words. These are kind of variables if I tried to start this with a number we can see we get a syntax there and the reason is because this value is considered part of an expression already. So it thinks I'm going to be doing math and then it doesn't know what to do when there's a letter next to it. But if you start with characters, it'll know that this is a parameter. I can end it in a number. I can put a number in the middle, but I can't start it with a number. And then what goes after the parentheses Omar?
01:35:00
Umar Z: Okay, so we're gonna start curly bracket.
Lewis Benson: Early brackets. Yep, and what do we call this area? between the curly brackets
Umar Z: Hope something. Call block, okay?
Lewis Benson: scope is one of the names I use. Another one is just a code block or scope. There's probably a hundred other names that I use and don't even realize that at the time but codeblock and scope are the main ones that you'll hear me refer to this as
Umar Z: but we Define I'm bad return value. So right let
Lewis Benson: Okay, you want to use a lot here? What do we declaring into our variable?
Umar Z: what was that? What are we gonna bring the two values the string? We're gonna bring it.
Lewis Benson: So I just want to concatenate these two it's gonna take in two strings one and two is a string. So this is like what?
Umar Z: Okay, so we can name it let our strength. Or the string.
Lewis Benson: We could do final string Maybe. Yeah.
Umar Z: Final string. Yes. Let's finest thing is equal to we want to concatenate it.
Lewis Benson: So we'll do string one plus.
Umar Z: Yes, you can use this method or the other network string one not string 2.
Umar Z: and then you're gonna to consoled our log
Lewis Benson: I can log it, but I want to make sure I'm also returning it. Function should return something.
Umar Z: Yes, okay.
Lewis Benson: That way we can store it into a variable later if we need to. Yep, we'll put the return and…
Umar Z: So we use return you.
Lewis Benson: we'll return final string. So the console.log is a good debugger just to make sure that this is doing…
Umar Z: on Instagram
Lewis Benson: what we think it's doing. And log a final string is just making sure these are doing what we think they're doing and the return final string is actually sending this value. Outside of the function declaration and that could be being stored into It could be setting it into an alert. It can be being used anywhere that we can use a string. And I'm going to go into that a little more here. So let me invocate this function. We're going to say next function and we're going to pass in.
Lewis Benson: and world so this is our string we're concatenating together. So this is a concatenating function. So I'm actually going to rename this function to concatfunk. I'm just so describes kind of the functionality a little better. And this is what It's adding together. Hello and world. So, let's see that result again. We're returning it. But we're not doing anything with this value just yet. So there's the let me actually say put a note right here.
Lewis Benson: So this is inside the function. The reason I'm flagging this is so whenever I start to manipulate this later, we can see the difference between where we're inside the function and where we're invoking the function. So let me bring up my browser. And inside the function we see Hello World and I'll notice we don't have anything outside the function now, I can do that here. We can actually see I get some autocomplete help with that. and I can put in my parentheses and I can say I gotta do string for the space comma quotes and then say act should do it.
Lewis Benson: And then we get inside the function the cat and then we can see the Cat is being returned from the function so that the cool thing with these Dev tools is whenever a function returns something it actually shows you the result of whatever is being returned and I wanted to show you that because this is what the function is after its So this line right here concat function the cat reduces to this string. So hopefully that makes sense. and knowing that I can use slum indexing on this.
Lewis Benson: So I can actually say square bracket 0. And I can grab this h. this isn't doing anything yet. So let me log this. Because we're only returning it we're not actually viewing it anywhere. So I'm logging this and I'm going to put this into a variable just so this is a little more readable. Because currently we have a lot of stuff happening on one line and I like to break things apart with variables. so const we'll call it first letter. equals and we're using the concat function to build this string and we're grabbing the first letter of the string and I want to log the first letter. And I'm going to put a note in And say outside the function.
01:40:00
Lewis Benson: So outside the function we get the letter H because I'm indexing that to zero inside the function we get hello world and again, I'm not returning hello world. Sorry the function part here. I'm not returning this section. I'm returning just the string hello world. So I just wanted to make that clear and we're getting the letter H because this function reduces down to the string that is returned whenever this function is called.
Lewis Benson: So I like to think of it fractions if you were to write out a fraction, you said 4/8. Most people that look at this is going to say that's actually one half and they would write it out like this instead. Two equal signs. It doesn't yell at me. So 4/8 equals 1/2, that's how 4-H reduces down and I like to do the same thing with my functions and this is going to sound weird to say out loud but concat function parameter one. Hello parameter two. Hello our world at index 0 reduces down to hello world. Sorry reduces down to H because we're concat are indexing that to one letter. So
Lewis Benson: 4-H reduces the one half concat hello comma world at zero reduces down to H. And whenever you look at this function you want to try to do that the best you don't necessarily have to know what the value is but definitely kind of know what the data type is that's being returned. That's the most important thing. This is a string we need to know that this is a string because we can do other things to this now we can say two. upper pace
Lewis Benson: and let me get rid of two uppercase first letter, I should see a capital letter Because again, I'm doing This is a string method. It can be used on any string. I even do this. I could say console.log put in a string. Hello Dot to upper case the string reduces down to its current they'd be saying one half reduces down to one half hello world as a string reduces down to hello world and I can now call the string method on that. and we get hello there in all capital letters. So this string This string method is being used on this function invocation that's being indexed to a string. I just want to make it really clear that whenever you return something from a function that is the value of the function and vocation.
Lewis Benson: Hopefully that makes sense. Does anyone have any questions? Is there anyone that's a little fuzzy on what I'm saying here with? How I got the capital letter anything at all.
Lewis Benson: And I know this is a complicated looking line here. It's doing a lot at once. I never advised doing this much on one line of code. I'm just showing you how you can reduce things down. If you needed to actually do something like this, this first off I would say put this into a variable called my string. and then do honest first letter equals my string at 0 and then const
Lewis Benson: first letter tap equals first letter thought to happened here seal in St. To uppercase
Lewis Benson: So this would be a cleaner approach to do the same thing. I'm doing one thing per line instead of trying to do everything all at once. You can change things together. There are times where it's useful, but you can also break this apart into smaller pieces to make it more readable and understandable.
Lewis Benson: The most important thing to understand is whenever you invoke a function. Whatever it returns is the value of the invocation.
01:45:00
Lewis Benson: Are there any questions at all?
Lewis Benson: Functions can be very tricky. They're not the easiest thing to understand right off the bat. Just because you get used to this top to bottom reading of your code or you see function and then you see this variable and then you might think that this is going to be read next but you got to remember that this function declaration is getting skipped and that's probably one of the reasons why you'll see a lot of times with function declarations are all at the bottom of the file. They're all grouped up together and you'll see a nice big code comment that says
Lewis Benson: function declarations or helper functions or something along that lines. And by this is another way to do code comments and JavaScript. This is good for if you want to do multiline coats. So you can either do the two slashes. Or you can do star star slash.
Lewis Benson: Also good if you need to do entire code blocks, you could say a slash star here. And then down here star slash and it comments out this entire code block. Or you can highlight it and press control forward slash and it will do it like that. Either ways fine. I just wanted to show that there is another way to do code comments and JavaScript. Typically, you'll see that at the top of the file and I'll have a bunch of information about it. Another time. You'll see that is inside a function A lot of developers will put a multi-line comment right here. this and then they'll say the purpose of this function is to convert temperature
Lewis Benson: And they might have more than one line here. They could even sign it they could say written Lewis. If you get code from stack Overflow, if you find a solution on there, for example, if you didn't know how to do this function, you went on the stack Overflow you you want to say Found function on stack Overflow and then maybe even provide a link to that function because whenever you copy and paste somebody else's code without giving attribution to where you got it from that is technically plagiarism. So make sure you always giving attribution so you don't get sued and so that you don't get in trouble while you're in this course because we do take plagiarism seriously, too. So anytime you copy and paste from anywhere. Just make sure you make a code comment say where you got your code from.
Lewis Benson: It's not frowned upon to get your code from other sources. In fact, it's encouraged for you to reach out and find Solutions. The part that is frowned upon is copying and pasting code that you don't know what it does understand what you're copying and pasting read through every line. And if there's something you don't get look it up ask somebody find out why they're doing what they're doing. use whatever resources you can to understand the code before you use it never copy and paste code you don't understand. Does anyone have any questions about that at all?
Lewis Benson: Okay, I'm going to start on the assignment instructions for today. And then we'll break into our rooms and you can do your 10 minute break as soon as we hit the breakout rooms. and after we get to the assignment, I do want to review the GitHub method of submission for anyone who wants to explore that we will be starting GitHub next week. So this could be good practice to get ahead on what we're doing with GitHub. Let me get the assignment open.
Lewis Benson: These are a little out of order it seems
Lewis Benson: and it looks like I gave you some solution code in the demo. We're going to be creating a function called calculate the area of a rectangle. So if you were following along you'll already have the solution to this.
Lewis Benson: If you don't have the solution to this and you can't remember. I would advise just searching for this online. These are actually pretty easy to find.
01:50:00
Lewis Benson: To get a solution for calculating the fahrenheit to celsius use your resources. If you're not sure. I don't want to just give you the solutions like that. I didn't realize these were actually in the assignment today. I thought these were different functions. That's okay though. I'll just make an adjustment for the next time I go through this. And so you're going to create these two functions and then you're going to create a third function called greet user. That's going to take in one parameter. It's going to be the name and inside the function create a greeting a message. That includes the user's name and returns it. So don't just console.log it make sure you return it. And if you want to see the log value, you can always log your actual function call. So what that means is? I have this concat function here.
Lewis Benson: I could say on cat function And then pass in two strings one and two. And then those would be concatenated together. And then when I go to my browser, I can see one and two there. So I am returning these One and two inside of this function using the return keyword and to view it in my I am logging the function and vocation. So hopefully that makes sense. If you do have any questions, let me know about that. So again, you're going to be creating three functions total. you're gonna make sure you strict the top as well. Don't forget that three functions total calculate the area of a rectangle convert Fahrenheit to Celsius. and greet user make sure you're using the appropriate arguments and log the results to the console.
Lewis Benson: Anyone have any questions at all about today's assignment?
Lewis Benson: Okay, I want to show the GitHub thing again. so it's clear on how you can create a repository and how to submit your code using GitHub. Again, we're using GitHub next week. So this is going to be good to know and to get into the practice of so first you go to github.com. And when you're on github.com, you can go to your profile. You can click the new button here. You can click this drop down to go to new repository. I like to click on my profile picture go to your profile. Sorry me try again your repositories. And click this green new button right here.
Lewis Benson: And once you have this screen up the osito Is the name of your folder that you're working in? So remember a repository is basically a folder it's a place that contains a bunch of files directories anything like that. It's just a cloud for your code, basically. So this one I'm going to call. What was the name of the
Lewis Benson: JS function assignment So I'll just copy that out of there paste it in here. And it says this is good to go. I'm not going to give this a description. This isn't required if you wanted to you could say codex assignment. For functions something like that. You don't have to put that in there though. And then I'm going to add a readme box. Otherwise, it's a little weird whenever you don't do that. That's good to have at least one file in your repo. Or GitHub has you trying to do other things that we haven't covered yet. So make sure you check that readme box. And click create Repository. And now I have my repository bill. So this little card right here that I have highlighted on the Highlight that
Lewis Benson: it will unhighlight this little card right here is the folder so you can upload files. and you can either drag the files into this area or choose your files now if I go to projects I can go to. demo 8 and I can select these three files and open them and now it'll upload us three files to my repository. I hit commit changes.
Lewis Benson: And I can now paste this link into the submission again, make sure this is a public repository. Otherwise the Tas won't be able to see it. You can also grab the link from code block our code button right here if you click that as long as this is on https, you can copy this URL right here as well. It's the same one that's in your browser. It's just adds a dot g At the back of it it still takes you the same place that doesn't matter if it has that. Does anyone have any questions about how to submit through GitHub? And again, I do advise that you start using this. Yes, Umar.
01:55:00
Umar Z: So for GitHub, we need to zip the file or it's just going to be the regular file without zipping it.
Lewis Benson: you don't need to zip the files on ub. Yeah, and the nice thing about GitHub too is if I click on a file I can see all of my code right here.
Lewis Benson: Because this isn't zipped I have access to all of the code that's on GitHub now. So whenever we're grading the assignments instead of having to download these to our machine open them up and run them we can do everything through GitHub. It just makes things so much easier. And again, we are doing this next week. We're going to be learning GitHub after next week. All assignments have to be submitted through GitHub. So I just wanted to try to get you into the habit. that way if you do have any questions, you're not having to resubmit next week's assignments as much.
Lewis Benson: Are there any questions about the GitHub submission? Yes, Umar.
Umar Z: So again, please how do we share it with you? We give you the link.
Lewis Benson: Yes, so the URL right here you can see my name is in this URL.
Umar Z: the URL
Lewis Benson: So this takes you to my page slash the repo name,…
Umar Z: Okay.
Lewis Benson: you can copy this URL or there's this green button here that says code if you click that and…
Umar Z: 
Lewis Benson: make sure https is selected. You can hit this copy button here and…
Umar Z: And we provide it in classroom.
Lewis Benson: it's the same URL
Lewis Benson: Yes in the classroom whenever you click on where you normally submit your assignments. There is a link option. Yep.
Umar Z: it's yeah, okay.
Lewis Benson: Yes, Brian.
Brian Kimbrow: I'll just be careful we get home. It's easy to match things too. So you can just folders very easily. You don't know exactly what you're doing. So if you have any questions Reach Out
Lewis Benson: Yeah, good point there and hopefully that shouldn't be too much of an issue right now because we're not going to be cloning any of these down. We're manually uploading The Code by adding a file here. So Hopefully that doesn't happen. If it does we can help you get through that. If you accidentally add your files to one of your previous repos. We can also help with that just make sure that you're creating a new repo for each assignment. if you've already created a repo for assignment, you don't have to create a new one. You can overwrite your current files in there. You can also remove the files from here as well if I click on read me. I believe it's these three dots here. commit changes and now that readme files deleted. So if you need to delete files, that's one way you can do that.
Lewis Benson: Next week we'll get into how to do it locally without having to even come to github.com. But again, that's next week not this time. So for now we can upload our files manually.
Lewis Benson: Yes, Omar.
Umar Z: Okay, so for every day is a time their new Simon reopen it depository event, or maybe he said you can just overwriting.
Lewis Benson: Yes.
Lewis Benson: 
Lewis Benson: I would prefer if we created a new repository for each assignment.
Umar Z: You okay?
Lewis Benson: Yeah, you could technically create a folder for each one, but that wouldn't be easy to navigate if you did that.
Umar Z: Okay, so one depository everything.
Lewis Benson: yeah, one repository for each assignment and the more repositories you have the better your GitHub looks to because this is a portfolio and whenever you finish this course, you can take all of these repositories move them into what's called an organization on GitHub and use that organization to kind of show off your Learning Journey to anyone who wants to potentially hire you This was my thought process. This is how I learned it here with some of the assignments I had to do and some employers might find that interesting. And they might look through and see how you developed as a developer how long it took you to get to where you are things like that?
Lewis Benson: Yeah.
Umar Z: The argument from nothing to something.
Lewis Benson: Yeah, if I go back to my early days on GitHub, you'll see a lot of the same stuff that you're doing. I'm trying to create functions trying to do some really basic stuff. In fact, some of my more recent repositories. I'm learning new languages and it's the same thing again. I have a file for this is how I declare variables in Java. This is how I use Python to create a function this little things like that even.
02:00:00
Lewis Benson: So it's a way to Showcase your skills. It's a way to Showcase your code. It's also used to collaborate. So I just encourage you to use this as much as you can and start getting comfortable on this platform. They start exploring things on here.
Lewis Benson: So this is a good time to hit the breakout rooms. As soon as I opened a breakout rooms take your 10 minute break and then get started on the assignment. We're creating the three functions and if you have any questions, we'll be around to check in and make sure that everything's going okay. Will help you get through this. Does anyone have any questions though before I open to breakout rooms?
Lewis Benson: Okay, so split this up.
Lewis Benson: And again, these are done at random. So I don't know who's going into which room until It seems that we have a room of four. Let me. See if I can divide that up a little more.
Lewis Benson: Okay, so there'll be one room of three and the rest will be rooms of two. Okay, open those up now.
Meeting ended after 02:01:50 👋