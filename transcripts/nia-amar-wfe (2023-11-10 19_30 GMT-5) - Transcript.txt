nia-amar-wfe (2023-11-10 19:30 GMT-5) - Transcript
Attendees
Brian Kimbrow, Daniel Perez, Gregory Robertson Jr, Iris Coats, Krystal Jefferson, Lewis Benson, Lewis Benson's Presentation, Reece Renninger, Umar Z
Transcript
This editable transcript was computer generated and might contain errors. People can also change the text after it was created.
Lewis Benson: a comprehensive review we're going to Go over pretty much everything we covered up to this point. There will be a couple. I don't call them new Concepts. They're kind of building on Concepts. We already learned so we'll get into that a little bit today. but first thing let's get into our code review. And I'll just ask for volunteers for this one. I'm not gonna call anyone out on this. and if we don't have an answer for one, then I'll just go over the solution. So challenge one. Is there any volunteers to predict the output of the line on line four?
Lewis Benson: Yes, Iris
Iris Coats: Okay online for the output State hello world as you want.
Lewis Benson: exactly. It'll be the Coming from this variable. and we're just logging this variable to probably confirm that the output is what we'd expect it to be. So now we have our challenge two. We have an array. Does anyone want to take a guess at the output for challenge 2?
Lewis Benson: You don't necessarily have to explain why if you know the answer.
Iris Coats: It will show Blue on the console.
Lewis Benson: Exactly, that would be the string blue. And the reason why is because we're using indexing to find a specific element of an array and print that element because raise and most aspects of any coding we start counting from zero, so our first element is zero. Are next element is one and our last element is two so we get blue whenever we use the indexing ation. So this one's going to get a little bit trickier objects can be a bit much when you're first learning JavaScript. Does anyone want to take a shot?
Lewis Benson: At three and four together or just three whichever one. It's these two lines here.
Iris Coats: but
Iris Coats: You're telling To log the specification of camera, so it's going to show camera and then the colors that it's available in. Black white and wait here white because you're indexing one there for available colors.
Lewis Benson: Yeah, yeah, so the second one is definitely the string White. Let's take a look at that. First one again. You said it was going to be camera for the output?
Iris Coats: no, that's what I said at first, but then I looked at the line again and it should say 12 MP.
Lewis Benson: Exactly. That'd be the 12 megapixel camera on this Smartphone. So they're just going to return that string because we're accessing the specifications and it's nice that this actually highlights that and shows us what we're grabbing the smartphone object. And then we're grabbing the specifications property and the more accessing the camera property and whenever we pass in the key, it Returns the value similar to how indexing works we pass in the index location and it Returns the value of the array. So smartphone is the object available colors as the property and one is the index position of the array which is white. So it'll return 12 megapixels and So this one is find the bug challenge. Does anyone want to take a shot at seeing if they can find the bug in this function?
Lewis Benson: This function will result in an error. And specifically it'll be a reference error.
Lewis Benson: And just a line number would be good. If you see the line number that the bug is on.
Lewis Benson: Anyone see it?
Iris Coats: Is it lying 32?
00:05:00
Lewis Benson: It depends on your perspective now Gregory. You want to take a shot?
Gregory Robertson Jr: I was thinking that 33.
Lewis Benson: Find 33 so line 33 would log out the variable greeting. and it's going to concatenate it's going to take this parameter from the function. It's going to concatenate it to This part from to here is going to run fine. But if you were to change this to greeting message, then that wouldn't throw an error online 34 anymore instead. It would throw a line on 33, but if we were to change 34 into greeting instead of greeting message, that would solve the air. The reason is there was this variable doesn't exist. It's not the find within our function anywhere or even outside of our function.
Lewis Benson: So after this concatenation runs, it'll log the variable successfully and then when attempts to return an undefined variable, it will throw a reference there at this point. So Iris, it could be line 32 if you meant this variable to be named greeting message, but you would also have to change line 33 in that case or you can just change line 34 to just be greeting like this and that would solve the bug. I'm going to put that back. You have a question.
Lewis Benson: And there will be a reference error here.
Lewis Benson: 34 there so this one is the next two they're not actually challenges. I just wanted to review these so we can see So this is the We can see the standard function declaration here. We start with a function keyword we go into the function name, we pass our parameters and we don't end the statement with a semicolon because function declarations do not get semicolons for their ending point. where they function expression
Lewis Benson: Anytime you have an assignment operator your statement will end in a semicolon. And again, the semicolon can fill itself with your prettier extension. So if you're not sure where to put them at the time don't worry too much about it. If you don't put them in at all and prettier doesn't include them the Code will still run fine. The browser will figure it out and place them for you. There are some times when you start working with Frameworks where they call it transpiler. It'll actually convert your code into a standard JavaScript from the
Lewis Benson: Framework code if you don't include your semicolons in those cases, sometimes it can throw an error. So it's just one of those things where try to remember it when you can but if you don't remember it, it's not a big deal. I know a lot of developers that actually insist on not including them because they believe that it makes their files smaller because there's less text in them. So there is a little bit of a community on saying don't put semicolons as much as possible. I personally think you should put them because it's a good habit just because of those Frameworks and if you ever decide to learn another language such as Java or C++. You're going to want to be in the habit of using them. Also when we start getting into SQL every statement and SQL ends in a semicolon. So it's just a good habit to be in. But again, the point of this is function declaration here.
Lewis Benson: And So the function expression declaration. We have a variable declaration with an assignment operator. And we are assigning a variable to an anonymous function. And the reason this is called an anonymous function is because it is a function declaration with The function name would go here. If this was a standard function declaration like this, and then you wouldn't include the variable here. It's an important distinction because you need to be able to pass reference to functions around sometimes or you need to be able to use them. In other cases where you don't necessarily want a function name because you won't be manually invoking the function. You'll have your code invoke the function and we'll get into that whenever we start talking about callback functions.
Lewis Benson: So this is a function expression. We also seen this with the objects whenever we s when you declare a method within an object, you're using an anonymous function and assigning it to a key or a property within your object. So for this one here. If I wanted to have a method I could place it here and on phone I'll make this a key. And then this is where I would put my function I'm going to put a string here first just to show you the difference and this would be a function and I just want to show you this is a property and that if I were to Access to smartphone dot turn on phone. I would see this string function. So it's just any other key, but I'm going to change this value to a function expression or an anonymous function.
00:10:00
Lewis Benson: So this would be function. We'd have our parameters. I'll put one in here that says name.
Lewis Benson: and then we'll put in a message that says name I'm actually going to use concatenation. I'm not ready. These would be one string hello name space.
Lewis Benson: your phone is turning on.
Lewis Benson: So again, we are assigning a key the same way. We signed these Keys here. To a value but instead of our value being a string or a number or a Boolean it is a Anonymous function.
Lewis Benson: Okay, so that's where you would use an anonymous function in order to set those and now next we have another type of function expression, but this is an arrow function. This is the same exact thing as a regular function, but the syntax is shorter, and it's a little bit easier to use inside of callback functions. let me show you the Equivalent if I wanted this to be a regular function, so this is throwing an error now because I have two variables with the same name. We're going to fix that in a second. So whenever you're declaring a function the first thing you do is you put in the function keyword.
Lewis Benson: And then you put in your function name in this case. It'd I'm going to say calculate area 2 so that it doesn't throw an error for these having the same name. We're going to delete this Arrow. And we're going to put in our curly brackets.
Lewis Benson: I'm going to put this logic inside of the curly brackets.
Lewis Benson: And now we have length times width. The reason this looks a little different right now is because we don't have a return keyword. and with the arrow function whenever you put all this on one line and you don't have curly brackets, it will automatically return whatever is to the right of the arrow. Don't worry about the logic on this too much at the moment. I just wanted to show you there is a difference between these and actually I have to have this on a lower line and this is my invocation. I This goes on the outside. So this is all the only thing that goes inside of this function and this gives us the exact same logic. This is the arrow function. This is the standard function that does the exact same thing so you can see the little bit of difference in syntax here.
Lewis Benson: But they work exactly the same for the most part. There are some subtle differences that we'll get into when we get into more advanced objects and methods as well
Lewis Benson: So next we have object literal with methods as I showed up above. We can create methods and this case this method is being declared with an arrow function. It works again the same way but it doesn't have the function keyword. We have our two parameters. We have our Arrow determining this as a function and we're returning a and b Again, don't worry too much about this syntax yet. This is To write a method. one's a little bit more advanced. We'll get into this because this is a shortcut meth a way to make a method. We'll get into this more whenever we get into week six of JavaScript. So again, it's just a shortcut but it does the exact same thing as this except it subtracts instead of ads.
Lewis Benson: Here we have a function invocation of our method and we have this challenge here to identify the properties Does anyone want to take a guess what this one's going to return?
Lewis Benson: Looking at the math operations object and then finding the property called name. If we pass the key name in there, what would that return?
00:15:00
Lewis Benson: So if I double click on name? Yeah, Iris you wanted to give it a try?
Iris Coats: it would return that operations because that's the Dirt,…
Lewis Benson: exactly Yep,…
Iris Coats: that's the name.
Lewis Benson: so it's going to return this string math operations. Because the E is directly inside of operations here. So this does look a little confusing because we have a method this comma is separating each key and then we have another method we have another comma the next key is name and we can see that math operations is being returned there and we have a trailing comma so we could add another key if we wanted. you I could say Hello, and this would return. Hi, something like that. That's not a very good example, but just to show you you can add more properties on just by leaving that comma at the end. You just press enter and write another one in there.
Lewis Benson: Okay, so here we are invoking. The method ad we're passing in 12 and 3 that would just add 12 to 3 and return that value.
Lewis Benson: We have some string concatenation. They have the phrase learning JavaScript is fun. And then we take this phrase and we slice it. We would start at 9:00 and go to index 18 even to this says 19 because it's always one short. And then we can catonate that phrase to this string here. Does anyone want to take a shot of what that's returning?
Lewis Benson: On this slice method right here.
Daniel Perez: Is it JavaScript is fun in useful?
Lewis Benson: I think so. I'll see I know it starts nine right here. I didn't come up to 19 though. So it'd be ten more one, two, three, four, five six. Seven eight, nine ten. Yeah. It's exactly what it is. So to be JavaScript, it'll be JavaScript.
Lewis Benson: It looks like it's taking off all of this. It's removing all of that and then just adding it to this.
Lewis Benson: Which is a bit odd JavaScript and useful. Just want to double check that I'll see one two, three, four, five six. Seven eight. Nine ten ten indexes. Yeah, that's it. So it's JavaScript and useful. We're not sorry. This would still say learning. JavaScript is fun and useful here. I just realized what's going on here. This is So slice doesn't actually mutate the original phrase and we're not reassigning it back to itself If This Were splice. Then that would actually be changing the original mutating It's just a different string method. that's my fault. So yes, this will say JavaScript and then the next one will actually return this entire string because we're not mutating It's still the same string. Does anyone have any questions about that? I apologize for that confusion there?
Lewis Benson: I can show you the two methods. quickly before we get rolling on. Let me open up another browser tab. We have and splice
Lewis Benson: Here we have this free codecamp blog. They're pretty good with this. I'm going to go to the stock overflow. and they have An example here, they're asking the question and then here this is again where I said you'll find this far keyword on stack Overflow anytime. You see that just think of it as let But in this solution, they're saying the original array is affected resulting in one two, this is where they're talking about splice. And then here the original Ray is not affected and they're using slice. So that's the difference between the two it's pretty subtle. But typically I try to go toward the first solution where I don't affect my original array. I prefer to create new arrays just in case I need to reference the old one and that'll make more sense whenever we start. Doing things like where we have.
Lewis Benson: A list of names and a table and we want to filter that table, but then we want to go back to the original because maybe you want to see some names and then you want to see all the names and then you want to see some names you want to go back and forth between the two sets of data. You don't want to modify your original array, or you have to go retrieve it again, and that's less per format that and then the last one is accessing objects within an array. So does anyone want to take a shot at this last challenge here and tell me what this is going to return?
00:20:00
Lewis Benson: So just to kind of break this down team members is an array. And we're indexing the first item in the array. So This object is item one. So we're accessing this object. So team members at item one dot name. Would be the string. Bob sorry if I took that from somebody
Lewis Benson: Okay, so that's our code review for today. I hope this is feeling a little bit more comfortable some of this terminology. Again, some of the stuff is a little bit past our scope, but I just wanted to kind of introduce some of the things that you'll see. Because you will run into Arrow functions and you may see a methods declared like this. But we'll get into that later. I just want to bring it up now in case you're exploring on your own and run into this just so that it does exist.
Lewis Benson: So next thing is today's lesson. So today we are going to mainly be covering everything that we've done up to this point. This is going to be mostly a review. There will still be an assignment to work on that covers everything that we did. And so We'll be using methods doing some console.logging all of that will be covered today.
Lewis Benson: I get my notes All So first thing I want to recover variables again. Just briefly since we're using them as we're creating our objects our arrays and everything else. But I'll go over the syntax. So to create a variable that you can reassign you will use the let keyword. And I'm just going to put a message here. And we're gonna say hello JavaScript.
Lewis Benson: And I'll understand a semicolon. So this is a variable declaration. I'm assigning the string. Hello JavaScript to this message variable that is mutable because I used the let keyword and not the const keyword to create a constant variable so I could change this message by saying. message equals
Lewis Benson: I can type today. Goodbye. I promise. and what I'm going to do is actually Message here. I remember this is a method that allows us to write. Some text onto our document. And on the next line, I'm going to write. alert message and this is a function that will pop up a little window and return whatever string we pass in as an argument. Let me link this into my HTML. And make sure everything's working.
Lewis Benson: Put in script. I need my SRC. And this is going to script.js. I'll put in a little bit of contents on that staring at a white page. H1 test
Lewis Benson: and we should see the alert pop up first We have goodbye JavaScript. I press We got our test and there is our hello JavaScript from the document out, So everything seems to be working. I'm gonna have my developer tools open so that I can see any console.logs. I want to place. Also if I have any errors pop up, I want to see those immediately.
Lewis Benson: Okay, so that is the recap of variables. I'm not going to go into the constants just yet because I already kind of covered that with the let Next is string indexing.
Lewis Benson: So indexing is a way to grab a specific letter. Of your strings. So first thing I want to do is declare a new variable. I already have a variable. I'll use this one up here. I'll index my message string. And it'll actually be this one now because I reassigned it to message. So let's grab the first character. And in order to do this. I'm going to put this into That way I can access it later so first. character equals message at zero and now we're storing that variable here, and I'm going to log. first char and that is going to show us the first character of the message. I need to get rid of that alert.
00:25:00
Lewis Benson: A commented out. So there's a note. And I'll make a green so we can see Okay, so there's our letter G. That's for the goodbye JavaScript that was coming up in the original alert. And someone tell me how to grab the last character of the message. using indexing
Lewis Benson: and this would be if we didn't know how many characters are in the string as well.
Iris Coats: Could you change last char?
Lewis Benson: I can change that. Did you have a suggestion Omar?
Umar Z: Yeah, can it be n minus 1?
Lewis Benson: Let's give it a try.
Lewis Benson: And we get an undefined. So that was a really good guess that is a proper solution and…
Umar Z: It's on. okay, it's
Lewis Benson: a lot of languages. Unfortunately, JavaScript doesn't support that so they added a little patch. to actually do that and what it is is dot at Minus, I'm not sure what to char at. I think that's the same thing minus one.
Lewis Benson: And do I have a space at the end of that or something? let me just do at
Lewis Benson: and there we get t for the JavaScript and notice. This one doesn't have the exclamation point let me put that in there. And now we get our explanation point so this is a method that was designed to do exactly what you said Originally languages like python Java pretty much every other programming language out there. You can put your square brackets in and do minus one like this and that does work to give you the last character and then minus two gives you the second to last character. Unfortunately, JavaScript doesn't have that functionality. They didn't want to add it directly like this. So they just added a string method called at.
Lewis Benson: And then when you have the app method you can put minus 2 it gives you the second to last. On that we get the T instead of the exclamation point or minus 1 gives you the other solution you could come up with here is to put in square brackets. And message dot length minus one. And this will take the total length of the message and subtract one from its length. And that would be equal to whatever index is your last index. So I would expect to see an explanation point now for the last character. So another solution same result just so you're thinking outside the box whenever you're looking for these type of solutions. There are many ways to do things and there's not one right way or one wrong way. There's just different ways. And you could put this part into a variable if you wanted to. And you could say let last index equal.
Lewis Benson: Message length minus one and then just pass in last index and that'll work the same and it's a little bit more readable. We don't have any magic, going on inside of our square brackets everyone who looks at just like We're getting the last index of our character there. Anyone have any questions about that?
Lewis Benson: Okay, so next we have. A couple string Methods. I want to go over again. We're going to go over the two uppercase method. And the slice method I keep going over these ones just to kind of show you their functionality because they become very useful when we start getting into what's called control flow the else statement. What we will get to them. Don't worry. But I want you to be really comfortable with some string Methods before we get there. So the first one if I wanted to make message to Uppercase I'm going to do the local uppercase. It doesn't really matter. it goes off of your normal keyboard. And then we'll have console.log. I'll just put an empty line here for now.
00:30:00
Lewis Benson: and there's our All capital. Goodbye JavaScript Does anyone have any questions about the two uppercase method?
Lewis Benson: if I look at this This is a string method. So whatever you have. Your string doesn't have to be on a variable. So if I wanted to I could say I can make a string here that says. This is not in apps. Dot to lowercase and put in our parentheses to invoke the method. This works the same as doing it on a variable. It just needs to have this dot attached to a string and remember about reducing things down this message variable reduces down to a string data type because that's exactly what's stored in this variable currently. So this would be the same thing as me writing this message out directly. And we look in here and we see this is not in caps, even though in my code. It is in caps clearly. The method will lowercase it for us.
Lewis Benson: Next is slice. I think we're getting pretty comfortable with this one, hopefully. It is definitely An important method substrings are a very powerful tool. and if I wanted to grab Just the word JavaScript. I can do that with the slice method slice determining where to start you just got to count the characters. Sometimes I'll just take a guess and see where I'm at and then go from there. So we're zero. One two, three, four, five six seven eight. So I'm going to start at 8. comma I'll grab the rest of the string first. So we'll just do eight for now. And there we get JavaScript. It looks like I have a space in here. So maybe this should be seven.
Lewis Benson: Nope. I want the wrong way 9.
Lewis Benson: so this is what I mean, sometimes I get it off and I just try again trial and error until I get Correct. This is why you use logs whenever you're building applications so that you can see exactly what you're expecting test it and work with it. You could technically use math too if you needed to. And there we go get rid of that space. It's just JavaScript. And then if I just wanted to grab if you characters I could add a second parameter a second argument in my method. and we can put in five and I'll grab the first four letters of the word JavaScript
Lewis Benson: sorry. I got to add five to nine. So that would be 11.
Lewis Benson: Wait, that doesn't make sense. before team There we go. first thing that doesn't include that's something I forget. Sometimes whenever you're using the slice method or the slice method it goes up to but not including. this last number So there we get just a Java string being printed out, but keep in mind. This is not mutating the string so we can do a log message. And we can see that our string is still intact. We didn't actually change it in any way. but if I change this to splice
Lewis Benson: But I spell it wrong. Did you check the docs?
Lewis Benson: Okay, so they have it as an array method not the string method. I don't use this one often again because it mutates the original and I'll show you how this works on a raise instead of strings. You can slice an array or splice an array, but apparently the splice method is only on strings. So I can't mutate it directly. All I could do is reassign it. And what I mean by reassign it is I could take this message. And let Message dot slice and then I can log the new string. And this new string is permanent because I'm declaring it right here.
00:35:00
Lewis Benson: The old string is still not affected and when we look at the results, we can still see Java and goodbye JavaScript. This is my preferred way to do it. Anyway, even with arrays. I don't like mutating everything because again, you might need the original data at some point. So it's better just to reassign it and try to avoid actually changing things permanently. Unless for a fact you need to change a permanently.
Lewis Benson: With that I'm gonna move into a raise now. so I can show you how versus slice with ray So with an array will do. Let fruits equal.
Lewis Benson: I'm gonna put a few fruits in here Apple.
Lewis Benson: banana And we'll do cherry.
Lewis Benson: And we can do the console.log first of fruits and Here is our fruits array. We have an apple banana cherry. now I'll use the thought slice and we will slice the first element only. And now we can see banana and Cherry as the only two elements being returned. But if I go to the next line console.log fruits
Lewis Benson: We're not mutating the array. But we are able to make a new array if I were to assign this I could have an array that only has those two items. So this could be useful if
Lewis Benson: You could use the r app method or not the index at method to find where an item is located. And then use the slice method to actually remove it from the middle of your array. because remember push or sorry Pop and shift only remove from the end or the beginning of your arrays. So if I needed to just remove banana, I could use slice to do that. So I could say slice 1. two
Lewis Benson: and we should see just banana there.
Lewis Benson: splice will actually mutate the array. So if I put splice here and I put in just one again. We can see that this is all that's left of our array because we remove the first two items. Does anyone have any questions about how splice works? And we'll go over some more array methods as we go on. I'm actually go over another one right now. because I've showed you how to put arrays into Strings using indexing. I can show you an array method that makes this And nice and clean. I'll remove these console.logs. So before we did console.log. And we'd put a string template in. We put in the dollar sign curly brackets. and then we'd start plugging in our array values so we could say fruits at zero space another dollar sign curly bracket
Lewis Benson: Roots at one and this will give us a decent looking output because we're using the string template to build it out. But the thing is if we change the array.
Lewis Benson: It doesn't you have to come in and update your console.log, then it's not Dynamic. It won't work in scale. If you have a lot of fruits in a list, you're gonna have to come in here and handcode them all in like this but we do get a nice looking output in our console this way. There's banana cherry and then you could also put separators in here. If you wanted to have a hyphen in between them or a comma ever how you want to present them. You can do that. There's a method to make this easy. We can do fruits dot join. And then we pass in our separator. So to do that. We'll put in a string. And whatever you put inside this string is how it's going to be separated so I can put a hyphen right there like that. And we still get the exact same result, but it's a lot shorter. I could put a comma here followed by a space. And we get a comma after each one this way. So this is a nice little way to
Lewis Benson: current an array list of data into a string and not have to go through and use indexing to access each one. This will just do them all at once and return that in a nicely formatted string. So that's a pretty useful array method. It's used quite a bit. I'm also going to show a string method where you can use these in conjunction with each other. So if you had a string, great one real quick let my Str equal and in this string you have a list of items you could say. computer box handle Apple it's just a bunch of random items. I mean you wanted to turn this into an array. Maybe you received this list from a user. Let's log this output first.
00:40:00
Lewis Benson: Make sure there's no errors and then we have our computer box candle Apple we can convert this back into an array or in this case. It'll be an array for the first time by saying dot split. And it works the same way except you split it on whatever character you're trying to divide this up on in this case these are comma separated. So this creates an array it removes the comma from the string and just puts the text into the string. So now we can create an array of items based on the original string. So does everyone see how that works? It's very similar to join but it does the opposite of join instead of It s sorry instead of joining an array into a string. It's splits an array or splits a string into our so hard for me to say right now. Yeah, it does the opposite.
Lewis Benson: I mean you can do this in other ways too. I could say split it on the space. And it keeps the comma. So we can see that it has that computer comma ending quote there. Or we could not split it on anything and we get every single character of the string. This has some use cases I've used this before in order to find certain things. Maybe I was looking for a specific character to make sure that there was no illegal characters in the password. it's a decent technique though. And then you can always join this back into a string. So I can store this into a temporary variable. because this is not a
Lewis Benson: mutating method we do let or we'll just call it new array and it's not a very desctive new array and we're going to use
Lewis Benson: My string dot split, let me actually move this up a line.
Lewis Benson: So let me get a good console off of this first make sure it's still working. Yeah, so it doesn't mutate. So we have to create a new. Split string equals. There we go.
Lewis Benson: And now we get every single character again. So I have the equals my string dot split and I'm splitting it on an empty string. There's no space in here. It's just an empty string that gives me every single character and now I can do dot join. And I can join this on nothing on the same way. I'm splitting it on nothing and it puts the string back together again. and where this could be useful is you may be asked in an interview or a code challenge to reverse a string and that's really hard to do in JavaScript without some sort of loop where you take each letter and you place them into a new array and then you reverse it and then bring them back in but you can use something like this where you say let your string be split into every single character. And then you can say array equal
Lewis Benson: Split Str dot the reverse method is an array method and all it does is take every character of your array and reverses it. and then what I can do is take my reverse array and join it back together. So this should reverse my string. and there we go, we have These words if they're not really words, but the string is reversed. So it could be useful for you. If you just need to reverse a string quickly just to show that you can. Sometimes this is something you'll see in interviews. Does anyone have any questions about these methods we'll get more practice with these two. So if you're not comfortable with them, but do ask your questions if you have some.
Lewis Benson: Okay, so if there's no questions, I will continue to move on. There's a couple more array methods that we learned. They were push pop shift and unshift and those were the common methods used for adding and removing items from arrays. So he will continue working with our fruits ray. If I console.log my fruits array right now, it should still be intact.
00:45:00
Lewis Benson: And it is so we have our apple banana Cherry everything I'm doing into new arrays. So again, I want to keep my old data here. I'm not mutating my original arrays. I'm creating new variables for each thing that I do to it. And I don't actually hurt it.
Lewis Benson: same for my join here. Okay, so the fruits array is intact. So let me add an item to it. Well Fruits pushes the most common way to add an item to an array because it adds it to the back of the array. And let's add in another fruit. We'll add in an orange.
Lewis Benson: And then we'll log our new array. After we pushed in the orange remember, this is something I've noticed it is easy to forget. Who are AMG that looks weird?
Lewis Benson: I see people will push in an item. And then they'll check the browser. They have their log for fruits online 33, they'd have their push online 35 and they don't put another console.log because they expect this log to update but it won't do that. So if we look at the two versions, here's line 33, we have three items and then online 36 we can see we have the four items there. So make sure you are doing your console.log after you make the change to the array.
Lewis Benson: Okay, so next I will go over. It's getting a little messy. Let me put a couple comments here.
Lewis Benson: Yeah. Let's go Shift so we can do fruits. dot shift and then I will pass and onto the DOT log. hurts
Lewis Benson: and we can see that item apple is removed from the array. It takes the first item in the list item 0. And it shifts it out of the list.
Lewis Benson: So with that I wanted to add in. One more Point here. This function has a return and it Returns the item that is removed from the list. So we can see apple is being returned here. Whenever I actually pop that out, so here I'm doing the So when I do shift it actually does return the item and this could be useful if you're using that item. As you pop it out, for example, you may have a queue of data.
Lewis Benson: Maybe you have a help ticket application. And as soon as you remove the item from the list you want to send that item to your front end application so that what you're working with. This could be an object that contains all of the information Perhaps. It is a help ticket. It'll have the user name for the person you're working with maybe the device you're working on in a description of what the problem is things like that. So if that's the case you can shift it. It'll remove it from your queue and you can then use that and another function you can pass this in as a function parameter and then have that display all of that information to you. So It shows that you read the ticket and it also removed it from the Queue at the same time. So this is a useful method for that reason being that it Returns the item.
Lewis Benson: If it didn't return the item, then you would have to use some sort of indexing solution where you would do console.log and then you want to do fruits at zero. This gives you the first item and then as soon as you get to first item, you remove it from the list. except it would be less performant. So there we have apple and Apple. We're getting the same thing twice and we can see ones online 39. One of these is coming from shift and one of these is coming from indexing. So I prefer just to do it directly from the shift return value rather than trying to index the value just because it's more performant and easier to read in my opinion. But whatever you prefer, you can use that solution when it comes to problem solving like that. There isn't just one way again to solve these issues.
Lewis Benson: Does anyone have any questions about shift?
Lewis Benson: Okay, so next. will do pop and again pop is the same as shift but instead of taking the first item out of the array it takes the last item out of the array. that's not pop.
00:50:00
Lewis Benson: So as I come in here we can see that orange is being returned from line 41 and orange was the item in the list and if I bring up my fruits array. We see we're left with banana and Cherry.
Lewis Benson: So those are the four basic? Ways that you can add things and remove things and the other one was unshift? I didn't show that one. That's how you put something into the front of the array. So shift removes the first item unshift adds the first item and then you have push it adds the last item and pop removes the last item. They're all useful. But pop and push or the two main ones that I typically use I do occasionally use shift. I try to avoid it when I can but for cues, it's really good. If I'm just building something quickly, but the performance of this method isn't the greatest. So sometimes there are other Solutions you can use for that. Those are a little bit more advanced and we'll get more into those type of data structures later on. when we start exploring katas
Lewis Benson: Which are code challenges? Are there any questions so far about arrays or strings or any of these methods that I've shown? Is there any methods that you want me to go over perhaps? Is there anything maybe a solution for a raise that you want to see or strings?
Lewis Benson: Okay, so I'm going to go over prompt again just to show you that this is a way to get user input. But I'm going to take it a step further. I'm actually going to use it to add an item to an array. So you can push a couple of these different functions together this way. So we're still going to continue working with our fruits array again. It's up here. But I'm going to remove This other logic here just so that the screen is a little bit cleaned up. I'm just going to comment it out. So we still have the notes for it. And we'll remove this pop method. Let's see what we have whenever I console.log fruits.
Lewis Benson: I'll just do it here. And then this one I will do the logic so we'll do about push and we're going to push in an item. But before I do let's make sure our fruits array looks good. So we have apple banana and Cherry again. Now, we want to add a new fruit. But we want to do it based on user input and I'm going to use prompt for this. So this is where I would type my string. I can type it directly in the push, but that gets a little bit messy because I'm already inside of a log method now. I'm using another method inside of that method and I don't want to put three methods inside of each other. So I'm going to make a variable let and I'm going to call this reply equal The Prompt method takes in one argument and that is a string and I'm going to say What root? for you like to add
Lewis Benson: so whenever I prompt this whatever the user says will be added to this reply. And then I can pass this reply into this push.
Lewis Benson: let me actually put this in its own line. And then we'll log Roots after we make the push. Just like that. Does anyone have any questions about this approach here on how I'm getting user input to add a new fruit to the array?
Lewis Benson: So we're using The Prompt function. We're passing in one argument, which is a string. And we're receiving the reply and storing it into this reply variable. We're using the push method on our array passing that response in and pushing it into the fruits array and then we're going to log it out. So let's take a look. I'm going to cancel refresh. What fruit would you like to add we'll say each. And when we look at the console we get apple banana Cherry Peach. Anyone have any questions about how I added that?
Lewis Benson: Okay.
Iris Coats: When you just What if you had added the same word again, like apple or banana?
00:55:00
Lewis Benson: It would just add that new item to the back of the list. It doesn't differentiate between…
Iris Coats: Okay.
Lewis Benson: what these elements are. So if I refresh and do apple. then we have an apple index 1 or sorry index 0 and we have an apple at index for or three
Lewis Benson: There is ways to implement logic from creating duplicates. That's whenever you start getting to if and else statements. So that gets a little bit more complex with that and there's also other data structures you can use there's one called a set which does not allow duplicates whatsoever. And again, that's a more advanced concept. But if you did want to explore that now you could look into that a little bit but there's a lot to sets that can be a little weird to work with in cumbersome a set is basically a JavaScript object with no duplicate items kind of the easiest way to describe it, but it's a little bit more complicated than that. Is there any more questions about? Adding items to an array.
Lewis Benson: So something else you can do with as well is you can use a similar approach like this prompt here to add items or add parts to a string. So if I wanted to I could say let user reply prompt and then passing a string and I'm just going to pass and what is your name?
Lewis Benson: You can't type right now. There we Put our semicolon. And then once you have the user reply we can then concatenate that with a new string so we could just say console.log. And we'll It's actually going to put a plus user reply and actually instead of logging I'm going to document dot right?
Lewis Benson: and because I already have a document dot right up above I'm going to eliminate that for the moment so that we only have one.
Lewis Benson: And we'll cancel refresh. What fruit would you like to add We'll add another Apple again? And I spelled what wrong that's okay with the capital letter there. What is your name Hello Lewis. So you can use the user input to concatenate. All you're doing is getting a string from the user. the prompt will usually return a string it can also technically return null if I press cancel. And then I get hello null. But it converts the word null into a string. but if we look in our array here Because I hit cancel. This is actually a null value. So index three is empty. There's nothing in index 3. That could be problematic if you're not careful with Knowles. So keep an eye out for that.
Lewis Benson: Typically when you're getting user input, you're not using a prompt to do it perhaps if you're building a page for a login for a router or something like that where you don't need to have a per a really good looking interface, you might use a prompt to get user input for the admin name and password. But if you're building a web application, you're probably going to use a form element from HTML and when you leave a form element blank, it returns an empty string not a null. So just something to keep in mind for the future. You're only going to see this null little bug here when you're dealing with prompts. But it could lead to bugs if you are using prompts. So just be careful with that.
Lewis Benson: Typically, we'll put in some. Conditionals and some validation to handle those situations where these would be empty. And we'll get into that when we start talking about loops. You can continue to ask this question over and over and over again until you get a proper response. So if the user hits cancel, it'll just ask it again because It's pretty cool thing once we get there. We'll do that in week six.
Lewis Benson: Are there any questions about the prompt and how to use that how to manipulate these strings?
Lewis Benson: I know I'm going through this stuff a little fast. I'm doing that because we have to go over the entire week. So if you do have any questions, you can slow me down stop me.
01:00:00
Lewis Benson: But I do want to get us into the lab as soon as possible as well. So if it's something like a niche question that you can wait till the lab you can write that down and then ask me then as well if you want, but if it's something you'd actually don't understand about what we're doing. I'd prefer you ask me now. I'm that way if somebody else has the same question we can get that So this is a good spot to start our 10 minute break. We've hit an hour. So from here, I'm going to start the timer and then when we come back, we'll get into our fundamentals of functions again. We'll go over the Declarations how to use them to clear them and then we'll get into objects. And then we can start our lab. Okay, so let me get to 10 minute timer going.
Lewis Benson: And I'll see you in 10.
01:10:00
Lewis Benson: All right, welcome back everyone.
Lewis Benson: Let's get back into this First thing I want to do is remove these prompts so we can continue on without having to answer these each time. This will break this line. And we'll have to do both of these lines.
Lewis Benson: If I didn't comment out both lines here, I'll reply becomes undefined on this line. So on this one, it would throw an error and then the same here use a reply become undefined if I comment out this prompt. So the line 45 would throw a reference error because it wouldn't know where user reply is. So I just comment on all of that so we don't worry about it. We have an extra log of fruit. So I'm gonna comment one of those out let's take a look to make sure we're still good.
Lewis Benson: refresh and we have our one log of the array. So that's a little bit cleaner in the console. Okay, so let's get into function declarations.
Lewis Benson: So first, I'm going to create a function. that takes in an array and we'll take in the fruits array.
Lewis Benson: And we'll call this.
Lewis Benson: array to Spring
Lewis Benson: and this will take in. My array and this array could be anything if you remember from the assignment we did with the book and the bject. This is a future array. We don't know what the current value of it is, even though we have this array up here. I'm actually going to create a couple arrays just to show you what I mean. We have fruits. We can do. veggies
Lewis Benson: so the vegetables I'm thinking of right now are actually fruits
Lewis Benson: we'll just have one in here for now. we'll have one with one item and we'll have one with three items and we can always add to it as well.
Lewis Benson: all right, so this is taking an array. And what we want to do is output something else from the results. So we're going to bring in my array and we're going to do stuff to it. So let's create a new string st. My Str equals I'm gonna use a string template literal. and we could say my
Lewis Benson: favorite
Lewis Benson: food items are awesome like this. and we say my array Dot join
Lewis Benson: And we'll just join these on a comma That way it won't have the word and in there for the second to last one, for the proper way you would say. Apple banana and Cherry that's a little bit more complex to do. But for now we'll just do it with. Apple banana Cherry like that is a regular list and then we'll return my Str. And we don't know what these items are going to be. fruit could be vegetables. I could make an array of meats an array of cereal. It doesn't matter what array of pass in my array represents any future array, which makes this a dynamic function. and now if I console.log
01:15:00
Lewis Benson: array to string I can now pass in. my fruits array Let's take a look.
Lewis Benson: My favorite food items are apple banana cherry. And then if I pass in my veggies.
Lewis Benson: My favorite food items are uce. I understand that. We have some. Issues of plurals that is an issue that is actually a common code challenge too is creating a function that handles a list of items and then deals with what happens when you have a three items what happens when you have one item and then modifying each part of the string. That's when we start getting into conditionals. if we were to put in something and say if this string or this array has only one item then use the word is instead of r If it has at least three items and then take the second to last item and use the word and before you print that out. There's a lot of things we'll learn as far as conditionals go. But for now, we can see that if I type in either array we get two different results and think back to your book. function
Lewis Benson: I noticed some of the functions. You were passing in the global variable instead of the parameter. So if I were to put in fruit.
Lewis Benson: all right my array is being declared but never read and now when we look at the veggies being passed in we're still getting the fruits coming in. This function is no longer useful for all lists. It's only useful for the fruits array because we hard coded that in there. So that's why we want to make sure we're using this The parameter allows you to pass in whatever data you need to make this work. Does anyone have any questions about the parameter usage?
Lewis Benson: Okay, I'm going to recreate this function as an arrow function. Just to remind you of that syntax. So I would do st. array to string as arrows what I'll call it. And this is going to be assigned to an anonymous Arrow function. So we'll pass in our parameters. my array We'll put in our function Arrow. I'm going to put in my code block. And then we'll do the exact same thing. We did here. I'll just copy and paste this down because everything is also the same. So there is this done as an arrow function one of the things with arrow functions. It's just kind of a little syntax. We'll call it syntactical Sugar. Whenever you have one parameter, you can actually remove your parentheses.
Lewis Benson: But if you don't have any parameters, you have to have empty parentheses. And if you have at least two parameters, you have to include parentheses as well. Don't worry about it. If it doesn't make sense if you're confused about that just put parentheses all the time. this and you won't have to worry. But you might see an arrow function that looks like this it does the same thing. then if you have two ar's in your function declaration, you have to include parentheses for that. So I'm saying my array and my string or whatever. My second parameter was I have to have parentheses. If I tried it without the parentheses we get syntax there. And then if I have one parameter I can do it without and then if I have none I get a syntax there. So I have to include empty parentheses. So just one of those things. It's kind of a side note.
Lewis Benson: Not too worried about anyone being experts on Arrow functions yet, but I do want to be somewhat familiar with them. So when you see them, what they are and how to deal with them. And then it takes in my array like that. And then this one will console.log the fruits.
Lewis Benson: And let's see our results. And we get the same result that we would expect out of the normal function declaration. Anyone have any questions about the arrow function?
01:20:00
Lewis Benson: And this is a fairly new thing. I want to say six years ago or so, maybe seven years ago. This is Around when this came out, so it's growing in popularity quite a bit because of how compact you can make the Syntax for this. You could actually bring that everything into one line if you wanted to. and then not even have to assign this to a variable if you're using it as a parameter. we'll get into callback functions and a couple weeks but it does have its uses so you will see it and being used quite a bit in the industry. In fact, when we start getting into front-end Frameworks, you'll basically be using nothing but Arrow functions just because of how they interact with this keyword later on. All right. So next is objects.
Lewis Benson: The object again, I believe is the most important. I'm going to stick with my superhero theme from yesterday. Super Heroes
Lewis Benson: And we're creating an object literal using our curly brackets, and we're going to start putting in some property names. So we want our name.
Lewis Benson: Bath man, we'll go with Batman. And then his city was Gotham.
Lewis Benson: And this is a common bug. Forget the commas make sure we have our commas in between each item.
Lewis Benson: is vigilante
Lewis Benson: That is true. allies we can have an array within our object so we could access these
Lewis Benson: this last one is questionable.
Lewis Benson: And we can also put methods inside of our objects. And again a method is just a function if you think of each of these as a variable. So I could do let name equal Batman, but it doesn't give it any sort of understanding of what it's related to. So we're using an object for that. Think of this as a variable even though it's not technically a variable. It has the same behavior as a variable because we can assign functions to variables like we did with this. function we can also assign functions to our objects as methods. So we'll Is the key and again if I were to put a string here and it just said This would be a valid e but this is not a method in order for this to be a method instead of returning a string when we access the introduce key. We need to put a function.
Lewis Benson: and then we can log.
Lewis Benson: I am this dot name
Lewis Benson: the protector of
Lewis Benson: This dot City. And just to recall recap on the word it is referring to the name of your object. So if you would access each property as superhero dot name when you're inside of the object and only when you're inside of the object you can use this dot name. If you created another helper function outside of your object and you try to use this this would not refer to the object. It would refer to something else. And that's a little bit outside of our scope. So I'm not going to go into exactly how that works yet in this case this refers to superhero. Are there any questions about this?
Lewis Benson: And I believe putting this on one line makes this a little bit easier to understand why this is a property, but it's also a method and we can even see it has property in our tool tip here introduce as a property. That's assigned to an anonymous function and I'm calling this an anonymous function because when I use the function keyword, I did not put a name here. This would not be valid syntax. You have to assign properties to Anonymous functions. What would be anonymous or sorry valid is if I were to assign it to my arrow function? so if I were to create another method I could say array to string
01:25:00
Lewis Benson: Is my property name? I forgot my comma at the end of this one array to string and then I could assign that to a rate to string this. Notice, I'm not invoking this function. I'm not doing this if I were to do that it would then return this value here. This string and it would assign a rate string two an actual string whenever you don't have that. This is now referencing a function and it will actually create a method. And if I highlight that we see property a rate of string and we can see the function over here. I'm going to remove this from the example just because it doesn't really fit our theme but I just wanted to show you that there are two ways to create methods. There's actually These are the two ways. I'm going to show you right now how to create methods. And we end this in a comma just in case we wanted to add another property.
Lewis Benson: And then to access our properties, I would say console.log. And I could access the name by saying super. hero dot name and we'll take a look at our console. We see Batman.
Lewis Benson: And if I wanted to call the introduce method, I would say I don't need to log because it already has a log. So I'm just going to invoke it directly. If I were returning this instead of logging then I would want to log and I'll show you both ways. So first, I will do console. I just said it again. I will just superhero.
Lewis Benson: I will invoke the function and this will invoke this log method inside of here. Because this doesn't take any parameters. I don't have to place any arguments within my invocation. And I am Batman the protector of Gotham's returned.
Lewis Benson: Now I'm going to modify this a little bit. So it returns it instead of logging it. And we'll say return.
Lewis Benson: and now when I look at line 74 We don't get any results because I'm not logging anything. I see line 72. But line 74 doesn't have anything so I'll have to wrap this in a console.log now.
Lewis Benson: So now we log The Returned value from this method. And we see the exact result that we had before. And that's the difference between returning and logging. It is better practice to return rather than just That way you can store this value inside of a variable or if you do need to log it you can pass that invocation through your You could also store it into a variable and then pass the variable into the console.log again more than one way to do things.
Lewis Benson: We wanted to create a function. This is kind of going into yesterday's assignment to add another item to our allies list. We could call this ad And what we want to do then is create a function that takes in an ally as a parameter. On this Ally is going to be a string. And we need our code block. And then we just do this dot allies. Remember, this is referring to superhero dot allies dot push. I can use the dot push method because allies is an array if I reduce down this property. It is exactly this array. So we can use the dot push method on allies. And then this will pass in the Ally whenever we call this.
Lewis Benson: Does anyone have any questions about how I did this? This should look pretty familiar from yesterday's assignment whenever you were adding items to your objects. That was one of the criteria for yesterday's assignment. So this is kind of a solution for that and what that would look like and I'm also going to add a console.log in here. Just so we can look at the Allies list again, and remember to use this or superhero allies. I'm going to use this because that's better practice. This dot allies and it's going to show me superhero allies. So let me go ahead and add a superhero. I don't need to run a console.log when I invoke this because I'm already logging it right here. And again, I could also return I don't think I want to return anything though for ad Ally.
01:30:00
Lewis Benson: Just because it doesn't really make sense to me to return the Allies every time I add an ally I could create another method to just show the allies. And then maybe Implement some sort of string that shows the Allies in a way that I want to display them, but I'm not going to get into that. I'm just going to run this function now, so it's superhero dot add Ally. And we can pass in Flash.
Lewis Benson: Let's take a look. And there we have Robin Batgirl Superman and Flash all being returned. Does anyone have any questions about that? Okay, so yesterday I had a bug and I was kind of confused And I realized why I had to bug it again to class, but we were already in breakout rooms. So yesterday I did something similar to this. And then I did a console.log. and I tried to see my superhero
Lewis Benson: dot allies and let's take a look at that.
Lewis Benson: Let me undo this one. So what we see here is I don't have the new one added. I have superheroes allies being consoled here.
Lewis Benson: Sorry, let me remove that
Lewis Benson: so now it's not giving me that bug. The problem I had yesterday was though my console.log happened. I think it's because I'm doing this differently now.
Lewis Benson: the console.log happened after everything had already run. Yeah because this is a method now. I had it as a function yesterday what was happening yesterday was the function would run. But my console.log happened already. So I was seeing the result after the function declaration. So in order to demonstrate that bug I'd have to extract this from here. But if you remember from yesterday's lesson that was because I didn't log inside of my function. I tried to console.log after I ran the function. And that's all it was. But this is a method solved that completely anyway, and it's usually better practice to have your functions as methods rather than having them external from your objects. So there any questions about that?
Lewis Benson: So there's a couple more things. I want to cover before we get into the assignment. One of them. I kept bringing up was I will show you how far is a bad thing? So I'm going to do that now. Let's get rid of some of these console.logs.
Lewis Benson: Alright, so if I create a function right now. The reason VAR is a problem is because it hoists within a function similar to when I create a function I can invoke the function above the Declaration. So if I say VAR wasting example, you're going to name this function.
Lewis Benson: VAR has what's called functional scope. So if I do console.log? and I say my spring is what I'm going to call this.
Lewis Benson: and then I say VAR my string equals
Lewis Benson: this is a string.
Lewis Benson: And then we'll do log underneath of my string
Lewis Benson: and then I'm going to invoke this function. Now I would expect this to throw a reference there normally because I'm trying to invoke a variable before So on line 86 the variable declarations happening online I'm trying to access it online I would expect line 87 to work perfectly if I didn't have a reference air happening online 85 That's the normal behavior and every programming language. You have to have your variables declared first, and then you access your variables. So when I invoke this function I do not get a reference error online 85 I get an undefined. So I'm accessing a variable. It has been initialized but it hasn't had any value assigned to it yet. And then online 87 I'm seeing the value of that variable. This is very prone to bugs if this happens.
01:35:00
Lewis Benson: If you have a variable being declared. It should throw an error. if I change this to let and I look here I get uncaught reference error because you cannot access my string before initialization. This is the normal behavior of every programming language whenever you're creating variables. So that's why JavaScript introduced let and const to fix this problem here. There is another problem with whenever you have a globally declared variable. So if I say VAR? my other string equals, There is this thing in JavaScript. It's called the window. Let me console that log of the window. And to show you all the stuff that's on there. and I also got a fix my
Lewis Benson: reference error here so this is the window it contains the document it contains everything about your
Lewis Benson: window basically everything on my screen here where you're currently scrolled out on the window the screen size you're using everything that has to do with your window is here. There are tons of methods there's tons of objects part of your Dom is on the window. Pretty much everything that has to do with your browser window is inside of this object. What is also in here? Is something called my other? string
Lewis Benson: not sure where it's at right now in here, but if I log window Dot my other string and then we get rid of this filter. It's here. It's actually showing up on my window object and this could be a problem if you named your Something that's already in the window. So if I look in here There's a lot of stuff in here. And if I called my variable close if I had let or sorry VAR close. I'm now overwriting This function is no longer going to exist and I'm going to be removing some of the functionality of my browser. If I anything in here move by some of and here you can see my other strings right here now. It exists here.
Lewis Benson: But any of this stuff in here I could end up overwriting it by accident and not realizing what I'm doing just by thinking that I'm using a unique variable name. timeout I can remove my set timeout function. Just because I created my own variable called set timeout or stop or any of this stuff and there's so many in here. It'd be easy to make the mistake.
Lewis Benson: Air event all these different things in here you could accidentally overwrite by using the VAR keyword. So that's one of the pitfalls of using this globally and when I have it in your function. It's just unexpected Behavior. It makes your code kind of hard to understand because this should be throwing an error. If I were to look at this I would immediately think you have a variable that's Undeclared. I'm not and if you had a ton of extra code this was all code in here. This would be like, what is my string that doesn't even existence? And then I would scroll down through all that this role filled up with code. I'd finally find it and it'd be so hard to understand. What's Happening Here. So you want to make sure you're not trying to access variables ahead of time and you're using the tools that come with JavaScript the air handling that's building is very important you want this to actually throw.
Lewis Benson: Oops, I didn't mean to. Throw reference errors whenever stuff like this happens errors are important. I have as far so this is says let and I want to actually see this happen. I want to see the reference error occur. This is telling me that there's a problem in my code and I need to fix it. Does anyone have any questions about that?
Lewis Benson: So that's why we avoid using VAR again. you will see it and if you get a solution from stack overflow. They may try to use this in the global scope and they may have some sort of weird solution where they're using the window object in order to access variables on other pages. It's something that occasionally happens. I wouldn't recommend using them Solutions. Perhaps try to find a different solution. If it's your only option though, there is times where you might have to resort to this. I've never had too personally, but I've heard of people using VAR and very rare instances, so don't completely throw it away. Could be something like this where for some reason you need to access a variable before it's declaration. I don't know why you ever would but if that happens.
01:40:00
Lewis Benson: There is that option. But again avoided it all cost if you can just look for other Solutions.
Lewis Benson: Okay, so that's all I want to get into with VAR. Let's see what I got here. There are a couple more points. I want to show. One of them is called destructuring. I want to share this briefly because it's something you'll see quite a bit when you're looking at code Snippets, you'll use it quite a bit when we get into front-end Frameworks, maybe not so much now at this point it would just be kind of syntactical sugar. It's a way to grab items out of objects in a way to grab items out of variables. So let me show this in action. I'll use my fruits array up here. I'm going to access the items in it so I could say first. root equals and what I want to do here is actually wrap this inside of square brackets.
Lewis Benson: And what this will do. Is actually grab the first item in my array so I can say second fruit third
Lewis Benson: Fruit, the only time this is actually useful though is if you know exactly how many items are going to be in your list. So that's something to keep in mind that I'll show you a use case where that could be useful. And then we have fruits. So now I can. log first fruit
Lewis Benson: I gotta get rid of my syntax error from above.
Lewis Benson: And I gotta get rid of this function about that. All right. So there we have apple is my first fruit. So all I'm doing is creating three variables. They're all constant variables and I'm using the array syntax the square brackets to tell it this item over here is an array and I want to create three variables all at once. And each of these variables is coming out of this array and whatever order this is in so this would be the same as if I were to say. I could do the exact same syntax. I'm going to do it. I'm just gonna comment this out and show you the other version the long hand way so I could say const first. fruit equals and we do fruits at zero.
Lewis Benson: and then const second root equals fruits at one And then the same thing for third fruit you would do the same syntax. So this is a shorthand to do this. It'll do the exact same thing though. And then you can do the same thing with bject So we have our superhero object With objects. It's a little bit different. You can't name the function or the variable whatever you want. So I'd say const I put in my curly brackets and I'm going to put in superheroes. and then whatever you pass into these objects has to be the property name, so I'd have to say name comma We can do allies comma and it doesn't matter what order they're in when you're dealing with objects. And we can do City. So I just want to grab these three here. And now these are variables instead of properties on my object.
Lewis Benson: So it does the same thing as if I were to say const name equals and it's going to throw this error here. Let me comment this superhero dot name so this name would be assigned to the same as that. So it's just kind of a syntactical sugar. And again, it's only useful if exactly what properties are on there with their names are because they have to be exactly the same as the property name whenever you're using the structuring on an object. You don't have to memorize how to do this right now, but you will see it occasionally. So I just wanted to kind of throw it out there that this exists and you may run into it. Are there any questions about destructuring?
01:45:00
Lewis Benson: So here's that syntax. Let me put a star here to make these light up.
Lewis Benson: Just so we can see that. So again just in order it does the same thing as this. It'll do first Second freaking call this whatever you want. I could call this banana. And whenever I would console.log it it would actually show me Apple so that would be a little weird but you can call these variables whatever you want with objects. They have to be the same as the property names.
Lewis Benson: And another one I want to show you that I find very useful. you'll hear this called the spread operator. It's actually not an operator. It's just one of those weird things that developers say. So the spread operator. Is used for cloning arrays. So we have our fruits array up above if I wanted to duplicate that ray. What I could do is say let ar I pass in my square brackets for my new array and I can say dot groups. and what this will do is actually spread the elements into new array. So, let me just log my new array. And what we're going to see is a deep copy. Of the exact same array.
Lewis Benson: And what I mean by Deep coffee is a fruits had nested arrays in it. It would duplicate those nests that arrays as well where other copying methods might not give you the nested arrays and what just tell you that there were the data structure there. So this is a very very useful tool. What's cool about this. Is you can do something like this you want to duplicate the fruits array and then you can add more. so second item this would actually be the fourth item now because this has three items in it. And then we can add another one. what a mango And when we look at the array we get apple banana Cherry peach mango has five items in it.
Lewis Benson: Very handy for like Another good use case for this is if you have a function that takes in multiple parameters. You can spread the parameters into your function. also if I console.log and dot Roots like that
Lewis Benson: we get this as a string that's separated by spaces. So that's kind of neat there. Let me do that with the new array.
Lewis Benson: So this is just the string. It's spreads out all the consoles and returns it with a space in between each one. So we are able to do this as function parameters as well. So if you had multiple function parameters it will actually Place those in let me show you what the difference here would be if I were to do this by hand first, and then maybe this will make more sense. I said without the square brackets there comma new array at one and so on. So this would go through every single index and this is exactly what this syntax does. Is it writes this out for you? So that you don't have to write all this out manually like this. You can just put three dots put the name of your array and it will spread all the elements out just like this with a comma in between each one. You won't see the comma.
Lewis Benson: and here are the string because if you look at this one, I have a comma here, but you're not seeing this comma show up because the comma is separating each argument within this function. So the log function required or it can have as many parameters as you want or many arguments as you want. And they're just separated by commas. When you do the spread operator, it'll do all that for you. So if I wrote another function
Lewis Benson: and I could say we'll call this And we'll say dot. items
Lewis Benson: I would have to have an items array declared.
Lewis Benson: But we could use whatever we want so we can use our fruits array for that.
Lewis Benson: And then we can just do consoled items
Lewis Benson: and it's going to log all of those items together. But we want to use numbers here. because this is an array and we don't know how many are in it. This is a little tricky to show you without using Loops. But what we could do is items at
01:50:00
Lewis Benson: I can't actually show you without the looping we can do the console.log. and show you the items like this and we'll just call this list items instead. and I apologize for I keep wanting to dive in a little deeper than what we need to go. Here We Go pass some fruits
Lewis Benson: and just make sure everything syntactically looks good. And where you're seeing the items coming in as an array now because we're spreading it in because anyone have any questions about how I just did that.
Lewis Benson: And again, this is just like a brief overview of this. It's things you might see that's not stuff. You're going to necessarily have to do with the assignment. There might be something to do a spread on there, but it'll be very basic if there is. And then the last thing I want to share you I can actually keep this here. I want to bring back that some. I want to show you a method. It's called reduce. And What does a lot of stuff but one of the main things it does is allows you to add up. any number of items So we already have our items here. That's an array method. It uses a callback function. We'll get into what callback functions are actually like how they work later. I just want to show you how this works in case you need it.
Lewis Benson: So this function is one of the more complicated array functions the fact I think it's one of the most complicated don't Libby intimidated by it the piece I'm going to show you is fairly simple. It has two parameters. That has a total. Sometimes you hear this called an accumulator. And then it has the current number that it's on. I'm actually going to use current here that makes more sense to me the number. And then this requires a function, so I'll put in a function. anonymously
Lewis Benson: and I did this backwards because I was going to use an arrow function at first. So let me move them over like that. There we go. So this takes in a function as the parameter. Notice, it's an anonymous function. It doesn't have a name if I wanted to I could create this function separately and pass in the name of the function so I could create it outside of here reduce
Lewis Benson: and then I could pass this in I'll actually do it this way just so it's a little simpler. And then inside of our callback for the reduced this is what we actually put the logic for this and again, this takes them two parameters. total and current
Lewis Benson: and then we can say return. total plus current and the second parameter is where We're going to start at zero. and what this will do is add up every item being passed into the function and it will return that number so I can just say return. We can't use fruits I will actually have to have an array of numbers. Because this is not a sum function.
Lewis Benson: And let's just pass in.
Lewis Benson: five five and five and we're not logging this let's do that.
Lewis Benson: I'm not expecting anyone to be an expert on this function or how many of this works. I just wanted to introduce it. So you can get a little bit of a head start on some of these more complicated array methods that require callback functions.
Lewis Benson: And I think it's because of the way I'm spreading that in.
Lewis Benson: If I just pass it in without spreading it we get three to add up because it's separates everything with a comma it's not actually an array. So in order for me to do that, I would actually have to say like this and then do the dot dot and that's not working either. I'm just gonna not put that in because again these are comma separated values. Without a loop. I don't know how to actually make that work properly. And I don't want to bring in Loops yet those. Be a little bit intimidating. And I don't want to put too much on everyone at this moment. But again, this is the reduced method. It takes in a function for the first parameter and it takes in a number for the second parameter. And then in your function, you have two parameters that are required total and current and it just takes whatever your
01:55:00
Lewis Benson: Current running total which is starting at zero. And it looks at the first item in your array which in this case was five. It'll add 5 to the total. which was 0 And then it runs a second time. It'll add five to five and give you 10 and then it adds five to 10 and gives you 15 so it's a little bit weird to look at. I just want to introduce it so you can see what it looks like and how it works. And if you want to learn more about this one prior to starting the next JavaScript week. You could look up some YouTube videos on this and get a more in-depth on how the reduced method Works totally optional. I'm not requiring anyone to be experts on reduce or anything. I just wanted to introduce the idea for anyone who wants to work ahead and learn some of these more complicated Concepts like callback functions and the reduced method
Lewis Benson: any questions at all about today's review
Lewis Benson: So whenever a lot of stuff today again, it's everything we've gone over except for these last couple pieces here. Just some optional syntax. I wanted to show because it will be used later again for anyone who wants to work ahead. You can start using these more and start diving into some of these cool syntactical sugar things is what I like to call them. the destructuring and the spread there's also one called rest. I'm not gonna worry about that one today, but it's another variation of the three dots where? you could have the three dots on the other side.
Lewis Benson: of the array and it's kind of used with destructuring where you would have the first couple items. Let me actually show you realistic one. But again, I won't go in depth with it.
Lewis Benson: If I was destructuring. I wanted to get the first item. I could then say
Lewis Benson: fruits dot dot and it'll just do the rest over here. as an array so just a little bit more like weird syntax that I rarely ever used this syntax, but if you wanted to explore that feel free can be useful. But again, you can do all this manually just by typing in each item. Alright, so let me get the assignment for today.
Lewis Benson: This will cover everything we learned this week.
Lewis Benson: four day five
Lewis Benson: So there's a lot of steps here, but if you just follow from the top of this and work your way piece by piece. This won't take too long to get through most of these steps when we start getting into some of the methods and functions. Those might take you a little bit longer, but we should be able to get through this in an hour. If you're using your Tas and asking for assistance whenever you get stumbled or stumped on any of these Concepts, okay, so we're going to be creating our normal files our index.html. We're going to create our script.js. And we won't be working with the HTML Dominus assignment. What this is referring to is the query selector. We didn't get a chance to get into that just yet other than me showing you that one day how you can change your background color. So don't worry about that note.
Lewis Benson: So first thing you'll create a variable called first name sign it to a string create a variable to your age. This is the variable review. We're going to do a variable called is student true or false everything in here is just to get you that grasp on how to do these workflows how to create these Generated log that concatenate your first name your age and is student variables into a string. And you could have something like this. If you see the example here inside of the instructions.
Lewis Benson: An actual create an object named person with the properties first name agent is student. It's going to look very similar to the variables above.
02:00:00
Lewis Benson: you're going to and ensure it has the correct properties basically just Create this string again. Whenever you do your console.log, and that'll be fine. That way you can just kind of copy paste that Create an array called fruits looks familiar. in the array you're going to create use an array method to add a new fruit. If you remember what that array method was. I used it earlier in the demo. Use that one to add fruits to your array. I wouldn't expect you to use indexing to add items if you wanted to. Do that. That would not be a good practice in this case. Use the array method to remove the last item of fruit use an array method to remove an item from the front of the array. Again, we went over those.
Lewis Benson: And then we have log each method utilize with some text. So you can see that is occurring to call the method. So what it says use with some text. That means add a little bit of a flag there saying this is my push method or this is my pop method or whatever when you're using and then have the comma plus, whatever your days your outputting. And then we're going to create a function called calculate perimeter. That calculates and Returns the perimeter of a rectangle. The function should take in two parameters the length and width. And then create a function named reverse array.
Lewis Benson: That takes an array as a parameter and returns a new array with the elements reversed and you can built-in methods or create your own logic. You'll probably want to use the building methods unless you're filling Brave and want to try something new here using your own Logic for that is rather complex, but if you want to give it a try go for it. And then log the results of your functions and the content of your objects and arrays. And then here they have an example for that. Are there any questions about today's assignment?
Lewis Benson: Okay, if there's no questions, I'll get the breakout room started. I do ask that as long as you're caught up on week four as far as the lecture goes that you work on week four assignments. There will be a review week where you'll have an opportunity to go back and work on previous assignments if you've been feeling kind of constrained on your time. If you need that catch up time, you can use that during that review week. There will be kind of some challenge assignments that are optional they won't be graded, but they'll be for anyone who is caught up. It'll give you more practice on what we've already worked on. The week is designed for review and reinforcement of current Concepts. So keep in mind we have that. We also have the Thanksgiving week off you can use that to also help you catch up on those previous assignment. So make sure that you do work on JavaScript assignments for this week.
Lewis Benson: And if you need any assistance with anything, make sure you're reaching out to myself or the Tas. And let me get the breakout room started and then we can start your 10 minute break when you reach the breakout rooms, and we'll be around to answer questions. And use the Google meet tolls to request help if you need a media assistance on anything or have any immediate questions. Before I do open a breakout rooms or learn any questions. Maybe about the assignment or about anything I've covered.
Lewis Benson: Okay, I will open up breakout rooms take your 10 minute break work on the assignments collaborate with each other use the screen share. If you want to share your code with each other, that's fine. Just make sure that you're communicating and working on the JavaScript.
Lewis Benson: Okay, I'll start the breakout rooms now.
Meeting ended after 02:04:46 👋