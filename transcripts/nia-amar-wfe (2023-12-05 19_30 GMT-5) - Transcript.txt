nia-amar-wfe (2023-12-05 19:30 GMT-5) - Transcript
Attendees
Brian Kimbrow, Chantrice L, Daniel Perez, Elgin Sharper, Gregory Robertson Jr, Iris Coats, Krystal Jefferson, Lewis Benson, Lewis Benson's Presentation, Ryan Arnold, Umar Z
Transcript
This editable transcript was computer generated and might contain errors. People can also change the text after it was created.
Lewis Benson: All This is our seventh week day two. We're going to be reviewing CSS. I want to get into. The layout mainly because I think that is probably the most difficult part to grasp but I will cover some of the fundamentals as well and just give a good refresher on it. I know it's been a long time since we really touched any real CSS when we got into bootstrap. You may have seen that it does a lot of the work for us and it may feel like that bootstrap makes Obsolete. But having a firm understanding and CSS. Can make bootstrap significantly easier to use as well as enhance what you're doing with bootstrap?
Lewis Benson: Also, there's some places that don't allow you to use a styling Library like bootstrap. They'll want you to use your own CSS and create your own custom styles. That way it's very unique to whatever it is you're designing. So it is good to have a firm grasp in the fundamentals of CSS. So let me just kind of dive back into the documentation for CSS is crucial. There is so much. Content in here, you would never memorize All the idea is that you just kind of memorize where to find what you're looking for and not how to actually implement it by memory for the most part. So here is There the MDM documentation. This is my preferred documentation. Some of the things on here we want to look at are selectors.
Lewis Benson: So we have a few different ways to select elements. We didn't get to see this again a little bit in JavaScript. So I gave us a little bit of refresher on there. Here we're seeing an example where They're using the 1 selector specifically. We also have a paragraph selector. And then we're here we see Using a class with the dot notation. I believe if I go down to here we can see the different types selectors
Lewis Benson: and we also have this Universal selector. I think I showed that once it might have been during JavaScript. It'll select every single element on the page. This can lead to a lot of weird inheritance things happening Styles getting applied to elements that you weren't expecting them to be applied to. So this one you have to be careful with but there are use cases for it. One of them is during your reset to set everything's box sizing. So that it's all the same across the entire application. Another thing I want to touch on today is the Box model again. I'm just to kind of remind you of how this works and how you can use this to plan how you're going to manipulate your elements. So with that, let me open up some. vs code
Lewis Benson: and I have my HTML already made here. It just has an H1. I don't have the CSS LinkedIn. So let me go ahead and do that. I got my empty style I'm going to place the style sheet and The reason it goes into the head of the document is so that it preloads your Styles onto your page before it starts loading content. That isn't styled. Also, the head has a display property of So anything you place within this area is going to be invisible on the document. The title is kind of an exception because it does show in your tab what the name of the title is. But it doesn't show up actually on the Dom the tab isn't considered part of the Dom. It's part of your UI.
Lewis Benson: All So just a quick review on how to make all this work. Basically, I'm gonna go into my CSS sheet and I'm gonna set up a selector for my body element. And to do that I'll just type in body. I'm going to put in a code block. This will be the scope of the CSS code on the body. So anything I put in here is going to be applied to the body directly and I'm going to do this just to make sure my CSS is properly linked and working correctly. It's kind of like when I would create a Javascript file and place that proof of life or Worldconsole.log. I'm going to do the same thing with my CSS. This could eliminate future bugs that I don't have to worry about it. So I'm just gonna do a background color. And I'm going to sign up to Blue. So this should pretty much blind us when we look at the page now. There we go.
00:05:00
Lewis Benson: That's working. So now I can remove this because I know that it's linked up correctly. And that's all I really wanted to do with this selector is get that. The next thing I want to do is add my reset file. This should be a pretty common part of your workflow whenever you're dealing with CSS is to have a reset file. So I'm going to go to my browser. I'm gonna search for a reset file and I'm going to bring that in.
Lewis Benson: And we've been using this Meyer weblink here at the top. There are some other ones available out there. If you wanted to look at some of these such as One on this blog here. We can see what his looks like. We'll try it out. I see he's using the border box here. I don't think that the Meijer one includes that so I'm going to include this one just because I like having that in my reset.
Lewis Benson: And we'll see what this looks like.
Lewis Benson: Okay, this is imported in so, let's see what our text looks like now.
Lewis Benson: And it didn't look like it changed my font. So maybe I'll go back with the other one and just include that one piece of code just because I like to have the Aerials and all that and this doesn't seem like it's doing all the stuff. I just wanted the crowd another one. There are other ones out here. If you you can even create your own if there's certain things you're looking for with a CSS reset. And again, this one doesn't have that border box. I'll just add that manually.
Lewis Benson: And I'll place that right here so that we get that little piece of that reset from the other one. This bit here and what this does is it makes it so when you're setting your width it doesn't account for the width of border. Or your padding as part of the overall width. So if you don't use this and you put a width of a hundred pixels and then you put a 10 pixel border, then you're gonna have a total width of 120 pixels because you're left borders 10 pixels and your right borders 10 pixels and it can throw off your math. If you're trying to do everything Pixel Perfect. So having this little piece of reset here is great for setting your widths properly without having to think about the sizing and do any sort of adding up of your paddings your borders. So that's what this here does and we'll see what we should have our correct font size now. They're still not using that I'm just gonna throw that in my regular style sheet then.
Lewis Benson: I'll put this on my route. Anytime you're using the root selector. This is called a pseudo selector because it has this little colon here anytime you're using the root selector. You're actually selecting your HTML.
Lewis Benson: Yeah one more. You have a question.
Umar Z: Yeah, the question is. don't we need to link the reset or css in index.html?
Lewis Benson: thank you very much. Yes, we do. Our Krystal. Did you have a question too or was you think bringing up the same thing?
Krystal Jefferson: Go back over the reset one more time.
Lewis Benson: Yeah, so I just copied in a reset from Google. I'll leave it because I can see they don't have the font sizes here. I typed in reset CSS as a Google search. And again, you could pick whichever ones you like. They always do a little bit something different depending on which one you pick the one I went with this is Meyer web one here, but I did take a code snippet out of this one from Josh W came The snippet I took was this piece right here? This box sizing and…
Krystal Jefferson: Okay.
Lewis Benson: I'll show that again in my code if you wanted the screenshot that little snippet. But let me go back into the Meyer web.
Krystal Jefferson: Okay.
Lewis Benson: This is the one I actually copied and pasted.
Lewis Benson: So you just come in here and you just select all of this inside of this little block. And you can copy. And then I'll go back into my CSS.
Lewis Benson: And I just pasted it right here. And this is the piece that I mentioned that I took from that other. blog this sizing border box The main thing you want to select is just the asterisks. If you were just doing this by hand. I'll show you how you would just type this in. Let me just remove these temporarily. I'll put them back whenever. We have it set. So if you just select the asterisks at minimum Asterix, which selects all elements and then sizing border box these two pseudo selectors. There are all so included in here this before element and this after element. These are for your unordered list or your ordered lists. They include these pseudo elements as we're like the little dot in front of your list items.
00:10:00
Lewis Benson: There's some other times where you create content. That's before element. It's a little bit more of advanced technique that we don't really show here. But if you watch a lot of code along stuff on YouTube for practice, you'll eventually run into something where maybe you're creating a hamburger menu through pure CSS. You're not using any sort of external library and that's how you would actually do that. You'll have a minus sign. And with the minus sign you'll use a before selector which will create a copy of your minus sign above it. And then after which will create a copy of it underneath of it and then you can stretch it out using your font size and it will give it that look like a hamburger menu. So let's just one little little tangent there about that.
Lewis Benson: So let's make sure this is working now that we wired that in. Thank you again for reminding me to wire up the reset that it definitely explained why I wasn't getting the correct stuff
Lewis Benson: so we can see now it took all the margin off the page. We have margin at the bottom. Let me just show the difference between these. Let me go side by side here with this.
Lewis Benson: and I'll be that to get rid of the
Lewis Benson: so if I toggle my reset we can see the difference here. It removes the font size. It removes this top margin and it removes all the padding when I toggle it back in I can see all that comes back. The one thing I do want to change though. I was actually in the middle of changing is my fonts style here or font family. I want this to be a Sans serif font just because I prefer It's just my preference. If I comment this out, you can see the difference between the two fonts. I just think this is a little easier to read up front. So anytime I'm building anything. I'll always use a Sans serif and then I'll use the serif font as an accent.
Lewis Benson: So maybe my H1 is on a serif font, but the rest of my page is in Sans serif font and having that little bit of contrast does make things pop a little bit. This small details can really help out there. Also, I was mentioning. this root selector is referring to HTML. So the HTML elements surrounds the entire document you can see the closing element here. So whenever you select root it's going to the most outer element in this case is HTML. I suppose there could be a way to create a document that has a higher level element, but I've never tried it. I think the browser would just end up creating an HTML element regardless, but this is what that refers to your most outer element, which is in this case HTML.
Lewis Benson: And within this root element. That's also where you would assign any variables if you wanted to store colors. And then you could use those throughout your Styles in order to actually set your colors. For example, I could say
Lewis Benson: I need to look up the syntax again. It's been awhile since I've used this. We'll go into mdn.
Lewis Benson: I could just check the document on here and It'll have some so some keyword or some color. On so this is the variable name and then this is the value. So we do I'll say. red and then we're gonna assign red to be whatever color red. I want. So for now, I'm just gonna not far right I'm gonna set this to regular red. Put a semicolon. I'm hoping to get that Color Picker There we go, and I'm actually going to change this to my own variation of Something like that. And then in my document if I want to use that red. I could change save my H1. And give it a background color of VAR.
00:15:00
Lewis Benson: red like that -red
Lewis Benson: and when I look at my document, we're now using that variable. The reason this is useful if you have all of your colors predefined in the root of your document. your CSS can end up being Thousands of lines of code you could have 30 different CSS sheets. But you could put all of your colors into one document. In fact, you could actually create a whole document just for this and you could say root dot CSS and then inside of your root CSS. That's where you would place. all of your colors for your entire page And you could have an entire color palette laid out in here. But if you wanted to come in and change the theme all you have to do is update this color here and it will update every single red on the page that you're currently using. Let me link that in.
Lewis Benson: I'll put it above my reset but underneath of my style. So this would be a link.
Lewis Benson: And this is called root.
Lewis Benson: There we go. So kind of an advanced technique here, but it is really useful and you can actually do something like this. You could call this header instead of red. You don't have to call it a color. So that I would change it to header here. And then I know exactly where this color is. And if I wanted to update my header, I would do that inside of here where I have all of my other colors listed I put Main. and we'll set this to #f4f4f4 It's kind of an white. And then if I go into my Styles I set We'll do background color.
Lewis Benson: Dash and the one we want to use is mean so this is our main color. It's hard to see that off white. I'll just drastically change it quickly to something else. We'll do blue. And you can see that it updates my main. And if I was using this color in multiple places, it would update everywhere at once. So very handy little trick here to get all of your colors to be updated across all of your CSS Pages all of your HTML because remember the root is in the most outer HTML. So as long as this is On linked into my document. It doesn't matter which one I'm using it in. It'll have access to it. Does anyone have any questions about that?
Lewis Benson: I know that's a little bit different than what I've shown before but it's a really handy trick. It's a good way to just kind of make this more modular so you don't have to update 10,000 lines of code.
Lewis Benson: All So let's keep moving forward then.
Lewis Benson: So I want to talk about the Box model a little bit. And if you remember inside yes, Ryan, you have a question.
Ryan Arnold: For if we want to go back and reference something we have access to these videos during Capstone week.
Lewis Benson: Absolutely. Yeah the videos. I believe I should be able to keep them up as long as I don't run out of space on YouTube. If I do run out of space then I can send you direct links to the videos because we have these into a cloud storage as well and we won't run out of space with that. and if that is the case and you're using the cloud storage version of them, the quality is at the maximum, you can't turn it down. So it does require high bandwidth the watch of in that case. That's why we're using YouTube as a Wait for you to watch the videos. But yeah, these should have access for at least a year or two before we run out of space on these videos.
Ryan Arnold: Okay. Thank you.
Lewis Benson: Yep.
Lewis Benson: All right. So the Box model again, I wanted to show this inside of the dev tools because this is the place where you can actually see a visualization of it. So I'm just gonna select my header. And we're going to look at the Box model inside of the dev tools of that header and we can see we have no margin. We have no border we have no padding, but we do have content and what I want you to remember with the Box model and it is good to memorize this. margin is on the outside? And then you have your Followed by your padding and then your content the order in which these are laid out is absolutely essential to understanding how you're going to be manipulating your elements on your page. So let me actually create an element and manipulate it a little bit.
00:20:00
Lewis Benson: In my index. I'm going to create a main. and I'm just going to put for Content. I'm just gonna put the word content. So that just doesn't collapse. And that it actually shows up on the page. and then my style.css I'm gonna select that main element.
Lewis Benson: And I'm going to just kind of manipulate it a little bit first. I want to give it a background color. and I'm going to keep up with our little thing there.
Lewis Benson: I called this main. I'm actually going to rename this to actually leave that one. I'll create a new one called body. And we use this color here on the body. And I'll change this color to something else so that we can actually see it clearly. We got kind of a purple color.
Lewis Benson: I keep clicking.
Lewis Benson: Try something like that.
Lewis Benson: Not sure why that's not letting me actually select what I want to select.
Lewis Benson: Keeps closing on me. I may have to go to Google's Color Picker.
Lewis Benson: On that one's not behaving. This is another option as well. We can get our little hex code there and just copy that out. We'll kind of a lighter. Right in there somewhere.
Lewis Benson: And I'll just paste that This is what we want to use for the nurse semicolon.
Lewis Benson: And it looks like it's showing up correctly. So now I'm going to reverse these so that my body. is body And my main is mean. I remember what Here we go. Now I'm going to give this a height. of 900 pixels
Lewis Benson: I'll give it a width. of 500 pixels and I may have to make this inline block.
Lewis Benson: In order to get it to not take up the hole with the page.
Lewis Benson: Okay, it seems like it's behaving. But I think it's a little bit too big. Let's go 400 pixels. I just zoomed in really far. Yeah, that's what it is. Okay.
Lewis Benson: All So there's our Square. I'm gonna give this a margin. Of probably 90 pixels just to get it away from everything. And then I want to give it some padding.
Lewis Benson: 50 pixels that'll push the content down. And then last I want to put the border on it.
Lewis Benson: We'll do 10 pixel border solid black using that shorthand. And let's take a look at that box model now. I'm actually see these differences.
Lewis Benson: Shown on this element. Let me actually select it. So we can see Margin our 9.6 pixel border so we did lose. Four tenths of a pixel there. I'm not sure what that's about. I might just be the way it rounded up perhaps if I were to change the value it would fix it. We have a 50 pixel padding and then we have 380 pixels of content. So if I highlight over this and I just kind of hover on it. I should get a total tip coming up. I'm not seeing the tool Usually tells me some information about it such as the sizing and everything. I get it on the H1.
00:25:00
Lewis Benson: there we go. So if you look at the bottom, it's a very bottom. It doesn't show up when I highlight it but it shows up when I hover it over here. I was showing that that is a 500 by 400 pixel element and if I were to modify my reset to not use that border box, it would actually increase the width of this with the 90 pixels of margin and with the 10 pixel border on both ends. and the 50 pixels of padding it would actually extend it out wider than what we would expect so because we're using that reset it's Setting the size to 500 by 400 and it's not changing any of that. So it's taking all of that into account whenever it's deciding on the content size. So it's actually removing some of the content size in order to maintain whatever size. We want our overall element to be. And that's kind of a more expected behavior when you're dealing with sizes.
Lewis Benson: I can actually show that we'll go to my index.
Lewis Benson: Pursuing it just there I will. Move that and we can just see that whole thing shifted. And let's take a look at the Box model on this now.
Lewis Benson: So the Box model showing 500 pixels on the content instead of 380. And when I highlight this we can see the width is 619.2 if you can see that There we go. 6 19.2 times 519.2 so it added all that extra stuff in. And if I go back into my code. And I put the reset back in you could actually watch this whole thing shrink the content down so that it fits the actual 500 pixel width. So that's why I like to use that border box selector. It just makes things a little bit easier when you're calculating all of that out.
Lewis Benson: Does anyone have any questions about the Box model?
Lewis Benson: Okay, so something to keep in mind too your ma Remember that margin pushes elements away from elements. So if you're looking at this H1 and the margin is going to push the main away from the H1. And if I put margin on my H1, it'll push away the mean. However, margin doesn't push on margin. So in this case, I have 90 pixels of margin. So if I put 90 pixels of margin on my H1, at least I'll margin bottom. It's not going to move. This content down any because the If I were to put a hundred pixels of margin on the H1 at the bottom, it would then move this content down by 10 pixels because it'll overlap by 90 pixels and then push it 10.
Lewis Benson: And then the padding is actually pushing the content away from the border. So that's a good way to reconna. Remember how you can move your elements around is if you need to push your content like your text away from the edge of the page you're going to use padding for that. But if you need to push your entire element away from the edge of your page, you're going to use margin for that.
Lewis Benson: Does anyone have any questions or need any clarification on any of that?
Lewis Benson: awesome
Lewis Benson: All right, I'm gonna go back into the documentation here. So we kind of briefly discussed these pseudo classes. I just want to kind of show this list of them here to see what all we have these ones here that have z. It's referring to a not necessarily Mozilla Firefox. But in mozilla-based browser, there are other browsers that are mozilla-based. So if you ever see Moz, that's what that talks about. There's this active pseudo-class. This would be like if you click on you click on a button probably a better example when you click on a button the button goes down. At that time the button is active. So that's what that's referring to. Check this would be like your checkboxes.
Lewis Benson: Some of these I don't use but disabled this could be for a link you can make the link become disabled. You can also do this with a button if you add the attribute disabled to your button. Some of these you might have used the first child selector will grab the first instance of an element.
00:30:00
Lewis Benson: Now we have first of type, but I just wanted to get into show you all of these different pseudo selectors. We don't use a whole lot of these all the time. But some of these are pretty useful you might find solutions that if you're having a hard time getting something to do what you wanted to do. Maybe check on stack Overflow. There could be a solution using the pseudo selectors. This one's fairly new. You could say select an element. That' let's for example a div but not with a certain class. So for this one here. You would say select all divs and less it has a class of large text for example, and you'd pass that dot large text within the parentheses in order to make that work so that one can be useful as well.
Lewis Benson: But one thing to keep in mind is not all of these are supported on every browser. So I do want to show you another tool. It's called can I use?
Lewis Benson: I just typed in. on Google? I use calm So if you click on this you can get in here and see all of your different. Attribute. So for example that not
Lewis Benson: we can see that some browsers don't have support this version of chrome 4 through 87 has zero support for this but it looks like the newer Chrome browsers. It's all supported. So anything before? It looks like between 2010 and 2020 doesn't have support. So this is something you want to keep in mind whenever you're using special selectors or if you're using anything that just feels kind of odd and you're not a hundred percent sure if it's something you should be using or not. It double check it in here and make sure that it does have support we can also see we have zero support for Internet Explorer.
Lewis Benson: Internet Explorer is a deprecated browser. Most systems aren't running it. But if you're perhaps working for the Department offense, a lot of their systems are still using computers that have Internet Explorer on them. So you want to make sure on those older Legacy systems that you're building things that have the older support with them. So using some of the latest techniques through CSS might not be advisable when you're dealing with Legacy systems, especially if you start working in Industries, like the Department of Defense Or perhaps You're Building. It's called intranet rather than internet if you're building intranet systems web pages Just inside of a business and they're using really old computers for this whole system. None of it's connected to the internet.
Lewis Benson: It still needs to have support in the browser. So come in here every now and then and check the stuff out.
Lewis Benson: Here We can see we got support across all of the browsers now for flexbox. Let's look at grid. so grid it looks like we have Some patches if you prefix it with this Ms thing here. You can make grid work, but it does require a little bit of special setup. It doesn't work on this Opera Mini. I don't know who uses this browser, but I'm guessing some people do so just one of those things to keep in mind if you want to have support across everywhere. Maybe use flexbox over grid for some solutions. webgl
Lewis Benson: Yeah, so these are just the top search things, but I believe there should be a list on here.
Lewis Benson: Here we have some latest features. So yeah, just it's a good page to check out and just kind of see what's going on with support. Here's some statistics. It looks like there's a better support for Firefox and chrome than Safari So that's kind of interesting there. I would have thought they were keeping up.
Lewis Benson: So anyways, that's what I wanted to show you with this. Can I use support and some of these pseudo selectors as well? so I'm gonna get into some of the layout techniques, but before I do I want to show you the Positioning stuff now, you probably don't want to use positioning for layout. I've seen this done before and it's definitely not a good idea. and what I mean is using absolute positioning to place this on the page where you want it. So if I wanted this to be centered on the page. And I wanted to use positioning to do it. What I could try to do We'll go into css. And first thing I want to do is remove the margin and padding from it just to make a little easier to work with here. and I'm going to say position
00:35:00
Lewis Benson: absolute and we'll do left. 50%
Lewis Benson: and it moved it too far over. I can use a translate. I'm not going to get into that. So instead of 50% we'll just do 40% 30 so I was kind of guess at it until we get somewhere close. And then we'll do the top.
Lewis Benson: We'll do another 30% to see how that looks. And that's fairly centered until my browser tools and you can see now we have a lot more space on this side than that side and as a shrinks eventually it starts to overlap. So it doesn't give us an actual centered element. Because it's centering it based on its relative parent. So what that would mean is if I put another component inside of this? We have this one set to position. Absolutely. I'm actually going to set this to relative. And this would actually be a little bit better use case for this as well. We're going to remove these.
Lewis Benson: Whenever you have it set to position relative. It keeps it in the flow of the document, but you can use this. positioning here looks like the top isn't currently working because there's not enough space to move it down. But it did move it over. again, I'm just going to remove these and I'm going to place another component inside of this so that we can move that component around inside of this and this would be a better use case for absolute positioning. Because you have more control whenever the elements are smaller. So we have this content here. Let me actually make this a paragraph. And I'm going to say content. to be moved
Lewis Benson: and I'm gonna set this paragraph to Absolute positioning. I'm going to set the main to relative positioning. So this paragraph will be relative to this mean So whenever I'm saying go left, it's going to be going left from the main rather than from the entire document. Okay, so let me show that.
Lewis Benson: We have it set to position relative already. So let me select the paragraph element. And we're going to go position. absolute
Lewis Benson: and now I can maneuver this around inside of that container so I can say top 50 pixels. They don't move it down left. 70 pixels and it moves it to the right 70 pixels. Again, this is something you only want to really use. If you're trying to position something inside of something else an example of this would be if you have an overlaid image two images on top of each other and you want to position them. So that one's relative to the other. at one time made a Pokemon game and I took a picture of the Pokédex and whatever Pokemon I was looking at. I overlaid the picture on top of the Pokedex picture. So it looked like it was popping up on the actual little game screen. So just all use case for where you might want to use something like that. Another one could be if you have a profile picture.
Lewis Benson: And you want the profile picture to be positioned in a certain part of the document one thing that's nice about absolute positioning. It could be a nightmare for you. If you're not expecting it is it takes it out of the flow of the document. So any other content within this isn't affected by this paragraph, so let me show what that looks like. I'll create another paragraph inside of here.
Lewis Benson: I'm gonna make this multi-line.
Lewis Benson: And this one I'm going to put some lorem times 2. And we can see that's overlapping now. Because the original text isn't within the flow of the document meaning that It doesn't push things out of the way. So this could be useful too if you just wanted to make some sort of overlaid image. You could also set the opacity on that. I'll actually do that real quick just to kind of show you what that would look like. I'll grab one from unsplash.
Lewis Benson: We use a city I clicked on the wrong thing that says unsplash Plus. So I'll just use this one.
00:40:00
Lewis Benson: and copy image address
Lewis Benson: for my PS code was for a second. Let me put an image here.
Lewis Benson: All right, so that should be taking up a lot of space right now and it's completely in the way. it's also huge. Let me address that with this.
Lewis Benson: We'll go 200 pixels.
Lewis Benson: And this one is set to Absolute positioning as well because it's a paragraph element. So it's already overlapping that a little bit I'm gonna adjust this though. So that the image is the one that's an absolute positioning.
Lewis Benson: And now the image is over top of the text. And then what I can do is change my opacity of the image. Opacity is a property that changes the transparency. I say 0.5 then that image starts to kind of fade away. So if you wanted to have some sort of effect like that where you have your image and then you have your text over top of it, but the image is actually there. That could be a solution for you. Again. It's kind of a niche thing. But I did want to show that but don't try to lay out your entire page using absolute positioning. It's terrible practice. It's not good for scalability. It's not good for accessibility, but I did want to introduce that. that is the absolute. So now I want to show. The next one we'll do fixed positioning. So I'll do this on here.
Lewis Benson: Fixed positioning is a way to keep something on screen at all times. So in order to make this demonstrate a little better, I'm going to set my height on my body to be 200 view height. And that'll make the page really tall. So.
Lewis Benson: I can scroll down and that's always on my page. You can see my scroll bar here going up and down and it's just always there. You'll see this a lot with navbars. So I just scroll down the nav bars going with you. You'll also see it with a back to top button. You can also see it right here with this. Google meet is sharing your screen. this was injected onto my page kind of like a browser extension in a way, but it's actually part of the screen so we can hide that now. so let's not know. Why let me create A little button right here just to kind of show you what that would look like to the back to pop. We'll do that as a div.
Lewis Benson: And I'm actually going to grab an arrow. off of iconify
Lewis Benson: a few member from yesterday. This is the place where you can get cymbals. So we'll get an arrow showing that this will take us back to the top. This one here should work sufficiently for that. And we'll set this to HTML. I'll grab the script element you place it in my document.
Lewis Benson: And then I'll put the icon inside of the dev. And I'm gonna give this a class name. Of be the T for back to top. And I'm going to select that in this Styles. Let's make sure I get my page up over here and we can see little arrows already showing up there. Dot BTT. I'm using a DOT because this is a class. And we'll give this a width. of 70 pixels This might not look right because I'm Zoom so far out. And let me actually stop fix positioning on this one because it's messing it up.
Lewis Benson: There's a little arrow.
Lewis Benson: And we'll give it a background of red
Lewis Benson: yeah with is too much. Let's go with 30 pixels. And we'll give it a height of 30 pixels.
Lewis Benson: And I want to make it round. So I'm going to do border radius. of 1,000 pixels
Lewis Benson: and then I want to Center the arrow within the element so I'm going to do display. Flex
Lewis Benson: justify content Center align items Center Now it's centered in there. And then the last thing I want to do is put it in the bottom right corner of my screen. so I'm going to say position fixed
00:45:00
Lewis Benson: bottom 10 pixels
Lewis Benson: right and pixels
Lewis Benson: And there it is at the bottom, And then I also want to give the cursor.
Lewis Benson: pointer
Lewis Benson: Just like that. So when I highlighted it gives you that little arrow. And then the last thing I want to do is actually put an anchor tag in here. and let's find the element.
Lewis Benson: And I'm just gonna wrap it around the entire div.
Lewis Benson: closing tag
Lewis Benson: and then I'm going to change that to be.
Lewis Benson: pop
Lewis Benson: and then I'll put the top on my H1 ID. top so if I scroll down and then I click on this it scroll me right back to the top.
Lewis Benson: So something you've probably seen on pages. I have to style the color because it turned it a little bit blue whenever I added that anchor tag. It's just a little trick to make it so that it could take you back to the top you could also do this with JavaScript. You would put a clicklistener on this and you would tell it to you could do a smooth scroll so that you can actually see it scroll up to the top and there was also little libraries that you can add and kind of like a bootstrap Library that'll automatically school you to the top it actually might be a part of bootstrap. I don't remember seeing it there, but we'll check on that tomorrow if you're interested in that.
Lewis Benson: Does anyone have any questions about these different positions? I'm going to bring them up here the list of them. Just to show you where these are in the documentation. And what it has to say about them. so Let me come down and see if it actually has. This is the normal flow of the document. This is the default positioning on every element anytime. You create a new element. If you don't change the positioning it's going to be by default set the static. And as you can see the top left, right and Z index have no effect on static elements. So if you wanted to use the index, this is actually a common mistake. I see all the time. You'll have two things that are overlapping and you'll want to bring one forward and you're trying to apply a z index but you never change the positioning from static and it just doesn't do anything.
Lewis Benson: And I've seen people set this the index to a million doesn't change anything. So you just need to make sure you're changing this to relative in order to get that to work.
Lewis Benson: Relative positioning. Let me actually show this little demo up here for it. notice these two elements are in the same spots So whenever I switch it to rob the relative, it's still keeping the spot where that would be even though we're moving it across the page. It keeps that area opened up. So it's still within the flow of the dogument. It's just positioned down here, but it's still technically positioned up here according to these other elements. They think it's still there. So they're going to keep that space for Absolute positioning. This is the one that takes it out of the flow of the document. So watch these two blue boxes here when I click on it. You see they collapse together. And it actually changed the positioning based on the entire document.
Lewis Benson: And then we have our sticky. This is the one where it stays with it as we scroll. So we did a little back to top button. And that's all four of them. So is there any questions at all about positioning any questions about maybe where you would want to use these or anything like that at all Do you need any more world use case examples for you'd want to use something like this?
Lewis Benson: Or we all pretty good with the positionings.
Lewis Benson: All right, cool. I'll put some typography a little bit again. I still want to get into that layout stuff because I feel like that's the most valuable part of this but I still need to cover all of this other stuff because the more we remember about this the easier. It'll be when we start our Capstone projects. Especially knowing CSS or really help you if you're bringing a lot of bootstrap in because you'll know exactly what solution you're looking for and you'll be able to search for that and bootsrap. so typography currently we have just this font family I'm going to set a default font size here.
00:50:00
Lewis Benson: I said front font size. I like to go with 10 pixels in my root. Does anyone remember why I do 10 pixels in my route?
Lewis Benson: Yes, Ryan.
Ryan Arnold: because that's what sets the REM
Lewis Benson: Yes. So REM is based on root. And it's going to look at the font size of your root. and it's going to scale it by 10 pixels for every REM so with that'll look like Let me see what I have in my demo. I have some text in here that I can work with. So that's a paragraph element. So let me select that. And if I say two REM then I know that my font size is actually 20 pixels. So let me switch this to 20 pixels and we shouldn't see anything different.
Lewis Benson: Exactly the same font size. two REM And it's exactly the same now. I'm going to change my root font size from 10 pixels. I'm just gonna comment it out. And they got a lot bigger because the default font size is 16. So if I change this to 16 we can see it's the same as what it was whenever I commented out. This is by default what your font size is set to so I like to set the default to 10 and then adjust everything on my page using Rems. And I do use Rems for all of my sizing whenever I'm building applications out. And the reason for that is if the user changes their default font size and the settings of their browser they come into their actual settings and they change the font size. It will actually change the root font size in the HTML.
Lewis Benson: And for accessibility purposes, you want your entire page to scale together. So if they want to use larger font sizes by default and they go into the browser settings and change that. then you don't want to break the page because they need to be able to have larger font sizes scaling it in with the zoom isn't exactly the same as scaling and end with by changing your root font sizes and your browser. So there are some use cases for this. Accessibility is the biggest one. instead of having these as 10 pixels here, I would actually want to put these as one REM.
Lewis Benson: And if you need to do decimals, you definitely can do that. So if you needed to fine tune this you wanted this to be 21 pixels. You would just do 2.1 and that's 21 pixels. So it's pretty straightforward on this border radius. You don't have to use rims here. A thousand pixels was just like a little trick. Something you'll see sometimes is people will use percentages here. So if you say 100% on Border radius it still looks round. But there are some cases where if you hit a certain size, which I'm not seeing it in this specific example. But sometimes it'll start turning into an oval.
Lewis Benson: if you're using a percentage, so I like to use a really large pixel value and it'll always be a circle. It's just a little trick and if you ever running into an oval, that's probably all you have to do is just change it to be a large pixel value instead of an oval. And we shouldn't have any issues there.
Lewis Benson: All right, so I did go over a lot of different properties here, but I didn't talk about all of The cursor property I mentioned briefly again. That's just changes your mouse. Let's see if it actually gives us some other examples of what we get. We have our copy. There's all kinds of different ones here. There's a crab move. So you don't have to stick with the classic cursor or Or pointer. Sorry, you can use any of these sort of weight. See what that looks like. So we get a little spinner there.
00:55:00
Lewis Benson: If you want to be a little nefarious you can make your entire body have that spinner. So whenever anybody's on your page, that's all they see. I don't know why you'd actually want to do that. But you can also come up with another way to do custom cursors. I never actually implemented it myself. It's something I want to learn to do myself as well, but you can import custom cursors for this as well. I believe it's similar to the process of importing custom fonts, but I'm not 100% sure on that. There might be something to look into though if you're interested in having your own custom cursor. Something else I've seen which is typically done through another Library like bootstrap, but I don't think bootstrap has the capability is a cursor tail. So as you move your cursor around it actually would Trail like sparkles or something.
Lewis Benson: Typically, you only see that type of thing on a web developers portfolio because they're trying to show off and all it does is lock a div to your cursor and that div has some sort of animation on it.
Lewis Benson: Alright, so we're getting pretty close to our break. We'll start our 10 minute timer here and let somebody has a question. Go ahead and ask any questions you do have. But after we do the break then I want to get into flexbox. And grid yes, Krystal.
Krystal Jefferson: What was the BTT again? I got kind of hung up on that.
Lewis Benson: so Yeah, so this is a DOT right here. So this implies that this is a class. So I used the dot BTT selector in order to select my BTT class and if I scroll down. You see that class attribute right there. So it was just a way to select another way to do this would be with
Lewis Benson: I believe I could get the same results by selecting that ID. So if I were to change this to hashtag top I have two hashtags. That should still work. Not as good.
Lewis Benson: But it is another way to select. So this is the ID on the parent component. I'm going to put vtt. Class back in here that answer your question.
Krystal Jefferson: Yes.
Lewis Benson: All Yeah, so just to recap I actually didn't cover the ID there. I'm actually glad you brought that up. If you're selecting by a class. Remember you're using this dot notation. So if I had the selective by class I could call this a class called text. And then in my style instead of selecting this P. I would do dot text and I'll have the same exact result. It's just a more specific selector. And if I wanted to select something by ID such as this image, I could give it an ID. Of picture would be a good idea name.
Lewis Benson: And instead of image I'll do. #picture and I have the exact same result. So just another way to select things. Remember an ID uses the pound sign. So this has an ID number is the way I remember it in classes have a class period it's just a way I remember which ones which so I don't mix up my ID selector with my class selector. Is there any other questions?
Lewis Benson: All Let me start the 10 minute timer. And then when we get back, we'll get into flexbox and grid again. keep it as high level as possible so that we have time to practice the easiest way to get questions and easiest way to understand is to mess it up basically try to lay something out and when it goes wrong, that's the best time to start learning is because you have to learn from the mistakes if that makes sense. All right. Let me get the timer going and we get back we'll get into flexbox.
Lewis Benson: I'll see you.
01:05:00
Lewis Benson: All right, welcome back. Let's start diving into flexbox and grid. This would be the preferred way to lay things out. Before I do any sort of laying out I always like to Using a drawing application and my favorite one is I'll just search for On Google and we can see that it allows you to sign up here. I think was free. They do have their premium versions of it. And then you can just create a new. fig jamboard
01:10:00
Lewis Benson: and once you're on the screen, you can use the tools in the toolbar here to create how you want to lay this out for web pages. I usually use sections for everything just because it kind of gives you that nice. Look I've seen people use tables not really good with those on here. So it's not really my thing and I've also seen the shapes being used. So if I were to select the square and draw this and then I'd have to change this to no fill. And then maybe change the background color to Black you can get a decent result using the shape as well. I just prefer the section so I can label it. So I'll put this here. And I'm going to call this body meaning it's the body of my page. And what I want to lay out is a page that has a header.
Lewis Benson: This header isn't going to be a navigational header. It's going to be a Content header. So this could be a picture or an H1. There's some sort of heading at the top of the page. Fine and I could give us a background image as well. If I wanted to we'd call that a hero image that could make this as tall as I want or as short as I want. I'll just do a normal size header. Another element I want to create will be. a side navigation
Lewis Benson: and then all of my main content will be on the rest of the page. So it looks something like this.
Lewis Benson: And this is always a good idea. To kind of draw this out before you actually build it so that you can see what this is going to look like. I know exactly how to lay out your HTML. I'm looking at this. I could see I have a component here and two components here. So what that tells me is my body is going to be set to display flex and it's going to be in Flex Direction column and let me show you what I mean. If I make this a column. And I remove these here we want the heading to be at the top and we went the side navigation to be left and right. So in order to accomplish that we actually need a wrapper. to go around these
Lewis Benson: and we'll call this div. So if you don't pay too close attention to these two being side by side, if you look at the heading we have a heading on top and then we have a div directly underneath of it. So these two elements because either these two are siblings and they're the direct Children of the body. If I set my body to display Flex Direction column, then these two elements are going to be stacked on top of each other. inside of this div if I set this to display Flex, then these will be side-by-side because by default your Flex direction is going to be a row and that's why we have to set our body to display Flex with a flex direction of column. So it puts the heading on top.
Lewis Benson: And then it puts the div directly underneath of it now because this side nav and this main are nested inside of this div, then we know that the div needs to put all the elements in a row. So that's going to be Flex Direction row which we don't actually have to set because by default it's already going to be row as soon as we say display Flex. So with the div, it's just going to be display flex and these will be side by side. So let's go ahead and build this out now and our HTML.
Lewis Benson: I'm going to undo some of the stuff just so that I have a fresh start.
Lewis Benson: I could create a new page, but I don't really think it's necessary. I'll keep the sheets here. And I'm gonna empty these MTL Style and I'll keep the root nothing in here really hurting anything. What I'll do is I'm gonna rename these And I'll change this one to be more of a red something. It really actually have blue. It's messing up again.
Lewis Benson: That'll work. So I'll make this one be our nav. This one is mean and this one's header. So we'll actually use those On our style sheet. So let's go ahead and build this out. Remember our body is going to be set to display Flex. So I'm going to give this a class. I'll Flex container. This is optional. What you could do is just select the body itself and set it to display Flex. but for
Lewis Benson: what I actually want to do is make this more of a utility class so that it will automatically do display flex and flex Direction column. So I'm just going to call this Flex column. So that'll automatically set that up for us. So anytime I use flex column. We'll have a column. And inside of our column we're going to need a header. For our content. I'm going to give this an H1. and I'm going to say welcome to the greatest website ever
01:15:00
Lewis Benson: Okay, so that's good enough for the content on the header next. We want our side navigation. But remember when we look at our drawing I have this v wrapping the side nav in the main so I'm actually gonna make this div first. So put the div in. It's just a generic divider. It doesn't mean anything. It's just a way to separate these two elements that are not related in whatsoever. And a div is ignored by screen readers and by search engine optimizers anytime you use a div. It doesn't even look at it. So if you have a whole lot of divs on your page, don't worry about it, as long as you have the semantic elements buried within there somewhere. That's the important thing. So next I'm going to put my nav here. And inside my nav, I'm going to put a UL. This UL is going to have some L's.
Lewis Benson: And these L's are going to have some content. We'll call these links. And we'll create five of them. This is just a little shortcut for putting content in your elements with these curly brackets here. just another little image shortcut if you ever need to create things quickly like that. so we're saying creating UL this isn't going to work the way I want. Let me cut this.
Lewis Benson: We'll do the UL first and then it'll paste this back in. So we want to create five L's with links. Otherwise we would have created Five U L's With An Li in each one. That's not what we want. We just want to create five links like that.
Lewis Benson: let me back up. Each lie should have an anchor tag. Because these are links so put my curly brackets. We'll call it a link. I'm going to put a dollar sign here. A dollar signs is a way to count using Emmet and then we'll say times five. So that'll give us five links inside of our Li that are in Anchor tags. So there we go. Let me format this a little better. I'll drop this one down. And this one down.
Lewis Benson: All that's not exactly what I wanted either. I'll just do this manually. It'll be quicker than kind of figure out the image shortcut. each of these need to be in An Li
Lewis Benson: learning the image shortcuts is definitely a good thing to do. They can really speed up your development process. It's not something I typically try to do is Nest a whole bunch of different shortcuts, but figured I just give it a shot and show you that you can do that if you want to. So that'll be our side navigation.
Lewis Benson: And the last thing we need this is Within the main content I'm going to do an article. Just to get that whole semantic thing going. We'll give it two sections.
Lewis Benson: And then in each section, I'm going to put an H2. Will say chapter one.
Lewis Benson: and under this H1, I'll put paragraph element with a lot of warm and it will do warm times 5 and I'm just going to copy this entire section so it duplicates it.
Lewis Benson: So we have two of those. That's a decent amount of content. And again, this is all we're trying to make here. We're gonna have some text on the page. We're gonna have our navigation on the side and we're gonna have our heading at the top. So that is the goal. So, let's see what we look like so far. Everything's really tiny because of our font size. I'm actually going to change that back. I'm gonna make it 20.
Lewis Benson: Here we go. this is a little bit easier to see. And next thing I want to do is actually give all those background colors so we can see where the elements actually live currently. So we have our header this first. And we'll give it a background of header
01:20:00
Lewis Benson: and then we have our Main, I'll decide now first. nav background color now
Lewis Benson: it's not the greatest blue we can also do
Lewis Benson: that's not gonna apply because there's our links. I have to do those separately.
Lewis Benson: There we go. And then finally our main.
Lewis Benson: Or the background color and I'm only doing these background colors for the demo and you wouldn't typically make A weird color like this. I just want to show you how this is currently laid out. So currently we have our header at the top. This blue is our side nav, and this purple color is our main so everything stacked on top of each other for the moment. That's almost what we want actually. But I'm going to do is set my body.
Lewis Benson: to display Flex and now we have our header on the side and we have our div on the that's right. I created a class. And I called it Lux column. So let me just make sure I asked what I called that.
Lewis Benson: There it is and flex Direction column So everything is still stacked on top of each other? I like to just do it this way so that I can actually manipulate things left and right using justify content and align items so setting things into a flex container can make layout easier. The next thing we want to change is currently our div is set to have The stuff on top of each other by default, they're block elements, so they're going to stack. where is that div I want to give this class a flex row again these names. I'm just using these to kind of create my own version of a utility class something you'd kind of find on bootstrap.
Lewis Benson: And then Flex row just sets us to display Flex. And if we want to be explicit about it. We can say Flex Direction row. Just to make sure that this would override if we wanted it to even though this is the default positioning. This gives it a more robust version of this utility class. If we had this set to column manually, then this would override it fix So we have a little bit of spacing issues here so we can fix that we'll do. personally of this a little bit more height say 50 pixels
Lewis Benson: That are nav. I'll do 25. View width so it takes up 25% of the view width and for my main I'm going to do 75.
Lewis Benson: Okay, so here is our result currently.
Lewis Benson: We have basically what we wanted to get from the drawing let me bring up that drawing again, so we were heading at the top our side nav on the left and our main on the right and that's exactly what I see here. This is a little tight to the edge of that component. Normally you wouldn't have this is a blue background color and this is a purple background color. So you probably wouldn't even notice that. But we can fix that with Remember our Box model padding will move the content away from the border. So I'm just going to give this 20 pixels of padding. Just to get that away from the border. You can see the Border there and now we added that 20s pixels of space between the content and the Border. Over here we have our links right up against the edge of the screen so we can do the same thing there.
Lewis Benson: I'll put these on the nav. And I'm also just going to throw some padding on the head or just so it's all uniform. So everything has 20 pixels ahead of padding and we have the layout we were going for. does anyone have any questions about what I've done with flexbox is there any Confusion maybe with how I got this layout to work. The hardest thing to remember with this is everything's in a box. And that box is either going to be set to a row or a column and then you could nest inside boxes. So if I wanted these to be horizontal then I would set those to be flexbox. I would actually have to select my UL.
01:25:00
Lewis Benson: and say display Flex
Lewis Benson: and now those are horizontal. So you can literally put things anywhere you want just using this manipulation or flexbox. You just put horizontal. Then you push them apart you put things vertical and then you push them apart or you move them to the bottom. Something else I could do here would be a line item Center and it moves them halfway down the screen except I don't have the height for that. So I have to do. What is our current height?
Lewis Benson: I don't believe I set one anywhere. I'll just set one manually here on the UL and say We'll do 75 view height. And now they're halfway down the page. Because I have the Align item Center not because of the height.
Lewis Benson: The height just allows them to move halfway down the page the UL. Let me do a quick inspect just to show you what that looks like. So there's the UL. I'm highlighting it so exactly halfway down the L. The link-centered themselves on that UL because I gave him the 75 view height. And using that a line items and one thing to remember is a line items and justify content only works if you're in a flex container and how do you know if you're in a flex container you look inside your Dev tools and it'll say Flex. and we can actually toggle on the lines to see what this would actually look like
Lewis Benson: we get all our little borders going on there.
Lewis Benson: It's kind of nice. see you can see each content and how they're divided up between each line. So this is useful. this also works with grid So that's the next thing I want to cover now is I'm going to do this exact same layout except I'm going to do it with grid. So I'm gonna fix my links. I don't like them. Being like that. So, let me just comment that out. So our links are back to normal. And to do this, I'm actually going to rename this one to flex.css. And I'm going to create a new style sheet. And it's gonna be called grid. No CSS. Again, that's just for demo purposes. This isn't something you would normally do. So I don't have to delete all of these and recreate everything.
Lewis Benson: okay, so to make this in Grid, the first thing I want to do is link it into my HTML that's easiest thing to forget so we'll say grid.css. And then I want to grab those colors out of my Flex. It's not to reassign those again.
Lewis Benson: Just paste these in here. Again. This is just for The Coloring. I'll remove the other sizing off of it for now. Remove this comment. I don't have to redo far, all we've done is added background colors to each element. I haven't actually set anything up. So next thing we would want to do is decide. Where do we want to put our grid container so Looking at the drawing. With grid we don't need this wrapper anymore. this div so I can just select that div. I think it'll let me out of drag it over here put these back in the reason we don't need it is because we can tell grid exactly how we want to lay our page out without having to put things inside containers like that. We just tell it just go here.
Lewis Benson: We just want to look like We want our v We want our main here. We want our heading there. And I don't want to put everything inside divs. So that's where grid makes a really good solution. And some people think it's easier to read it's up to you if you think it's easier to read. I personally just use flexbox for everything. There are times where grid? Can only be used and typically when that happens. I'll change the design just to continue using flexbox. If I can't change the design then obviously, I'll use Grid. it's not my thing personally. I like** box a lot, but I will show you how to use it because it is very powerful. it takes a little bit more set up. He's the only thing with it, but it doesn't require those wrappers. So that is nice. So in our body
01:30:00
Lewis Benson: we're going to set our body to be displayed grid there would be no change with this. Let's take a look being displayed. One thing we can do though is click on this and we can see our grid lines. We don't currently have Anything spread out yet, but we can get these to where we can look at them. So we do get some tools by toggling that on and off but just setting this to display grid does nothing. The next thing we need to do is set our template area. So we'll do grid mplate. areas And this requires some strings. So I usually like to make this multi-line. I'll put my semicolon down below. And then I'll put my string here. And I'm just going to put in header so I'm gonna have three columns and the whole top three are going to be the headers.
Lewis Benson: And then in the middle, we'll put v main main. And nav mean that. So what I did was I basically Drew it's kind of like drawing in that application. I'm drawing my application here in the string I'm saying. The top of this is going to be my header. And then I'm going to have my main in this little quadrant on the bottom, right and then on the left side, I'm going to have my nav so I'm defining that area. Now I need to actually tell it. This header is the header that I'm referring to down here because these are bles. Now we need to actually assign the values of those variables. by saying grid the grid item I often look this up again. I think it was grid item.
Lewis Benson: And that's great area. So let me just bring that up in here so we can see that.
Lewis Benson: We're going to the grid template areas So here they drew it out to show it that's going to look like they're using letters for the variable names. You can also leave spaces with a period and then let me get down to the actual syntax.
Lewis Benson: here they're assigning their header to have a grid area of head. And they call it head in their template area here. So that's what we're trying to accomplish.
Lewis Benson: So I'm going to say area header And the reason I'm saying header and I'm I'm not putting this in quotes. It's just like a variable I'm assigning the value header is because If I called this banana. And then I would have to call it banana up above these.
Lewis Benson: Or what kind of link it all together? So it doesn't matter what As long as you call it the same thing. And you can see my header is now across the top. I'm going to call this header though not banana. I just wanted to show you that you can literally call these whatever you want. I just like to make a meaningful. And the next grid area is going to be our nav.
Lewis Benson: And the final one is going to be our main.
Lewis Benson: one thing to note is I still have a div on my page. So Whenever you set your Flex, sorry, you're not flex your grid container. You want to make sure that whatever the children are direct children of that container. Those are the ones that are actually being set because I have Everything inside that v So I can't select this mass and you actually need to remove this div out of here. In order to make this work correctly.
Lewis Benson: Find that closing div. There it is.
Lewis Benson: Okay, so that's pretty similar to what we had. The only difference right now is the th. So let me put that width back in on display grid we can go to nav and say width. Of 75, ew. Oops, that was the wrong one. We do that to my main.
Lewis Benson: instead of doing the siding like that. I can actually go into my body. And let me actually put this at the top. I don't know why this is at the bottom everything in here's backwards right now.
Lewis Benson: Area I can use grid template columns. I'd say one f r on that far like that. And that'll set up our width the same way. So it's using up 75% instead of the whole thing and it's actually using 33% I believe. Because there's one fractional unit. And because we have three columns. Each one of these columns is going to take up a third of the space because we said take up one fraction of the space. if I were to change this to 2fr then it's going to take up significantly more space. In fact, it's contain up half because this is four fractional units total now. if I remove one of these
01:35:00
Lewis Benson: and we have two thirds set up again, but we're taking up a lot more space going the other way. I can also do one fr And two FR this way. If I wanted to make sure the main is taking up significantly more. Than the links. So you can use these grid template columns to adjust. Your actual columns that are being represented here. Does anyone have any questions about laying out with Omar.
Umar Z: So the question is weakened why this great template column to as many fractions like five maybe six seven.
Lewis Benson: Yeah, and also you can do that here too so you can say header Main main I just need to make sure to add the same Main main so now I'm saying that we have one two, three four five columns total and…
Umar Z: So now it's twenty percentage Joker.
Lewis Benson: then up here. You can adjust the width of each column based on these fractional units and they don't have to be fractional units. You can use pixels here or any other unit. I could say make this 100 pixels. And it'll always be 100 pixels. And then this one over here take up two fractional units. So it'll make this side Dynamic. It'll make this side fixed. So there's more than just the fractional unit. But the fractional unit is only used in Grid.
Lewis Benson: so it's kind of a niche thing. You won't be using fractional units to set widths on anything outside of grid basically because it can only be used in Grid. But it could be used in other parts of the grid system's big there's so much more to it than just what I'm showing you here is probably the easiest way to implement it. And just kind of get it working out of the box. it's a starting point. It's doing what I just did here doesn't make you a master of grid it just gives you the basics to where you could learn more about it. It gets way more depth and gets way more powerful. In fact what you can do with grid definitely blows flexbox out of the water, but it's so complex. I always have to come in and look up the syntax on it. It's just so time-consuming because I don't use it regularly. So we have
Lewis Benson: we have all these different things in here this grid area in general. This is the one we just use there's another one in here grid template area that is grid templates. Sorry this one you can set up sizes inside of the grid template this. It works similar to The Grid template area. But it gives you a little bit more Dynamic sizing. As you can see they're skipping spots right there. And then setting the sizes of everything. it's a pretty powerful tool. There's also you can do this where you create your own columns and your own rows by setting up your grid alums and your grid rows separately. I believe it's this here.
Lewis Benson: Yeah, so this can do quite a bit this span thing. This does more than just making the length of it. It also changes how it grows and how it shrinks.
Lewis Benson: It's a very powerful tool. But again support let me see. I think it was showing grid was
Lewis Benson: yeah, it's actually got really good support now. So there's no reason not to be using it. But it's one of those things where it's not all solution because you can use CSS flexbox inside of your grid. And in fact, you don't want to be doing horizontal layouts. 2D layouts I should say because flexbox only works on one axis. So if you're only laying out in One Direction and you probably definitely should be using flexbox for that. But whatever you're doing these XY layouts. Where you have? The Heading going across you have the nav on the side you have everything in here is taking up two Dimensions whenever that's the case grid is the best option for that again. I showed you that you can accomplish the same thing using flexbox, but you do start to get a lot of divs going on.
01:40:00
Lewis Benson: But whenever you're actually laying something out and I'll actually show an example of this. I'll just heading here. I'll put some elements in here. I'll put a logo over here. I do that as an H2, and then I'll put Some content on this side and show you the difference on this because you can lay this out with grid. But it would not be easy to lay this out with grid because everything in here is going in One Direction. You would have to use the dots to separate this out and then you'd only have one row and it would work. But at the same time is it really the best way to go about it when you can just say a display Flex space between
Lewis Benson: So let me do that real quick inside of my nav. I have to put some elements in there to make it work. I worried my header it's collapsed. So we have the H1. I'm going to make this shorter.
Lewis Benson: It'll do VSS Incorporated on the left as an H1 and then we'll put a div. or other content and we'll do and you will Li times 3 anchor tag that includes a link and we'll just do
Lewis Benson: home about
Lewis Benson: sign up something like that. I forgot to put these in Anchor tags.
Lewis Benson: There we go. let's see that page. So those are at the top now, what I want to do is go to my CSS for I'm working with grid And I want to select. The nav which I already did here. Where is my? I don't have that class setup. So yeah, I'll just select my nav again because this isn't the same as my grid These styles are separate. And I want to say Flex this isn't my This is my header display Flex
Lewis Benson: and then Flex
Lewis Benson: it's very justify content space between what's that pushes my logo to the left. It pushes my links to the right and now I just need to select those links. So to do that, I believe those are going to Let me double check that are there any UL so let's look at We have a div we have a ul and then we have the allies. So we can select this UL. I'll put a class on it. And we'll call this. header links I can also do this as an ID. If I am going to use an ID just because this is going to be the only one. header links
Lewis Benson: and I'll select that here. Hashtag header links. And we'll say display. Flex
Lewis Benson: and now those are by side. The next thing I need to do though is put some space with The Gap property and we're just give this 10 pixels a gap. So they have a little bit of space between them. And I'm also going to put a little bit of padding in my header. I do 10 pixels. Brought my colon.
Lewis Benson: And there we go. So I laid out the header using flexbox, but I laid out the entire page using grid and we can actually see that here if we look Inside of my body. We have a flexbox container. So here is the grid lines that I was talking about earlier. We can see exactly how this is going to be laid out looking at these. And then if I click on Flex we can see how the content is set up for that these little hash marks here is the empty space from using space between we can see the underlines here showing us our Gap. And we can actually see where the content is being surrounded. So it does tell us quite a bit if we know how to read it. And also these grid lines. These are our rows and our columns. so we can see where the two Mains are if I look back at the code again. And we have two Mains on top of each other here.
01:45:00
Lewis Benson: We can see those inside of here. I have a grid line there and grid line here. This is our first Main and then we have our grid line there and one at the bottom. That's our second Main. And then at the top we can see where our headers laid out and over here. We can see R2 navs. So this does give us some information that we can use and we can toggle that on the Loft by clicking inside our Dev tools. So pretty handy little thing.
Lewis Benson: Any questions at all about this?
Lewis Benson: these are great tools. Flexbox and grid very powerful.
Lewis Benson: just to have some extra stuff in here while we wait on if anyone does have any questions, I just want to make my H1. Have a different font size. With a 30 pixels to that. and my H2S
Lewis Benson: font size of 40 pixels so now my H2S are bigger than my H1 just to show you that you can do that and actually said want Size, there we go.
Lewis Benson: On this perfectly acceptable to have a larger H2 than an H1, they come down to search engine optimization and Screen readers when you're dealing with these headings and this is a common practice to put your H1 in your header at the top of your page. this is a logo. I see that all the time and it doesn't affect anything and actually can help your search engine optimization if you don't really have anywhere to put an H1 just throw it up here into your and station area just so you do have something on the page for the web scrapers to find so there's no questions about these layouts.
Lewis Benson: Again this week we don't have any assignments that are graded, but we do want to be practicing. I am going to throw the W3 schools out there again, just to show you that I'm also going to bring back CSS Diner. I know it's been a while since we've done that we could be good practice to run through all the selectors again just to get that feel for it. If you feel you need a good refresh from selectors. That's a great tool. I usually do that about once every month or so. Just to remind myself. How they all work. Because there is so much stuff you're learning here. It's impossible to just memorize every single type of selector and how they work.
Lewis Benson: So let me bring up W3 schools and I'll see what kind of resources we have here. Or css. So I'm going to click learn CSS. and we're going to go down to
Lewis Benson: Here is the exercises if you want to do the exercises. Feel free. The quiz is a great resource. This one's a 25 question quiz. This is a great tool for just remembering Jargon and this is actually this terminology and everything from these quizzes is important. You're going to be expected to use this terminology while you're being interviewed. make sure that you're coming through and doing these type of quizzes. And not just on W3 schools. I believe there's actually stuff on Mozilla as well. So if you wanted to do some practice on here, let me just type in CSS.
Lewis Benson: They have to tutorials. Let me see if there's a different one.
Lewis Benson: I know they have something on here for it. Let me learn to style using CSS
Lewis Benson: I've definitely seen them here before they have Resources on here I have to do a little bit digging to find them. But if you want to dig through these docks to see if you can find the quizzes. I know they're here somewhere. I've been there building blocks.
Lewis Benson: Anyways, I don't want to spend too much time on just digging through this right now. If I do find them, I'll share those links for you. We do have the W3 schools the q I'll paste this quiz into the slack class chat. So we have that available to us.
01:50:00
Lewis Benson: Go through this quiz and see if you can get through the answers again. This isn't graded. It's just for your practice. It's for your own good to learn this terminology and be better with the CSS. Jargon so that whatever you're doing your interviews you can talk to it. And if you don't know any of the answers, this is a good way to learn some little tidbits. And then if you run out of time there you can always get back into the exercise and then I'm also going to throw out the CSS Diner again. So to get to the Diner. You just Google search CSS Diner and it'll be your top link here. So let me back this up.
Lewis Benson: Just to kind of remind you how this works these plate elements. They're not real HTML elements, but they're representing elements as if they were HTML elements. So in order to select a regular CSS selector, you would just type in play and you can see over here in the examples. This is giving you pretty good information on how these work. So the letter P selects all P elements. And if we were going to look at that in CSS, it would look like this we'd say plate. And then we put in this again. This isn't a real element, but if it were a real element, that's what it would look like and it's kind of representing an element Like A P tag or a div. Or section any element you want to select without using a class selector. So for this one, we'll type in plate enter and we're on the next one.
Lewis Benson: Are there any questions at all?
Lewis Benson: Right, and if you're feeling really comfortable with all of these you can always just practice laying out web pages. There's no better learning tool than just trying to build something. So try to build a blog or something, maybe actually even right like a real blog post if you're comfortable with that and make it look really good and you can publish it on your GitHub pages.
Lewis Benson: once you have it all written up the way you want. You could write about a Blog that would say discuss what you've learned so far and software development how you feel about the industry things like that having little things like that on your portfolio is a great touch for potential employers. So you could even generate a lot of this using Ai and that's some of you are already using Google barred and chat GPT. And so you can get some content generated like that and then just make sure you're going through and practicing these different layout techniques and try to get things as Pixel Perfect as you can if you're having trouble getting something exactly the way you want. Let me know so I can help you with that. All right. Is there any questions at all before the breakout rooms start?
Lewis Benson: Any comments anything?
Lewis Benson: All right. I'm going to open the breakout room. So let me stop these recordings.
Lewis Benson: and make sure you're using this time if
Meeting ended after 01:53:28 👋