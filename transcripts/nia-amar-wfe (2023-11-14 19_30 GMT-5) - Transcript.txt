nia-amar-wfe (2023-11-14 19:30 GMT-5) - Transcript
Attendees
Brian Kimbrow, Chantrice L, Daniel Perez, Elgin Sharper, Gregory Robertson Jr, Iris Coats, Justice Miller, Krystal Jefferson, Lewis Benson, Lewis Benson's Presentation, Reece Renninger, Umar Z
Transcript
This editable transcript was computer generated and might contain errors. People can also change the text after it was created.
Lewis Benson: I really want to kind of dive into what the actual workflows look like yesterday. We kind of went over everything all at once just to get that that feel for the terminal try to see if there's any bugs we could work out and it kind of went a little long. So again, we waved the points on yesterday's assignment. So I do encourage you to use that for practice. But keep in mind we will be getting a little bit more practice today as well. We will have to worry about branching yet. It's mostly going to be focused on initializing repos cloning repos and Performing the ACP process. I'll get my screen share going.
Lewis Benson:  Okay, and I'm just gonna Dive Right into this. I'm gonna open up a terminal. I'm going to use it to create a new folder. You can create your folders the using your graphical interface by right clicking and hitting new and new folder still if you want, but if you want to use the practice with the terminal feel free to do that as well whenever you're creating your new projects.
Lewis Benson:  And I'm just going to kind of go into the workflow as if we were creating a project locally first and then decided we want to move this project to GitHub. So this is a scenario you might run into where you're kind of tinkering around on your computer. You're not sure if you want to share this code yet. And then later you decide that you do want to share this code. So I'll show you that workflow first and then I'll show you the the workflow I use for whenever I know that I'm gonna have a project that's going to be on GitHub and I'll show you how I would approach that scenario as well. That way you're just you're feeling more comfortable with these different approaches. So first I'm going to open up my terminal and I'm just going to create a new folder. And to do that I'm going to say mkdir. And the name of the folder will be demo one one. dash one four
Lewis Benson:  and then I will navigate into that folder using CD. Let's demo 11-14. So my terminal is now.
Lewis Benson:  If I print working directory, my terminal is now located inside of that folder. So from here, I can create new files, but I'm going to start using vs code at this point. I could use the touch command and the terminal if I wanted to save a lot of workflows, but I prefer to create my files through vs code and use the graphical interface. Yes, Umar. You have a question.
Umar Z: I just wanted to say can you please zoom in a little bit? Not sorry about that,…
Lewis Benson: I had a feeling that's what you're going to say. Now you're good.
Umar Z: but I think yeah anything,…
Umar Z: you know.
Lewis Benson: Yeah, that's fine.
Lewis Benson: I'm glad you reminded me. Thank you for that. I'll try to keep an eye on my font sizes and stuff here. All right, so I'm going to open up a new vs code.
Lewis Benson:  And then I'll use my vs code to navigate to that folder. And for anyone using Mac we were working on this yesterday and we discovered that the best way to access your terminal on Mac is using the integrated terminal inside of vs code. So once you navigate to your project, you could then open up a terminal inside of that project and the terminal will automatically Have your parent your your working directory located in your project and what that would look like is you hit the terminal button here and go to new terminal. For me, my default terminal is Powershell. I don't want to use Powershell for trying to do bash commands. Some of them don't work and I don't make sure if I have get installed.
Lewis Benson:  It looks like I have 2.42 so I could use my git commands here. So if you do want to use your integrated terminal check to make sure first that you have get installed in that terminal. Otherwise, you may have to hit this drop down and then select get bash to open your get bash terminal inside of your vs code that way. If you're on Mac, you should have everything set up by default to where you can use this terminal and it already be set to your current folder. I'm going to continue to use the external terminal just because I don't like taking up all this extra space on my screen while I'm working on a smaller screen for the presentation. I do commonly use this terminal especially if I'm working in like python or if I'm just trying to quickly get through git commands like that. But for the presentation I'm going to close it just so I keep that screen space available.
Lewis Benson:  Okay, so I'm going to start by creating a new file. And the first file I want to create is my index.html. I'm just going to kind of go through this workflow. Like I'm building a web page. I'll add in my HTML and just say sample page is my title. And put it in H1 with the hello world.
00:05:00
Lewis Benson:  Okay, so I created this page. This is you know, I put a whole lot of content in there speaking like, you know, hypothetically if I were to have this whole thing built out and decided I now want to share this to GitHub. So at this point I would open up my terminal. And I want to make sure that my terminal is in the correct folder. I can do that with PWD. I can also see it here. That it is in the correct folder. But if you don't have that you'll have to use PWD to see your current folder this way instead. Every terminal is probably going to look different across different computers, depending on what operating system you're using what version of Windows you're using. You might get different colors and a little bit different Behavior inside of your terminal but the commands are all the same and so that's the important takeaway with this.
Lewis Benson:  So to create a new git repository and again, this is a local repository still we haven't got the moving this to GitHub yet to create just to get this to say that I want to use my version control system. I want to track this code you use get in it. And this means you're going to initialize a new git Repository. Whenever that happens, it actually creates a new folder and we can see that listed in this command output right here. It says initialized empty get repository. It gives my folder location, but it also says slash dot get so when I do LS you're not going to see that folder there. But if I do LS space and I put the a flag on it for all.
Lewis Benson:  We can see the hidden files and folders and we can see that there's a get folder located inside of my project folder. And that's where all of your get history is going to be saved. There isn't too many reasons. Do you ever actually need to access this folder?
Lewis Benson:  Other than maybe seeing that it exists. Sometimes you'll run into some issues where gets not behaving properly and it's saying that you're not gonna get repository or you see that you're on a branch and you shouldn't be on a branch perhaps you accidentally initialize to get repository in the wrong location. I'm just so just something to keep in mind just folder does get created when you initialize a new one. And as soon as your terminal detects this folder, it's going to show you a branch name. As long as the branch is inside of this folder. It should be when you initialize a new one if you were to manually create a DOT get Florida. It wouldn't actually find the required files. You have to use the command. In order to get that started.
Lewis Benson:  So that's step one is just creating the local repository. The next step is actually creating a repo on GitHub. Typically when I create a repo on GitHub, I look at my project folder name here inside of my vs code Explorer and I see it's called demo 11 - 14 So this is normally the name of the repo that I want to create. It doesn't have to be the same. The reason I make them the same though is because it's easier to keep track of your remote repo and your local repo together if they have the same name. So I'm going to open up a browser tab.
Lewis Benson:  And I'm going to go to GitHub and start this new Repository. I have a new button here. I can click to create a new one. I can also click this plus button here to create a new one. Or I can go to my profile your repositories. And I can get the new button here as well. So just lots of ways to create a new one. Just try to find what works for you as far as creating that new repository. If you just want to click the new button on the home page click this plus sign and click new repository. Any approach is fine this as long as you're creating a new Repository. And again, I want to use the same name as my local folder. So if I look in my terminal I can get that again. I see it's demo 11-14. And I'm just gonna copy that out of here so that don't make any typos and paste that in right there.
Lewis Benson:  For the description it says this is optional. I do advise that you add a description for repositories not because it's something you might need. It's mainly for describing the code for potential employers looking at your GitHub. You'll see employers will actually go into your GitHub whenever you're interviewing. Um to see what kind of things you're building what kind of code you use. Are you adding documentation? What do your commit messages look like it also to see if you're collaborating with other developers could be an option, too. So like using that first contribution to get started with that type of where you collaborate with other Developers. Having something like that a nurse helpful. They do look at that type of stuff. So all I want to do is create this repo.
00:10:00
Lewis Benson:  And I want to make it public and at this time I'm not going to add a readme file. I'm just going to create this with a blank template. So I'm not actually gonna select the template from up here, but I'm just going to put any name and I'm not going to change anything else. Keep in mind. If you select this to private the Tas will not be able to view your repo for grading. So make sure you remain public on your how you want this repository to be viewed. So I'm not picking a readme I'm not adding a DOT get ignore and I'm not adding a license. I'm just going to create the repository when you create a fully empty repository. You'll get a little bit different screen than normal. If you remember on the other repositories you had you had these tabs up here. We have like a green button here that said code everything just kind of looks different now. And then this is giving us some instructions here. It's like what do you want to do now? You created your Repository?
Lewis Benson:  We're looking at push and existing repository from the command line. So this is how you'll actually link your local repository to your GitHub repository.
Elgin Sharper: It looks right here. I'm gonna show you how to put 6,400.
Lewis Benson:  So I'm going to copy this code block by clicking right here. And I'm going to go into my terminal and just paste this in.
Lewis Benson:  And when I press enter we can see the commands that are going to happen here. It says get remote ad origin and it has the https link to my repo. What origin is referring to is actually this links so I'm actually gonna highlight. Just this link here so we can see what I'm talking about. Let's use my mouse to highlight. So this link right here is being assigned to a variable called origin. So anytime you see the word origin is actually referring to this link. And then whenever you see main as I'm right here, it's referring to your current branch. So I'm just going to press enter.
Lewis Benson:  And sometimes you'll see these kind of issues where you see that main does not match. Any what this is referring to is it couldn't find the main branch. That doesn't mean that it failed. It's because the main branch already exists. So if I were to let me just get status real quick. We can see that I haven't committed my changes here. So I'm going to go ahead and do that. I'm going to say get add period get commit - M
Lewis Benson:  and whenever you only create a file just to get started you would just say initial commit. If you build out your project though, you're gonna want to have multiple commits explaining each step that you took to get to that point. And now if I do it get push origin mean.
Lewis Benson:  Because I had pasted this n it linked it up, even though it looked like it was throwing an error. It's just because the new Branch already existed if I wanted to be A little more picky with the command. I would have just grabbed this top one here what this is doing is actually creating the main branch and pushing the main branch to a branch that already doesn't exist. So we seen that error message. It's okay just grab the whole thing and paste it in. It's not a big deal. It doesn't hurt anything to have that error message. If you wanted to initialize a new repo, so when we first started I did to get in it. You could skip that step technically and come here and grab this command. And what this command does is first it creates a readme file and this little Echo command is a bash command that adds content. So it's going to add a H1 heading to the readme file.
Lewis Benson:  And then it's going to perform the get in it and then it's going to add the readme file. It's going to commit the readme file. It's going to create the main branch. It's gonna add the remote repository and then it's going to push everything to mean so it would do pretty much the same thing. I could have copied and pasted this one in as well. But I think to get and it would have actually stopped the rest of these from running. So I always pick the bottom one whenever I already have a repository created. And that's the the main steps to getting this started. So I pushed everything to Maine. I actually did the full ACP I did get ad period I did the git commit and then I did it get push origin main. So now if I refresh my GitHub page, I should see that file here.
00:15:00
Lewis Benson:  And here we have the index.html pushed in to GitHub. So this workflow it's not my favorite workflow. I don't like to. Create my local repos first and then work and then create my GitHub and then pull on link them together. I feel like it's air prone. I don't like seeing that red message in my terminal where failed to push some refs because the branch already existed. It's just it's not my favorite way to do it. So I'm gonna show you the way that I do prefer to create new get repositories and just kind of go through this workflow. So the first thing I would do is I go to my little drop down here to create a new Repository.
Lewis Benson:  I'll notice I'm not creating anything on my local machine yet. I'm starting on GitHub and the difference would be before I came into here. I created a new folder in my terminal. I created a file and I got started that way. I haven't created any new folders yet. I haven't created anything. I'm going to start with GitHub by creating a new repository on GitHub. So once you create your Repository You're going to get given a name. And I'm just going to call this one a cool web page. Just a sample name. I'm going to delete this later. So a cool web page is going to be created and this is a web page. That is pretty cool.
Lewis Benson:  This time I'm going to add the readme file. And if you want to add a license add a MIT, this is optional. You don't have to do this. What this will do is create a file and I'll show you what's in this file just in case you're interested in this approach. It basically means that anybody is allowed to copy your code and use it for educational purposes and that you're not actually Holding on to the rights to your code and this is a common practice for open source. It allows other developers to come in copy what you did modify it and then maybe even push changes back into your code base and help you improve. So it's not a bad thing to have an MIT license. A DOT get ignore something. We'll get into a little bit later.
Lewis Benson:  But if you ever do want to just include one, you will select node from this list. We'll get into this again later. This is an optional thing you can do. It's something that I typically do when I'm creating Repose automatically now and again, I'll get in with that actually does at a later time. So I'm going to create my Repository.
Lewis Benson:  And all this is is a web page with three files. It has a readme file. a license and a DOT get ignore So what I'm going to do now is hit the code. I'm going to grab the link out of here, and I'm just gonna clone this down. So in order for me to clone this down, I need to get into my projects folder. So I can see the dot dot to go back or I could just open a new terminal in that folder. So let me just close this terminal. I have an extra one open there, too. I'm going to open up my folders again. I'm going to open a new get bash in this folder just to show you that I'm in the projects folder. PWD just to confirm and I'm going to get clone that link down so I'm gonna say get clone. And just paste that in.
Lewis Benson:  So we can see the link is showing a cool web page. And notice I'm doing this directly in my projects folder. I haven't created a new folder. And the reason I don't create a new folder is because when you create a repository, it is creating a folder for you. So if I created another folder, I would have a folder nested inside of a folder. Um, that's probably fine for learning get but it's not good practice when you actually start building web applications. And I'll show why it's not good practice. Let me clone this in.
Lewis Benson:  Okay, so I have the new folder a cool web page. So let me find that in here.
Lewis Benson:  And I'm going to open my vs. Code to this folder. So we'll go file. Open folder. a cool web page select Okay, so now to show you why it's not good practice to create a folder ahead of time. If I were to have a this is what it would look like a cool web page.
Lewis Benson:  And then all of my files would be inside of this folder.
00:20:00
Lewis Benson:  So this is my root folder right now. And this is where my project is if I create an index.html right here.
Lewis Benson:  And I start some content.
Lewis Benson:  And I'm going to go live.
Lewis Benson: And when I went live it worked because I'm already in this folder, but typically I would have to select that folder it. They have this they're kind of smart with the way they did this. It'll go on whatever file I currently have selected. But if I were to open my live server up immediately, I would actually have to click on the index.html or the next folder and there'd be a list of folders here. Let me see if I can get that to work by opening and closing just to show you. But the point is my index is no longer. I'm sorry. It's not even in my area now it's in there. That's why it was actually working correctly. Let me try this again. All right, so that we get this error here cannot get index.html whenever I would. Go like this. This is what I was talking about. So because my index is not
Lewis Benson:  in my root directory, which is what this slash a symbolizing. I'll have to click on this page. But as I was saying if you select the file and then go live. Like you actually have it highlighted. Oftentimes it'll go straight to it that way and we can see the folder nested there and the index.html. Another way to do it would be to right click on it. And we could open with live server here. There it is. And that would work the same way, but the problem isn't for local development. The problem is when we actually send this website to be a published website. The tools used to do that are looking for an index.html that lives inside of your root file route folder. So whenever you create. a folder
Lewis Benson:  And then you clone this down you're essentially nesting two folders and you can see we have two folders here with the same name. So what I would have to do is actually just move all of these out of here. And let me just select all them and pull them out. And then I can delete this extra folder. So let's just create an extra step. That's unnecessary. And also the dot get folder was living inside of our root folder here, too. So that's something also to keep in mind. So this is the the MIT license file It just permission is hereby granted free of charge to any person obtaining a copy of the software again. It's just it allows your software to be open source. And it considered to be good for educational purposes.
Lewis Benson:  So just something that's not a bad idea to add you don't have to if you don't want to it doesn't really matter if you don't include a license and technically your the intellectual property owner something along the lines. I'm not too familiar with the legal. Jargon. I just know that if you wanted to make your software more secure than you don't put the license in there.
Lewis Benson:  Are there any questions so far about these workflows and how we would do this? How we create new projects?
Lewis Benson:  Okay, so since I created a new file here, we can see that little U showing up right there. That's telling us that we have an untracked change or an untracked file. So I'm going to go through the ACP process. Would anyone like to walk me through how I would do this?
Daniel Perez: would you get add comma or add that
Lewis Benson:  Yeah, it'd be a DOT. I can also type in the file name if I wanted to because since it's the only file on the dots quicker, so I usually just do that and remember that we'll add every single untracked file that's in your current directory. So if you're in the projects folder Which actually that's a problem because we're in the wrong folder. So first I need to do a CD into a cool web page notice. I don't have the main right there actually show you what happens if I try to add right here get add period if you see this fatal not a get repository or any of the parent directories what that means is this will actually search projects that'll search OneDrive it'll search root. It looks for everywhere to find that dot get folder. It doesn't currently exist if you see this and you know, you cloned your code down that means you're probably in the wrong folder.
00:25:00
Lewis Benson:  That doesn't mean to run get in it at this time. Because whenever you clone a repository down that will initialize the project for you. So first, I'm going to CD into a cool web page I use the Tab Key to autocomplete that all right, so we'll go back to your instructions get add period and this will add the file to staging and we can confirm that it's staged for commit by using get status. You don't have to do the get status. I'm just wanted to show you that it is now staged and ready to be committed. You want to Stage your files prior to committing? It's kind of like a safety net so that you don't accidentally commit things. You're not ready to commit and that's where you would use individual ads. So it would be the next step.
Lewis Benson:  Would anyone like to take a shot?
Umar Z: now we need to I mean
Lewis Benson:  Exactly. And what was the command for commit
Umar Z:  I remember correctly. That's it commit. and then the fire name
Lewis Benson: It's not the file name because it's going to commit everything that's currently staged. The only time you need to use the file name is when you're adding so for committing there's actually a flag we put in.
Umar Z:  okay.
Lewis Benson: this flag is required for commits,…
Umar Z:  Yeah. that I am
Lewis Benson: and it's Yeah, it's the m flag so that we can apply a message to it. And then yeah.
Umar Z:  okay, and then in the pastor of
Lewis Benson:  Yeah, so then we need to put quotes and the message will go within the quotes. And I would say something very specific something that makes sense something that other developers would understand. Create index file with H1 heading. That's a very specific. It's also concise you want to you don't want to go like write a book here. You want to be a short as you can but as specific as you can so create index file with H1 heading. Something to add here. This is something you're going to see split on the community. It's actually a 50/50 split according to stack overflow.
Lewis Benson:  My message is currently in the present tense. Oops I'm saying I didn't say created index file with H1 heading I said create index file with H1 heading and that's on purpose because the GitHub documentation says that commit messages should be in the present Pence. If you look on the stack Overflow surveys. it says GitHub stupid and they should be in past tense because why would you do it in the present tense? And it's actually a 50/50 split on what the community thinks is, correct. So whichever one you think is better. I'm just go ahead and do that. If you want to say created index file, you can say created. The reason I'm saying create is just because that's what the documentation says. So that's what I follow.
Lewis Benson:  But again, you don't have to follow the present tense rule just one of the like make that known that not everything we do is written in stone. There are more than one ways to do it and this is one of those little things so I'm going to send this message now. Okay, so our commit is complete. What do I have to do now? Are we done?
Umar Z: We could push it.
Lewis Benson:  I've got to push it so. If I were only working locally at this point, I would be done. I created a save point. I created a an index Point as you will like I could come back to this point and revert all of my code to this point in time. But we need to get our code updated on to GitHub and to do that we do get. push typically when you're on your main branch, you can stop at this point and send this I don't like doing this because if you're working on multiple branches, this will throw errors later on so it is better practice to tell it where you're pushing it to. And we're pushing it to origin which again, this is a variable that contains the link that you're pushing your code to you don't have to worry about that. You don't have to know what it means. I just want to give you some context behind it.
Lewis Benson:  Just put the word origin there and this will work. And then the last thing you need to put is the branch name, so get push origin Main. We send it. And Away goes our code to GitHub. And we can see two https. There's the where it's sent to and then here we can see the branch name. So let's check it out on GitHub.
00:30:00
Lewis Benson:  I'll do a quick refresh right now. We have three files my last commits were 12 minutes ago. Let me refresh And I have an index.html and I can see my commit message create index file with one H1 heading. Also, I can click on this. And I can see exactly what lines of code were created during that commit. So GitHub is a really powerful tool for collaboration, especially if I needed approval before allowing this code to be pushed in to GitHub. If you're working with a large group of people whenever you push your code to get GitHub other developers are actually going to come and look at your commit messages. They're gonna say, okay you created a index file with an H1 heading let's take a look. They're gonna say, okay. I see a lot of boilerplate code here. Here's the H1. This looks good. I don't see anything. That's not
Lewis Benson:  Syntactically, correct if there was an issue you can actually leave comments right here on GitHub. I could say.
Lewis Benson: I do not see a header. This needs fixed. And I'm just going to comment that directly on there assuming that I'm working with another developer for this. So this is something that they can do and then they would receive a notification that there was a comment added on their commit and they can come in and look at it and say okay. I'm going to fix this. So to fix this I'm actually going to do this directly on GitHub now and I want to show you this because this is going to happen when you're working with other developers. I'm changes will happen changes will get pushed to GitHub, but they're not going to be pushed to your local machines. So if you think about this if you were working on this project with me
Lewis Benson:  And you pushed your changes to GitHub. You didn't push it to my local computer. You only pushed to GitHub so I don't have your code. So I'll show you how to deal with that. You could technically delete your entire repo and then clone it back down again that there is a better way to do it. So let's go into index. I'm going to make this change. And click the edit button. and I'm just gonna manually code this out without the IDE to assist me I guess I do get some assistance with this now. It's a nice touch. Let's see if I can. cool
Lewis Benson:  So we can now commit changes here directly and I'm going to get an option for this I could say. This is my commitment message. It just says update index.html. This is where you would put in your actual commit message. So I would say. Add header. Around H1. I'm also noticed GitHub gave me this commit message and present tense. I just want to point that out that. You're going to see. A mixture of past tense and present tense if you pick one way or the other but also do whatever your other co-workers are doing when you're working in the industry. So if they're all using past tense and use past tense as well.
Lewis Benson:  So we also get an option here for create a new Branch for commit and start pull request. This is what you would do if you were working with a group of people and you didn't want to make changes directly to your production code. We don't have to worry about this. But if you do this, it'll actually create a new branch called patch and then as soon as you merge it and you can delete that Branch, but again, we're just gonna commit directly to the main branch. We're not worried about branching. So I commit that in. And we can see the changes header here header here. We have our H1 wrapped. Everything looks good. Except it's not good here. So in order to get my code updated I'm going to open up my terminal.
Lewis Benson:  And this is a good practice to do whenever you're working with a group and you don't know if somebody push changes to GitHub. You just opened up you just turned on your computer. You didn't open up your GitHub. You opened up your code. You just want to get to work. On the first thing you do is you type in get whole. And that's all you have to put is get pull. If you put get pull origin. Main, this is okay too. It's going to say that you're pulling the main branch get pull a sufficient though. So I'll put that. And now I have the header wrapped around my H1. Also, I didn't have to do any commits because these commits were already made all I'm doing is updating my code. We also see this thing here that says fast forward. This is referring to how it merged the code in.
00:35:00
Lewis Benson:  If I were to do this, let's say I make it I'm gonna make another change. I just want to show you what happens. I'm gonna edit this. I'm going to remove the word world here. And I'll commit that change. Remove World from heading.
Lewis Benson:  And I'll put that in quotes.
Lewis Benson:  commit that and I'm gonna pull this change down. But before I do I'm actually gonna make a change locally here. I don't want this to say hello world. I want to say hello Steve. And now I'm going to pull it down.
Lewis Benson:  Get pull.
Lewis Benson:  Because I didn't commit it's giving me this error here. So I got to commit first so to commit I'm gonna follow the normal workflow get add period get commit. I got a Capital C there commit - M put in my message. Remove World add Steve.
Lewis Benson:  Okay, now I'm going to get whole.
Lewis Benson:  And this is called a merge conflict. I don't have the fast forward merge. It doesn't know what to do because there were multiple changes these these things happen. You'll probably run into this a couple times whenever you're modifying your code directly on GitHub and then you modify your code locally and then you try to merge everything together. You'll see something that looks like this. I just wanted to show you this interface because it's gonna happen eventually. It's not a bad thing, especially when you're working with a large group. They're inevitable. What this means is I committed to a change here on GitHub and I committed to a change here locally. And now I have some options. What does this showing me is this is what's coming from GitHub and this is what I currently have locally and it's telling me to choose which one do I want?
Lewis Benson:  One thing you can do is you can delete all these extra things and delete the extra code. I could say I could click on this little text here that says accept current change. Let me zoom in my text is like really small today. I could say except current change. These are kind of hard to see on they're kind of faded out. I know a lot of people don't notice them. But if I click on accept current change if you look here, this is my current change. Um, it'll actually save all of this code and it will delete all of this code. It's using these symbols to determine the difference between the two.
Lewis Benson:  I'm not expecting anyone to be able to like fully handle merge conflicts today. I just want to show you the interface in case this happens to you just for some clarification here. Because eventually it will and we will get an emerged conflicts when we get into level two of GitHub. So I could say except current change or I could say except incoming change. My incoming change is down here. If I accept the incoming change, it will delete all of this and keep this. I could accept both changes, which will keep this header and this header both. Or it could compare changes. The next thing I can do is I have this big green button here that says resolve and merge editor. So this is normally what I do whenever I have a merge conflict because I click this button first.
Lewis Benson:  And it gives me this can get really confusing the first time you see it, but it's giving me my incoming change on the left. It's giving them my current change on the right and down here is the result. So depending on what I choose. The result is going to be affected. So if I start messing with the code up here? I can't type. I can't do anything here. But if I were to hit accept incoming it would modify all of my result and if I hit accept current it would modify my result down here, but I can modify my result. I can make like a hybrid version. I could say like and Steve.
Lewis Benson:  And then I could click complete merge at this point and it won't accept either of these it'll just have its own version of it. Again, this isn't the most important thing. I just wanted you to be familiar with the the interface. So I'm going to click accept incoming and we can see that it modified my incoming down here. And then I'm just going to click complete merge. This takes me to another interface. This is something that you can use for your ACP. I recommend using the terminal at this point though because if you start using the interface here, then whenever you need to do more complicated things using the terminal you're not going to be comfortable with it. So I'm just gonna click back into my Explorer.
00:40:00
Lewis Benson:  And then I'm going to go into here now. If I do get status at this time, we're gonna see that I have some changes here. We are already have a file that's staged. It just needs to be committed. So I'm going to say get permit - M. And I'm just gonna say resolve merge. On what? And again, you don't have to be proficient at resolving word conflicts yet. I wanted you to be familiar with what the concept is in the interface and why they would happen. And then once it's resolved, I can push it push origin man. I remember anytime you commit the next step is to push.
Lewis Benson:  Okay, so that is everything about merge conflicts that I'm going to cover today again. I just wanted you to see that interface. I'll show it a couple more times this week. Just a kind of remind you what it is and how it works. So has everyone been able to get their terminals working? I just want to make sure that we don't have any anybody who's feeling left behind right now because maybe your terminal is not set up correctly or you're not able to understand or get the commands to work. Are there anyone having any sort of issues? What questions do you have at this time?
Lewis Benson: Okay, so no questions yet.
Umar Z: You know question but a football I think I'm good. I'm just giving you my presentation. I don't know what I'm just speaking of what I was trying to follow along when you will initially doing it when you got a matter of an error message in your terminal. I had a kind of same message there. It says when I was trying to force it said remote origin already. It's everything is up to date Branch means that up to track. That's what I thought. I don't know if that wasn't successful. Okay for the police.
Lewis Benson:  That sounds like a success is did you grab a code block from GitHub?
Umar Z:  Yeah, I was trying to follow you the way you copied it. So what I gave it, hold on a second. Let me open right?
Umar Z: Yeah, so when we created the repository you let me go back. So the second law the second block.
Lewis Benson: so yeah.
Umar Z: Yes. Yes. This one I copied this one from here and I paste it in the push push Center. I mean push area and then I pushed it. And that's a method I got in my terminal which I just told you.
Lewis Benson: So that's actually that's completely normal. If you copy the whole block I usually do copy the whole block just because it's easier than highlighting just this one line like sometimes I'll be doing stuff like this. The error message doesn't affect anything. So I usually just click this button and…
Umar Z:  Okay.
Lewis Benson: paste it in. It'll still work the same. I'm sorry what you're saying?
Umar Z:  So that was a success it was said.
Lewis Benson: Yeah, if you don't want to see error messages, then you only have to put in this line. Yeah, and…
Umar Z:  The first line. Okay. Got it.
Lewis Benson: that's only if you have an existing repository set up locally. And I'm gonna go through these workflows again. I just want to make sure everyone's really comfortable with the workflow. Because it is important to understand how this this part here Works. Typically. I like to create my repos. prior so right now I have a repo here. But I don't have any sort of code local. What I could do is actually copy this block. Just to kind of show what I would do in that case. I created my repo, but I didn't create a readme file. And I and I don't have anything created locally. So I'm not able to clone my code now because I didn't create a readme file. So if you run into this situation, then you want to use the top block because this is a new Repository.
Lewis Benson:  So if I click this this time, I need to create a folder because cloning will create the portal for me, but I don't have a folder to clone with. So I'm going to go to my folders. And I'm going to create a new folder here. And I want to name this the same as my repo and I think I called it a test or something like that. test repo
Lewis Benson:  I could use this name test or a test. It would still work the same. I like it to be the same just so when I'm looking for the repo itself. I might go and GitHub look at my repo and then come local. I'm like, okay, where's that word? I download that to I would expect that to be the same because anytime you clone a repo. It has the same name as your repo. All right, so there's my test repo so I'm going to copy that little block of code. And then I'm going to CD into that. So I'll do CD dot dot slash. test repo
00:45:00
Lewis Benson:  so now I'm in the test repo folder. if I do PWD I can see test repo. Is my current directory here? And I'm going to paste in that big code block now. Okay copied and pasted test repo there. And try this again. And then paste that in and I'm just going to press enter.
Lewis Benson:  And this way I didn't I did not receive any error messages because this Branch didn't already exist. This wasn't already wired up or anything. So it actually did the whole process and it worked successfully. Let me go ahead and see if I can open this I should be able to. Open the markdown file with code readmeet on MD.
Lewis Benson:  My vs. Code is flashing there this Um, if yours doesn't work like that, you may have to still open your vs code manually. That's just a little shortcut. You can type in code and then the name of the file. Or you can type in code and put in a period and it will open up that folder with your vs code like this. So something to if you have the shortcut, that's great. If it doesn't work, it is a little bit complicated to get it set up whenever you're first installing get
Lewis Benson:  So here's the readme file, this is currently what's on GitHub. Everything here is synced up. So I'm just going to add a little bit of content to this. I'm going to add an H2. And say contributors.
Lewis Benson:  And I'll put my name here. and I'll make this a - okay, so I made some changes to my local Repository So I'm going to go through the ACP process and move this code to GitHub now. So I'm going to go to my terminal. and I'm going to say get add period Sometimes I get this error message. This is because I have some other utilities installed if you see this come up online just ignore it. It's just a warning. It's not actually an error. It's not going to hurt anything. And then I'm going to say get. commit Dash m
Lewis Benson:  And I'm going to say calm. computers to read me
Lewis Benson:  and now I need to push this code to get Hub it push origin name.
Lewis Benson:  And that's the whole process for creating a new repo starting on GitHub. And that's if you didn't already create a folder or include a readme file on your GitHub. So you can run into some differences like that. So I'm actually glad you brought that up because I was able to show what happens if you get to do the readme. If you forget to add a readme file, then you'll have to use this code block here to actually start your initialization create your folder and work it through that way. And now if I refresh I can see my test repo. And if you're practicing and don't want all these extra repos, I'll show you how to delete these two. To delete a repo you have these tabs here. I'm going to go over to settings. And then I'm going to scroll all the way to the bottom to what's called The Danger Zone. And we're going to click delete this Repository.
Lewis Benson:  when I get to this point, I like to copy this because I'm gonna have to type it in later those copy that
Lewis Benson:  and then I'm going to paste that in right here. And click delete this Repository.
Lewis Benson:  And it's gone. If I wanted to delete this one as well. I could say settings. But onto the danger zone. Delete this repository. I'll keep in mind when you delete a repository. It's not deleting this off of your computer. It's only deleting this off your GitHub and your local repository is still wired up to this GitHub link. Once you do this this GitHub link no longer exists. So if you wanted to put that back on GitHub, there is a little bit of work involved to make to keep all of your get history and then push it back up. If you don't care about your get history, you can always delete your dot get folder and just initialize a new Repository. So I'm just gonna delete this one as well.
00:50:00
Lewis Benson:  And this way I can create new examples and go through the process a couple more times just to make sure everyone's fully good to go on this and I'm going to delete these local as well. Getting an error because I have this open.
Lewis Benson:  And then I'll delete a cool web page. Make sure I don't have that open here.
Lewis Benson:  Okay, so creating a new project. I'm going to start from scratch if I wanted to start a new project today. I'm going to start my new assignment. I'm going to start a new project. Whatever it is. I'm working on. The first thing I'm going to do is just go straight to GitHub. wrong one I'm going to create a new repo on GitHub by clicking on the new button or clicking just drop down new Repository. And I'm going to name this. two days assignment and I have this as a public repository. I'm going to include a readme file. And I'm just gonna throw it in MIT license on this just because that's something I like to do. I'll leave the get ignore alone for now. Just so we're not messing with extra files. description this is the assignment for 11 14 2023. And then I was just hit create Repository.
Lewis Benson:  And now that this is created. I want to clone this repository to my local machine. This is going to create the folder. It's going to have my files initialized. Everything will be wired up. I don't have to worry about copying and pasting code from GitHub to my local machine. I just copy this link. I'm going to create a new sorry. I'm not gonna create a new folder. I'm going to open my get bash here. And I'm opening this inside of my projects folder. Where all of my other projects are at? And I'm going to say get clone. I'm going to paste in the link. Press enter.
Lewis Benson:  And that will create the folder for today's assignment. So here is the folder. So I could see the end of that.
Lewis Benson:  And then I can say code. Space period and this will open my vs code directly in that directory.
Lewis Benson:  Your other option would be to open a new vs code the way you normally do. And then navigate to that folder.
Lewis Benson:  projects
Lewis Benson:  today's assignment select and here we are. I don't have any actual content in here yet. I have a readme file. We do have the description listed in here. So now I could create an index. .html I'll create a styles. dot CSS I'll create a script.js. And I'm just going to put a little bit of content in each of these. This will have the use strip at the top my Styles. I'll say um select all
Lewis Benson:  border or not border. Sorry. order Dash
Lewis Benson:  trying to do the Border box. I forget the name of the property. Style box sizing there. It is box sizing border box. Okay. So that way I just put a little bit of content each file then my index.html. I'm going to put my boilerplate code and I'll put a title on this. you can say
Lewis Benson:  boiler plate I'll put an H1 with Hello World. All right, so I have multiple files now. I have all kinds of different content. I added into each one. So now I'm going to start the ACP process. None of this code is on my GitHub. I just did all of this work and I want to now be able to share it for submission. So First thing I want to do is open up my terminal. And I have a couple options here. I could do the get add period But if I do that I made modifications to a style sheet. I made modifications to a Javascript file. I made modifications to an index.html that does make for a really messy commit message. So it wouldn't hurt to do something like index.html. and then say get commit - M
00:55:00
Lewis Benson:  and now I'm only committing my index.html at this point. I could say add content to web page.
Lewis Benson:  I'll just say H1 and title. Just so we have a nice descriptive message there.
Lewis Benson:  And I could push this up to GitHub now. Or I could continue adding my files. If I do get status we can see we still have two on track files. So we need to actually make sure we're working with them another option you have if you don't want to have that specific of commit messages. I'm just because you want to get through the assignment you can always just you get add period Get commit bash m. Complete two days assignment. It's not the best commit message again. But sometimes you're going to be pressed for time and you can do something like this. I don't want to necessarily show you the wrong way. I'm just saying this is this happens out there. and you may have to get through a bunch of files at once you can group them together and put some sort of commit message. It kind of explains. Maybe the functionality that you added.
Lewis Benson:  So I can more specifically just say added normal boilerplate. And this does describe everything I added every single file. So there's my ad my commit and I'm going to push.
Lewis Benson:  origin name
Lewis Benson:  do I have any questions at all about get and GitHub and this workflow that I just showed?
Lewis Benson:  And just to show you this worked. Let me go and GitHub. refresh and there is all the files. And we can see the two different commit messages. Add content to web page H1 and title and then we just add added normal boilerplate so you can probably see why the commit messages definitely important if I would just say completed assignment. It wouldn't have described that I added a u strict in here. And it also wouldn't describe that. I put a box sizing on my border box for all elements.
Lewis Benson:  What questions do you have?
Iris Coats: I remember have questions till I'm trying to do the work and they all come to me.
Lewis Benson:  That's perfectly understood. You'll run into bugs at time from time dealing with get dealing with the terminal as you see no more. You'll get that occasional error message pop up and interpreting them error messages is a little tricky until you get really comfortable with get a lot of times you'll just have to kind of think through the process and be like Okay, this is what I did. This is what it's showing and then just kind of check as I get is my code pushed to GitHub is my code local is everything synced up. Do it get status. If it's everything's good to go and it gets status and you're probably good even if you've seen an error message. That's one of the reasons why though I like to avoid that workflow creating a new repo and then copying all that code over. I like to create my repo add a readme file and then clone it down. Cloning is my favorite way to do it.
Lewis Benson:  So there any questions at all? about that workflow
Lewis Benson:  Okay, so I'm going to start the 10 minute timer. We'll take a break. the second half I'm going to keep it as short as possible and still get through the content. There's really not much more to show as far as how this works. This normal commit message this way we can get into the assignment a little bit earlier today. I want everyone to try using their terminal. I want everyone to experiment with this and try to get everything working and really get this workflow down if you want me to walk through the workflows with you one-on-one. Send me a message whenever we get to that the breakout rooms. And I'll happily walk you through that step by step the whole process how you create the repo clone it down. Add your content. Add commit push.
01:00:00
Lewis Benson:  The everything you need to know I can walk you through the best thing for this is practice fortunately, we'll get a lot of practice because every assignment we're going to do from this point on you're going to use this process. So definitely if you're not comfortable with it yet get that practice in so you can start getting comfortable in this environment. And because of that. If you do have any issues, please please please let me know because if you don't let me know you won't be able to submit your assignments properly. Okay, so I'm going to start the 10 minute timer.
Lewis Benson:  And we'll get our break going and I'll see you in 10.
01:10:00
Lewis Benson: All right, welcome back.
Lewis Benson:  So I just kind of want to go over how you'll complete. Today's assignment. I'm going to do this kind of as a group. I'm I want to give everyone an opportunity if you wanted to work on some of your Older assignments if you need to get caught up, this could be a when we get into breakout rooms once you go through today's assignment. You could create a new repo and then use that new repo to start working on. some of your previous assignments if you need to get caught up on some of those Or if you just want to start converting your old projects and to get repositories for the practice, this could be an opportunity for more practice that way as well. The idea for today is to basically maximize our time and kind of get a break from. all the JavaScript and everything else. We've been getting stacked on us here.
Lewis Benson:  So I'm trying to make this week a little bit easier than most. So with that we'll also have next week off for anyone who does need to get caught up some on some other assignments. So you can use that time. We'll have the entire week off for Thanksgiving.
Lewis Benson:  And then the following week will get back into some more JavaScript. We'll start learning Dom manipulation just to kind of give you some overview of that. So I'm actually going to open up the assignment for today Now there's one part in here. That's a little bit confusing.
Lewis Benson:  You'll have to take a screenshot. And the point where you're taking the screenshot can be a little weird. So we're it's kind of kind of go through that pull request that I showed earlier where you do. You do a change directly on GitHub. And then you're going to pull those changes to your remote and then at that point you're going to create a screenshot. So let's show that process. So first thing I'm going to do is create a new Repository. Let's see what it says to call it.
Lewis Benson:  We want to oh, here's a get cheat sheet as well. I mean, I'll show this to you.
Lewis Benson:  This has pretty much every git command you could ever think of in here. It goes into a lot of really deep topics. We're barely scratching the surface on what you can do with get. But the main thing is the ACP process understanding that will put you far enough ahead with get that you'll be able to pick up a lot of these other little commands as you use the tool. You'll come to a point where like I kind of need to do this and you can just check to see what the command is to do that because there's pretty much a command for everything. Here's one that's pretty useful is amending your previous commits. Don't amend published commits what this means is if you push your code to GitHub, it's a little late for that. because it's
Lewis Benson:  creating a second copy of your commit history. So if you publish your commit and then change it locally you're gonna have a conflict whenever you go to push your code again. So that's what the sheet sheet is. It has all the different git commands. You can read through those if you want and try to interpret what a lot of those do that could be useful. So the commit cycle Let's see. We want to First create a new Repository.
01:15:00
Lewis Benson:  Take the file. Okay. So this is from the previously forked repository. So I'm going to redo that again since I removed that Repository. So to get that I need to go back to the day one assignment. Let me open that up.
Lewis Benson:  And go to day one. And so here's the fork repository that it's referencing. So if you haven't forked yesterday's repository, you'll need to come into the day one assignment and you actually need to grab this. So the first thing we're going to do is go to this repo. And then we're going to click on the fork button and this will create a copy of this repo on our repos. So the name of the repo is going to be GitHub practice, but that's gonna happen for us that I'm currently on this repo here. Or on this user's repo here. And this is the name of the repo whenever I fork this it's going to transfer it to my repo. It's gonna create a copy of it to my repo.
Lewis Benson:  So now we can see that changed now. It's my username slash repo name. And now I can see all the code is here. So once we have the repo forked we want to make sure we have a clone down. So if you haven't cloned this down yet when you're going to want to do that at this time as well.
Lewis Benson:  So to clone down a repo I'm going to go into my projects folder. And I'm going to open my terminal here. so my terminals working directory is currently projects where all of my folders are. And I'm going to say get clone. And I'm going to paste in that link. And it never works whenever I don't do it immediately, so I need to copy that again.
Lewis Benson:  And then I'll paste in that link and press enter.
Lewis Benson:  Oh, so I already have a folder. I didn't delete it locally. Let me remove that. I'm just so I can show you that process again. Let's try that again.
Lewis Benson:  I'm if you already have a folder with that name, you'll just that's what happens there. It gives you a failed for fatal destination path and it will say that this already exists and it's not an empty directory. So if a lot of your repo names are like very similar in name like so I'm using demo 11 14 11 13 Etc. If I were to create two demos and try to clone them together or clone one down. I already have a folder called Dental 1114. I'm gonna get that same error. So that's all that means. So it looks like we have the GitHub practice. So I'm going to CV into that with CD GitHub.
Lewis Benson:  Practice and then I'm going to use codespace period to open my vs code within that folder.
Lewis Benson:  And I'm going to go to index.html.
Lewis Benson:  Sorry for the assignment we go to readme.md. and for the readme
Lewis Benson:  It says I need to. Answer these reflection questions. So I'm just going to add those to my file.
Lewis Benson:  And then I could answer these here. If you use these astrixes like this, it'll actually create bold around your your text. So I could say this is the main tool dev's news or Version Control. You can put whatever makes sense to you. I want you to use your own words when you answer these type of questions.
Lewis Benson:  How do local and remote repositories differ? Local is on my computer and remote. Is on it.com.
Lewis Benson: Okay, so we have some content in here. Just to see what this kind of looks like. Maybe these can't have spaces. There we go.
Lewis Benson:  And that makes that bold. So this is called marked down. It uses a little bit different syntax than HTML, but if you were to look at this on a web page like a markdown file, it actually all be converted into HTML. So it's fairly similar in that respect. But you it's not as powerful as HTML is or HTML. You have all the attributes you can add style tags. You can use HTML directly in a markdown file, but you don't see that very often. Okay, so we have our answers to the questions. So next thing I need to do is ACP this
01:20:00
Lewis Benson:  And I don't remember which terminal to use so I'm just going to open a new one.
Lewis Benson:  And say get Bash. Actually, let me go into the floor and do it. So we're in the GitHub practice folder. I'm going to open my get bash here. And now I'm going to do the ACP process.
Lewis Benson:  So for the get ad I'm going to add all files. Get commit Dash.
Lewis Benson:  answer reflection questions within read me and then I'm going to do get push origin.
Lewis Benson:  Mean, okay. So everything is now up to date on GitHub. That was yesterday's assignment, which is forking over a repo to your repo cloning it down making those changes committing those changes and then pushing those changes back to GitHub. So, let's see those changes on GitHub now.
Lewis Benson:  And here's my readme file being displayed underneath. And it says utilize this repo for your homework to practice get forking. So this is just where we answered the questions and everything seems to be up to date there. So now I'm going to go back to day two. Staging changes so take the file. We cloned yesterday and make a modification to it and Stage this change. So we created the reflections.mark down yesterday. So let's add to that. Add a good resource you found while learning get so here's a good resource we can add. And I'm going to plug that in.
Lewis Benson:  So to do it link and markdown syntax. Let me close this little window here. If I put these square brackets I can type my basically it's like alt text. It's It's interesting how this works so I could place text in here and then link to it. Like it's a anchor tag in HTML so I could say link to get cheat sheet
Lewis Benson:  and then outside of the square brackets I can put Umarentheses and you can see over here. It created an actual clickable link and I'll just drop that link right there. And then if I click on this it actually opens that up.
Lewis Benson:  And if you want to get this preview how I have it to do that. It's actually up here at the top. So here's my close button. I come down. I look for this little magnifying glass with the split screen right there. I can click that and if you don't like having this on two tabs, you can actually drag this over so it's all on one tab. It's basically up to you how you want to lay this out? Now but this gives you a preview of what the markdown would look like if it were deployed. That's kind of like your live server except with markdown. You don't need to use a live server to view it.
Lewis Benson:  Okay, so we have our change we added a link. So the next step is to ACP our changes. So I'm going to open up my terminal. and I'm going to get add period it commit Dash m.
Lewis Benson:  And I added a link to external. source
Lewis Benson:  and then we get push origin mean. I got a typo there. There we go.
Lewis Benson:  And that's again the full ACP process. We made a change to the file. We got it to a stable point where this looks good. Like I look at the preview here. I can see that link is exactly what I wanted to be. So now I'm ready to push this code to GitHub. So I added it to staging I committed it. And then I pushed it to GitHub.
Lewis Benson:  Does anyone have any questions about the ACP process?
01:25:00
Lewis Benson:  Okay. So I'm going to minimize.
Lewis Benson:  And we'll look back at the instructions. So we did the commit we have our meaningful message. So now we're on the part two. We pushed our committed change. Push the committed change. I'm sorry. Let me back up here a second. I think I'm getting ahead of the instructions. Very meaningful commit message. We did that.
Lewis Benson: Okay. So this is the same instructions twice. I'm going to modify these for the future that way this isn't so confusing. The remote change after you've pushed your remote change generate a simple text file in the remote repository notice is saying remote Repository. So can someone tell me what what that means by remote Repository?
Iris Coats: To you. That's the one that's in GitHub not on your computer.
Lewis Benson:  Exactly, and it says to call it this synchronization.txt. So we're going to create a new file directly on GitHub. So to do that. I go to my GitHub and I can see that I'm on the GitHub practice repository on my profile name. And what I want to do now is add a file. And hit create new file. And then for name your file. I put in synchronization.txt. Let's see if it says about any content for that.
Lewis Benson:  There doesn't appear to be any content requirements for that. So. I'm not going to place any content in there. Let me close this extra tab. It's confusing me.
Lewis Benson:  All right, so I have the file being created. I'm going to hit commit changes here on GitHub. I'm going to commit directly onto the main branch. This is a decent commit message because there's no content within the file and we're just creating the file. So this commit message makes sense to me. So I'm just going to hit commit. And now we can see that synchronization.txt was created within my GitHub repository. Now when I look in my vs code. This is the GitHub practice folder. We can see that that is not here. I can refresh the Explorer. It's not here. Somebody want to tell me how to get my remote changes to my local machine.
Umar Z: all I think
Lewis Benson:  Yeah, it's pole so I can do get all.
Lewis Benson:  And we can see that we have a fast forward. Meaning we don't have a merge conflict. We have a synchronization.txt and it added one line. So we have one file changed with one insertion.
Lewis Benson:  I'm not sure what the create mode. 100 644 thing is but we did create the file and that's what matters. So there we can see the file is created. That looks good. So going back to the instructions.
Lewis Benson:  After you've pushed your change generate a simple text file on the remote. We just did that pull the remote change. We did that. Use get to pull the change major remote laws Ferry make sure that the new file appears in a local repository. So this is where we would write a reflect for the next part. I'm just going to copy this and there to share where that goes.
Lewis Benson: so I'm going to put my a to actually put this inside of an H2. Say day two.
Lewis Benson:  reflect Paste that in right there. And I'm going to make this reflect bold by putting two asterisks on each side of it.
Lewis Benson:  Just to kind of show you some where the syntax you can use. And if we look at the preview we can see that that was bold. Now. This is a heading and then I want to move this link down to day two as well.
01:30:00
Lewis Benson:  Okay, so there's the link in day two there's a reflection and then I would answer my reflection here.
Lewis Benson:  And when I look at my preview, I think this looks pretty good. I got my bold response here. I got my actual reflection. This little piece is bold. This looks pretty good. I think we're at a good point for and ACP process. We haven't added anything into this text file. That's fine. So I'm going to go ahead and start the ACP process. So I'm going to open my terminal. And I'm going to say get add. And this time I want to type in the file name just to remind you that you can do one file at a time.
Lewis Benson:  commit Dash m
Lewis Benson:  the two heading with content
Lewis Benson:  and then I want to push this to my GitHub but get push origin man.
Lewis Benson:  Okay, so looking back at the instructions.
Lewis Benson:  I thought there was somewhere in here we needed to do a screenshot.
Lewis Benson:  This is day two.
Lewis Benson:  After you pushed or remote pull the remote.
Lewis Benson:  Okay, so it doesn't look like we need a screenshot. Let me check the rubric on that.
Lewis Benson:  It was Justice text file. My notes must need change there if we were going to include a screenshot. I'll just show that real quick. What I would do is I'll go to my readme. I'm going to take a screenshot here. I'll do just
Lewis Benson:  I'll do the the selector full.
Lewis Benson:  Okay, and now that screenshot you might have to use your paint or whatever program to actually paste that and I can't paste it directly here. Because it just says image.png. Well, actually that did work. Wow, that's it must have added that feature on.
Lewis Benson:  Okay. So after I screenshot it, it went into my clipboard and I was able to just paste it right in. So this added an ALT text here and it added the the file name notice. The file name is the same as over here. So if I wanted to rename this to screenshot then I need to update this to screenshot and then we have our alt text. I would say screenshot. of markdown and we'll take a look at that. And there's my screenshot. my text So that's all looking pretty good. So now I can ACP this now I've done two changes here. So I have two different files. These are very related changes. So this would be a good time to use to get at period
Lewis Benson:  I'm actually going to do it separately again just to show you how that works process would be if you do work in multiple files on unrelated things. So I'm going to say get add screenshot dot PNG. I have able to auto complete that with the tab key because it's in the same folder that I'm in. And then I'm going to say get commit - M. Add screenshot to root.
Lewis Benson:  And I want to do another ad it add. readme dot MD Get commit Dash m. add link to image
Lewis Benson:  with an readme
Lewis Benson:  So now that both of those changes are committed I can now do get push. origin, Main and those are all headed to GitHub.
Lewis Benson:  So let's take a look at GitHub now. And see those changes reflected here.
Lewis Benson:  So here's the sample readme notice. It doesn't show the markdown syntax. It's actually showing the finalized version.
Lewis Benson:  And here we can see a link to the get sheet my reflection with the answer to the reflection and the screenshot of my vs code. All of this is attached to the markdown file. What questions do you have about this?
01:35:00
Lewis Benson:  This is the solution code for today's assignment. So if you were able to follow along you'll be able to submit that at this time and then work on some previous assignments or practicing some of your other. um Techniques building web applications, maybe work on some CSS things like that. If you're ahead if you're also wanting to practice more get you can start converting all of your previous assignments and to get repositories just to get that practice work with the ACP process a little bit. I just wanted to get a little bit of extra time and today for anyone in Easy get caught up and I also make today a little bit or this week a little bit easier than what we've been dealing with what the JavaScript and everything we've learned on top of all this. So are there any questions before?
Lewis Benson:  We Begin the assignment for those who need to work on the assignment still
Lewis Benson:  Yes, Krystal.
Krystal Jefferson: um I last night you mentioned.
Krystal Jefferson:  On mine is still says Master. How do I change it to me? I don't I still I'm still kind of stuck on that.
Lewis Benson: Okay, so that's not a big deal. I will walk you through that. As soon as we start to break out rooms. There's some terminal commands you'll you'll plug in and…
Krystal Jefferson:  Okay.
Lewis Benson: it'll make it so all of your future branches are set to main I don't remember the commands off the top of my head. I actually have to look at the There's I have a cheat sheet for that. So I'm gonna actually start opening that up.
Lewis Benson:  But yes, that is a good question. Is there anybody else who has that showing his master Branch instead of Main?
Lewis Benson: Iris, I see your hand is up is your showmaster branch. Okay. All…
Iris Coats: Yeah, it did earlier.
Lewis Benson: I'll actually let me find these instructions real quick and I'll actually just go through this. With everyone here, I'll just in case anybody else watching. The recording wasn't able to attend today has the same issue.
Lewis Benson:  That way we can get that sorted out.
Lewis Benson:  Bear with me one second here. There's a lot of I have this entire like slideshow for setting up the development environment that we don't use anymore. And it's one of the steps in here.
Lewis Benson:  All right. I got it. So it's similar to the commands we used for setting up our username and email. So with the command looks like is this I'm going to paste this into the chat as well. So you have to do is get config Global and then when you set and it dot default branch mean so again, let me paste this into the slack.
Lewis Benson:  Somehow got the letter i in my clipboard. Let me just recopy it.
Lewis Benson:  Okay, that looks good. Yeah, and you just paste that in and it's not going to change your branch name and instantly. Domain if you already have a repository that's branch is called Master. It's going to continue to be called Master until you manually change that but I can show you how to do that as well. So I'm actually going to go the other direction with this just to show you how you would change it to.
Lewis Benson:  Main, but I'm gonna go to master instead. So just do what I'm doing, but type in mean where I type in master. So if you need to switch yours over if you already currently have a repository and you want it to be called name. What you'll do is you'll say get. branch sorry, it gets switch. Not very good. Sorry about that. Get switch - c this is going to create a branch. And then you're going to put in the word main so that creates a new branch called Main. I'm going to put in master because I'm already on the main branch, but make sure you use the word main there. So once you have this created you can do a git push origin Master, except you're gonna type in Maine not master.
01:40:00
Lewis Benson:  And what this does is it creates that branch and it pushes it to GitHub? So the steps are going to be get switched - c. space Main And get push origin mean. And you once you put in that initial code to get config Global thing. You should never have to do this. Again. This is just like a one-time deal. Yes, Krystal.
Krystal Jefferson: Do you have to be in on behalf of the inside of a folder to change that it? It's I'm not sure what happened with mine.
Lewis Benson: Are you did you just do the get config Global command? And you get an error?
Krystal Jefferson:  I did.
Lewis Benson:  What was the error message you received?
Krystal Jefferson:  Oh, let me go back to it and
Lewis Benson:  And paste it on and see.
Lewis Benson:  So I don't have any output when I do it online. I believe if I don't put main there it does return my current configuration.
Krystal Jefferson:  it says fatal not to get repository or any of the parent director.
Lewis Benson:  It shouldn't matter. Forget config. Is this the command you typed in get config? Let me highlight it here get config dash dash global.
Krystal Jefferson:  No, it was the other one. I'll go back and do that one.
Lewis Benson:  Yeah, so this command here is for whenever you create new repositories every new repository will have a default main branch instead of a master branch. But it doesn't change your current repositories to change them. You'll have to CD into your account repository. That is currently a master branch.
Lewis Benson:  Iris, I see your hand up there. Did you have a question too?
Lewis Benson:  Okay.
Lewis Benson:  So yeah, whichever whichever repository is currently set to master. You'll just need to open that up in your terminal.
Krystal Jefferson: Didn't do anything it just went to.
Lewis Benson: When you type in to get config command. Enter it shouldn't actually respond with anything other than just letting you yeah,…
Krystal Jefferson: Okay. Okay.
Lewis Benson: that's that's all.
Lewis Benson:  Right. So did you you got that command in? So those are a current repository that's set to master that you need to change to name.
Krystal Jefferson:  Oh, okay announced up.
Lewis Benson: But you receiving errors or what happened. Are you stuck with?
Krystal Jefferson: Oh. Like you said it didn't it didn't do anything, but I don't I'm kind of stuck on what to do next.
Lewis Benson:  Oh, okay. So the next thing is you said that you had a repository that was currently set to master, right?
Krystal Jefferson:  Yes.
Lewis Benson:  Okay. Can you CD into that folder or open your terminal within that folder?
01:45:00
Lewis Benson: No, wait, was there anybody else who had any issues with the the branches or anything like that?
Krystal Jefferson: I think I got it.
Lewis Benson: okay, so does it say how mine is right now with Master right after the name of the folders
Krystal Jefferson: Okay. Now it's not saying anything. Um, it's it has the folder there, but it's not saying anything after not sure…
Lewis Benson: Is it you're in your own Windows,…
Krystal Jefferson: what I do.
Lewis Benson: right? Okay, so if it doesn't say anything after it, then you're probably not inside of a repository currently. I'm assuming that maybe you're in your projects folder.
Krystal Jefferson:  I think I think I am.
Lewis Benson:  So you'll just need to CD into whatever repository is having that issue.
Krystal Jefferson:  Okay.
Krystal Jefferson:  hmm
Krystal Jefferson: Okay, I'm online schooling point. I'm trying to remember. how to get to it
Lewis Benson: Was it your current assignment you're working on?
Krystal Jefferson:  Oh, no, it was a previous one. but it's
Lewis Benson:  Okay.
Lewis Benson: one nice thing about this is I'm whenever you create your repos using GitHub first and then clone them down. All of them will also be set the main. GitHub uses main by default without you having to configure that.
Lewis Benson:  So the only ones that'll have the the master Branch or the ones that you said get in it originally.
01:50:00
Krystal Jefferson:  okay, I think I have it home. think I have
Lewis Benson: Oh, yeah also to add there is no quiz this week. It'll just be these five assignments.
Lewis Benson: Juice, are you still looking for that for older Krystal?
Krystal Jefferson: I think I may have found it.
Lewis Benson:  So you're ready for the commands to convert it?
Krystal Jefferson:  AR let's see
Krystal Jefferson:  So I got quote that over accidentally. AR
Krystal Jefferson:  it may take a minute for me to to find it on.
Lewis Benson: That's all right. We're not I'm not really going over any new content from the for the rest of the class at this time. It's basically just working on the assignments.
Lewis Benson:  Iris, you said you had the same issue though. Did you get yours to work?
Lewis Benson:  your config command
Iris Coats: Yes.
Lewis Benson:  Okay, and did you have a repo that you needed to convert over to a main?
Iris Coats:  No.
Lewis Benson: Okay, so I'm guessing it was just one of your older ones that you don't. You're not working.
Iris Coats:  Yeah.
Lewis Benson: Okay. Yeah, if it's like a previous assignment, it's not a big deal. Just moving forward making sure you have this get config set up in there. And you'll all your repos in the future will have a main branch by default then. And it yeah,…
Iris Coats:  Okay.
Lewis Benson: it's not a big deal. If you have one that says master, I will show for anyone watching the recording that needs to convert those though how less process would look. So I had to do it kind of backwards because I I created a new Branch. I'm going to show this again. I create a new branch called get Switch I'll get switch. We'll go to a new Branch or in it to any branch. You put this C flag on here and it will create a new branch. And at this time you would put in mean. If I hit this now, it's going to throw an error because I already have a main branch.
Lewis Benson: So it says a branch name main already exists once you run that though. This should switch to Main. So once you do that, you'll do get. push origin Main,…
Iris Coats: ice
Lewis Benson: this is also going to fail because I'm currently on the master branch. And I don't have any changes to push anyway. I guess I just got everything up to date. But this would be the two commands that you would use so get switch - c main get push origin Main.
01:55:00
Lewis Benson: This right here is gonna say main whenever this happens,…
Iris Coats: ice
Lewis Benson: so I'm going to say get switch. I mean so that it's up. Everything's up to date now. So the next thing I need to do is delete my master Branch off of my machine. so to do that the command is get branch
Lewis Benson:  with a d flag and then you put in master. So it's get Branch D for delete. And then the name of the branch that you want to delete. And it says I deleted Branch master. And I'm still on the main branch. I also already I reconfigured my GitHub to show you the proper process on how you would change it over. So it says I have two branches currently. If I look at them, I can see my main branch here and my master Branch here and I already set the master as my default so that it would show you the process as if you were having this issue So currently my master branch is my default branch. And my main is a secondary branch and we can see that listed here. So what I can do is go to settings and this is on these tabs here at the top.
Lewis Benson:  And where it says default Branch, I'm going to click these arrows to switch to another Branch. Click the drop down and switch this domain. And then I'm going to update. This error is referring to whenever we have our web pages deployed using third-party deployment or even GitHub deployment this would break the deployment if you're deployed off of the master Branch, that's what that's warning us about. We don't have it deployed. So that's not an issue. So now we are on the main branch. And now if I go back to my code. We can see the Justice set domain. We still have the master here. So I'm going to click on the two branches. It's right beside this drop down here. Click these two. And then right over here, there's a little recycling bin. It says delete master. I'm just going to click on that and it's gone.
Lewis Benson:  I did a refresh and now we only have the main branch. Does anyone have any questions about that process?
Lewis Benson:  It's a lot of steps. Just to change that over. But it is good to know in case you do run into an issue where you initialized a repository as a master. You have a lot of good code on it or maybe you're working on. A code base an older code base for a company and they want you to convert everything over to a b Master branches instead of main branch or sorry main branches instead of Master branches. This is the process for that. I wouldn't expect you to memorize this. There's lots of tutorials on how to do this online. There's YouTube videos that show how to do this. There are blog articles that show how to do this.
Lewis Benson:  There's lots of ways you can find this solution. So don't worry. If you don't have this memorized on how to delete branches switch between create and all that right now. It's not a big deal. But if you are in a situation where you don't want to have the master Branch, these are the steps you would need to resolve that issue.
Lewis Benson:  Does anyone else have any questions? About anything at all about the assignment about yesterday's assignment about git or GitHub anything.
Lewis Benson:  Did anybody want me to go through the workflows again to show like how you would start a new project or anything at all like that? Yes, Elgin.
Elgin Sharper: yes, what was the The markdown file. What was that again?
Lewis Benson:  You referring to the readme.com file. This one here.
Elgin Sharper:  I was
Lewis Benson:  Was it the one I was writing the answers in on the assignment?
Iris Coats:  people
Lewis Benson: this one Has a screenshot in it.
Elgin Sharper:  okay.
Lewis Benson: I'll just open up the code and show the code on this. so this
Elgin Sharper:  Now I was just I was reading the assignment and say create a new markdown file. I was trying to know exactly what it was.
Lewis Benson: Was that the day one assignment? Okay. So for the day one assignment,…
Elgin Sharper:  Yes.
Lewis Benson: let me bring that up. So you I'm assuming you forked the repository over right? Okay. So once you have it forked you cloned it down.
02:00:00
Elgin Sharper:  right
Lewis Benson: After it's cloned, it says create a simple markdown file in this case. It's saying reflections.md. So all you have to do which actually I didn't do that. I created them readme.md. So I'll do that now you just create a new file. And you call it Reflections dot MD? And we get a little Downer there showing at this is a markdown file. Markdown syntax is a little bit weird. I can go through some of this too. I'll just for reference. If you put a hashtag in a space this will create an H1. So I could say reflection.
Elgin Sharper: hmm
Lewis Benson: Let's spell that wrong.
Lewis Benson:  And then also when you're in a markdown syntax, let me close these extra tabs. Up here at the top right? There is a split view with a magnifying glass that says opioid open preview to the side. It looks like we can use control K to accomplish this as well. Let me press Ctrl k. And then V I think yeah. So that's a little bit weird way to do that. But here we can see that I have an H1 that says reflection. And then I could put in those questions, which I have currently in my readme file. These are in the instructions. I'm just gonna copy these over.
Lewis Benson:  And paste them in. Also when you're using markdown, I believe you can make all these a one. Maybe maybe that was HTML that was everything a one and it would number it manually. But this uses the number syntax if I put in a hyphen instead of a number. I get the bullets. so markdowns it's easy to use but it's new syntax. So it's just like an extra little thing. It is good to know though, because this is how you'll write your documentation. And we're going to go over mark down more tomorrow. I'm gonna go kind of a little bit more in-depth on all the markdown syntax and it's not like a full-on requirement for get week. I just wanted to show you some more of this that way when we start actually writing documentation. We're feeling pretty decent about how the syntax is for markdown.
Lewis Benson:  So we have an H1 with a reflection I can make an H2. and say day two if I wanted an H3, I'd put three of these.
Lewis Benson:  I could say hour one or something. an H4 And this just continues on like this?
Lewis Benson:  You can kind of see how this is getting it starts off real large. And then this one also has the underline there with it and the neck is smaller and smaller as we go. And I'll go over these again tomorrow. Another one is block quotes.
Lewis Benson: Just put a little arrow like that. so the syntax can be a little cleaner to read it's a little more human readable than HTML is But you don't have as much power with it.
Iris Coats: ice
Lewis Benson: So this this is basically when we say markdown, this is what we're referring to is this stuff here.
Iris Coats: ice
Lewis Benson: And then it outputs this over here.
Lewis Benson:  Something to add to this for anyone who's already done with the assignment. This could be something that you work on. It's actually really really useful and it's on GitHub if you create a new repository on GitHub, that is your username. so if I go to My profile and then my username. This is actually how I did all this little. stuff here with like the this is just markdown and it's kind of like a portfolio, but it's just for GitHub. Let me go into this syntax on this. So that little scrolling typing I actually brought that in from another framework. If anyone wants this, let me know I can send it to you you basically just type in. Your text separated by semicolons. And it gives you that nice little scrolling effect.
Iris Coats: Oh.
Lewis Benson:  You can put Emojis inside of markdown. And then I got like an H1 here that says my name. An H2 with my heading like your headline like you put on LinkedIn and about me experience in a contact with me. So this is essentially a portfolio on my GitHub so that anyone could go on here and contact me through this.
02:05:00
Lewis Benson:  Does anyone have any questions about that again, you just create a repo with your name? So whatever your username is, so to get a new. And then for me, it's em - L be enso in. and it says I already have a repository for that so I wouldn't be able to use that.
Lewis Benson:  But this would be how you would actually create that portfolio. So if you do have some extra time go ahead and take a look at that. There's a lot of templates out there you can use for portfolios and markdown. So you just search for one of them something to come up. And it's good practice just to have a little bit more time on GitHub as well. They don't have any questions about that. Yes Gregory.
Gregory Robertson Jr: Hey if you don't mind King over today assignment again.
Lewis Benson:  Yeah, the day one or day to assignment.
Gregory Robertson Jr:  day two
Lewis Benson:  Sure. Do you want to see the code or what? Do you want me to show you?
Gregory Robertson Jr: on and
Gregory Robertson Jr:  I need the on part one.
Lewis Benson: All right, the part one. This is actually the day one assignment the part one. So you have to go to the day one assignment and Fork the Repository? and then add your markdown file And…
Gregory Robertson Jr:  All right.
Lewis Benson: then put these questions inside of that markdown file once you have that. We look at part one of this here and it says take the file from your previously forked and cloned repository and making modification to it. So in order to do part one you have to do all of yesterday's assignment Which is just forking this repository cloning it down and then creating a new file called reflections.md. And putting these questions in there and answering these questions. Once you have those you're done with part one.
Gregory Robertson Jr:  I
Lewis Benson:  Does anybody else have any questions?
Lewis Benson:  All right. So there's no more questions for the remainder of class. I am going to open up the breakout rooms. That way you can work and if you need any assistance, or you're running into any issues you have any questions just request me to your room and I'll be able to assist you there. So let me get the breakout room started. I'm also going to stop the recording.
Iris Coats: he
Meeting ended after 02:08:23 👋