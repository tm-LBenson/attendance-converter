nia-amar-wfe (2023-10-26 19:30 GMT-4) - Transcript
Attendees
Chantrice L, Daniel Perez, Elgin Sharper, Gregory Robertson Jr, Ike Steoger, Iris Coats, Justice Miller, Krystal Jefferson, Lewis Benson, Lewis Benson's Presentation, Reece Renninger, Ryan Arnold, TRACY JOINER, Umar Z
Transcript
This editable transcript was computer generated and might contain errors. People can also change the text after it was created.
Lewis Benson: And welcome to week two day four. We're almost done with the week. We're almost ready to wrap up our CSS lessons and from there. We'll actually get to dive into some styling libraries which gives us a lot more power to create modern looking web applications. So it's gonna be pretty cool. Today we're going to be going back into flexbox a bit. We're going to talk about a few properties that I didn't mention yesterday. And if anyone wants me to review how the structure of flexbox works, I'll get into that a little bit in the second hour of class. Because during the first hour, I want to get into grid and explain how that layout system works. It's a separate system to flexbox. It's its own thing, but they can also you work together to make a powerful layouts.
Lewis Benson: So we will get into that today. Let me get my screen share going.
Lewis Benson: Acid open it up. I want to talk about Flex grow and flex shrink. As well as Flex bases. So let me get some code opened up here. And this is going to be a little bit simpler than yesterday's dive into flexbox. I imagine that was a little bit much flexbox is a pretty Advanced layout but once you practice with it, I have confidence that you'll be able to master that. And it's one of those tools that do take some time and some practice to. Get it down. So let's open the folder.
Lewis Benson: And I'm gonna try to make this all as simple as possible. Some of this will be review some of this will be new. But the start as always I'm going to create my index.html and my Styles dot CSS.
Lewis Benson: All right, so I got those two files created. And my index.html. I'm going to place the exclamation point and autocomplete. I'm not going to do the reset today. We shouldn't need it for this demo. It's not going to affect anything. But if you still want to include a reset by all means go ahead and put one in. And this will be another CSS demo.
Lewis Benson: So I'm just going to create some containers to start and what I want to show you is the flex wrap property first and how it works. It's kind of like a word wrap, but for entire elements not just text. So it allows you to wrap things based on screen Very handy. Especially when you're moving from a desktop environment to a mobile environment environment. You want your applications to be usable on all platforms. So I'll make my Flex container. I got to put class here to do that and I'm just going to name this Flex container. So it's clear what I'm using this main for. you can call this class whatever you want to call it. I'm just what I'm choosing to call it right now.
Lewis Benson: And within here I'm just going to create a couple sections. And these sections are going to represent. a nav bar actually, so let me switch this from a main to a nav so that it's a little bit more semantic. Sorry for if there's any confusion there but it's gonna be the same mile principle here. And then we'll have two sections and a paragraph element and within this paragraph element. I'm going to put a home. And I'm gonna put a sign up I could use an ordered lists and use allies for this. I only have two items. So I'm just gonna choose to use two sections and break my nav into two sections like this. This is perfectly acceptable for a demo For Simplicity. I'm going to give their own class.
Lewis Benson: I will call this one item one.
Lewis Benson: class item two
Lewis Benson: that'll be it for as far as this CS or the HTML goes for now. So let me go live and make sure that this is all appearing on the screen and that everything is working.
Lewis Benson: There's the browser and here's my home and my sign up. I'll do a quick inspect. Make sure I see my nav. That's popped out. Let's put that on the side. And if you didn't know you can pop out your Dev tools into their own window right here using these three dots next to the close button. If you wanted to have it mounted on the bottom, you can also do that. I prefer it side mounted so that I can drag it to change my screen size. Just something I like to do. But there are times where you might want to pop it out. So you have your full screen wet, so that could be helpful for you. so in my body I have this nav the flex container, but I don't have it set to display Flex. Otherwise, it would have the word Flex where these two equal signs are. And when I open it up I see my sections. And they have these classes, but I don't have any Styles applied yet. So I'm going to apply some Styles now.
00:05:00
Lewis Benson: And how can I make my now of a flex container?
Lewis Benson: Remember, this is the class name on my nav show that again right here. So I'm using this selector to grab my nav. How would I set this to be a flex container? I'm using.
Ryan Arnold: display Flex
Lewis Benson: display Flex is going to change this a little bit by default. Our main axis now is going to be left to right.
Lewis Benson: it doesn't look like my selector work because I don't see the word Flex here. Let's see. I know what went wrong. if I look at my HTML I'm missing something here to make this work. Does anyone see my bug?
Lewis Benson: And that's one of the reasons why you want to test everything sometimes in my Styles. I'll set my body to have a background color because I know that would apply no matter what and if it doesn't apply then I can tell there's something wrong and I might have forgot something like the link or I might have a typo in my link or I might have spelled Styles wrong. It could be a number of things. Maybe this wasn't plural something like that. So it's always good to test everything and make sure you get some sort of change on your page to make sure it's working. So here we have these side by side.
Lewis Benson: does anyone know how I could actually separate these elements using a flex property? Let's say by 30 pixels if I want these to be 30 pixels apart. If anyone did any sort of research on their own.
Lewis Benson: It wasn't something I covered. Just curious if anyone's seen it.
Lewis Benson: so a way that you can separate elements and this works on the main axis. As a property called Gap and it does exactly what it sounds like. It puts a gap between your elements. And in this case, we want 30 pixels. I could use margin I could select item two item one and put some margin left or margin right on one of these and that would have a similar effect. But when you're using Flex properties, this is kind of like margin, but it behaves a little bit differently with flex. So we see that have that 30 pixel space there. I'm actually gonna put a border around those as well. I'll select my sections and say border.
Lewis Benson: one pixel I'm going to use the short hand version with the three properties and you can put these in any order I could say one pixel solid black or I could say black one pixel solid as long as you have the three properties it'll figure out which one goes where So, let's see. Those are there we have our border. just so this looks a little nicer. I'm also going to put a little bit of padding in there.
Lewis Benson: We'll do. 20 pixels and just see what that looks like. I don't like the padding on the top and the bottom so I'm actually gonna remove that by saying. zero
Lewis Benson: There we go. And this is another shorthand where this will if you have two numbers, the first number will do the top and the bottom and the second number we'll do the left and the right so by saying zero I'm saying don't put any padding on the top and bottom and by doing 20, I'm saying put 20 pixels of padding on the left and right and I'm also going to give a background color to my containers just so we can see where it's located and it's a little bit more clear what I got going on and I like these tomato for that. It's a nice light color easy on the eyes. So we can see the two items here. And what I'm going to do now is I'm actually gonna reduce my screen size by dragging my Dev Tools in. And we can see that it's behaving a little weirdly notice that it's putting the sign up on two lines. It's also increasing the height because my height is based on the height of the container.
00:10:00
Lewis Benson: And when I get so far, I have to scroll left and right to see it. This is where the flex wrap property can come in handy. So if I were going to a Mobile screen Let me switch this tool 125. I'll try 150. There we go, and I'm going to switch this to mobile That actually changed it to 60 for some reason. I think I have to leave that though. And again on a really small mobile device. You can see my background color doesn't look right. I can't even zoom in on this to show this better. so I apologize for that.
Lewis Benson: Unless this does let me set this. Okay, we're good there so we can see that the background color is doing some weird stuff and that's because my Now is only the size of this background color this second section is actually larger than the container. So it's spilling out of the container. So I'm going to put the flex wrap property. on my Flex container
Lewis Benson: and we're going to say Flex wrap rap. And it puts it on to two lines. So if I were on a mobile device, this would be a little bit easier to read and now we do have some empty space over here using flexbox we can adjust for that. Does anyone know how to move elements on the cross axis using flexbox? remember, this is
Lewis Benson: Sorry, it would be the main axis because this is set to a row. So how would I move these items to the center of the main axis? Even though this looks like a column. It's still a row. They're just wrapping to another line.
Daniel Perez: Would be a line.
Lewis Benson: So align would do the cross axis. That would be my left and right. Sorry, you might use because of the way this wrapped. I'll put it this. It is Justified. So thank you for putting that in the chat. So if I did justify content Center, it would move these to the center and then align items would move up and down, but we don't have any space to move up and down. So I'd actually have to increase the height of my Flex container to get any value out of using a line items. And this is confusing because when I drop this down, it looks like I'm in a column but I'm not in a column. This is still a row. It's a single row. It's just all my content is stacked on top of each other currently because it doesn't have enough space and I allowed it to do that. So I'm going to justify content.
Lewis Benson: Center and if you ever try one of these properties and it doesn't move in the direction you expected then go from justify to a line and see if you have better results. And there we have our items centered now, so this wouldn't look terrible on a mobile device.
Lewis Benson: It's not the best thing ever. But for this demonstration, I think it serves as purpose on what's Flex wrap does. I'll add a couple more sections here just to show you these will all be sign ups. If you had a whole bunch of them. And you can see how this behaves where we have. It drops this one down to a line It Centers it because we're justify a little smaller and then it drops it down. And if you look this is automatically just kind of centering everything up making everything look nice and I don't have to do any extra work to get it to do it. So here we have two on each side one in the middle. So using flexbox is very powerful layout tool because of the ability to flex route things and this is what we call a responsive design. That means it can respond to large screen sizes and it can respond to small screen sizes for example Does anyone have any questions about this property?
Lewis Benson: And does anyone have any questions about how flexbox works with the main axis and why this is a main access left and.
Lewis Benson: and even when I'm standing like This is still my main access left and right it looks like a column but it's still a row. It's just all of my content is in one spot within that row. So that can be a confusing thing to look at if I wanted it to be a row. How would I do that?
Lewis Benson: Does anyone remember the property for making a flex container into a column instead of a row?
00:15:00
Ryan Arnold: Flex Direction column
Lewis Benson: That's it. you're good. Flex Direction column and we also have this column reverse. I can show you what that does in a moment. We're gonna set up the column. and now everything is in a column because we have our Flex I'll get into what Flex grow is in a minute by default though. Just know that flux grow is set to allow it to grow to the whole width of the element. So that's why it's stretching across there. And that's also why it shrinks. And then as we get smaller, it starts to get that weird Behavior again. And in the second hour, we're going to talk about media queries and how you can actually change the behavior of what?
Lewis Benson: your Flex direction is based on screen size. You can pick the screen size in your CSS and you can say if my screen size than let me see where it starts to break. If it's less than 94 pixels then I want to switch this to a different layout and you can do that with CSS. You don't have it to have any JavaScript to handle that type of logic.
Lewis Benson: 94 pixels is really small. If I'm under 200 pixels, I don't typically use anything. Yes Gregory.
Gregory Robertson Jr: I had to go easy. Okay, if I come back and watch these, recording. All right.
Lewis Benson: Yeah, that's fine. Yeah, thank you for letting me know.
Lewis Benson: So does anyone have any questions about switching from column to row how Flex wrap works and why it works I notice it's not wrapping anymore. But what happens if I shrink my height since I'm in a lecture out? It doesn't seem to actually be able to shrink it down because of the height of the element, but if I were to shrink the body height, it could wrap it to the right as well and create two columns, but that would be a little bit of a pain to set that up for this demonstration. But just know that it can do it. It's just a lot of CSS to make it work, right?
Lewis Benson: Okay, so that's Flex wrap. So I'm gonna put this back into a row. I'm actually gonna do a row reverse.
Lewis Benson: And just to show you how This could be used for If you have some sort of sort on your site now notice my sign up is on the left and my home is on the right. So Everything now is reversed on the page. And that's pretty self-explanatory on what that does. But without seeing it might not be a hundred percent clear until you actually see it in action, but it is a way to reverse your content. This could be useful. If you have a layout where you have as you're scrolling down the page you have an image here. I'll actually go to figma and show you what I mean.
Lewis Benson: We'll make a blank spot over here. So if you have a page. It looks like this and I'm going to use a triangle for content. And let's say you have an image here. And you have some text here.
Lewis Benson: That's not very easy to read just a little bit thicker.
Lewis Benson: So this was my image and my text in your HTML, you can lay this out really easily. and then use this is how the initial layout will look in your HTML. You'll have this. inside of containers like this So you'll have two Flex containers these are both set to row. And then what you could do is you can set this one to row reverse and you can take all of this and slide it over here and have your image over here and then you can alternate between row reverse and row on each of your Flex containers. and if you remember from the demo yesterday we talked a little bit about ends of type and you probably didn't get that far with the CSS game. I know Ryan asked a question about it.
Lewis Benson: But what you can do is you can type in nth of type set on the section and you can say all the even rows or all the odd rows set them the row reverse and then this would give you a layout where you have text over here and image there text over here and image there and it could be a nice landing page for some sort of sales page. So that's a good use case for row reverse.
Lewis Benson: We're not really. Gonna dive too much deeper into the flex Direction manipulation. I want to get into grow Flex shrink and flex bases and I'll mentioning them all at the same time because they're all so closely related and there is a shorthand similar to how I do the border with three properties and one I can do the same thing with F shrink and flex basis. I just typing the word Flex. So if I say Flex one What this is actually doing and I'm gonna put this in a comment underneath.
00:20:00
Lewis Benson: Let me write in code first that way I don't put any typos in. I'll get the other complete. I'll say Flex shrink would be one. and flex Basis would be zero. So this is the default values if you just say Flex one, you could also manually type in one zero like this and it's the exact same thing. Let me go ahead and comment Just so that it's clear what this is.
Lewis Benson: But this is the shortcut to do this. So I'm going to use the flex property because this is the more common way you'll see this done whenever using Flex grow shrink and flex spaces. I haven't explained what they do yet. So let's take a look it does that every day? Let's take a look at the code now. I'm sorry, the page. And by default it's already set to grow one. Now. That's the default setting So anytime you say display Flex. You don't have to say Flex one because it already did that for Yes Justice.
Lewis Benson: You're muted if you're talking Justice.
Lewis Benson: But I'm actually going to use this my sections instead of
Lewis Benson: I'm actually going to delete these extra ones here and I'm gonna apply the flex on one of my item two Let me copy one of these but don't make any typos. And I will show you why in a moment. So we'll do Flex one here.
Lewis Benson: And flex an item 2 here. So again, you won't see any difference here other than I only have two items now, but notice they're taking up the full width of the screen and they're both shrinking at the same speed and then they also are still wrapping. So we'll go down be on the same sides. So I'm gonna set my Flex basis first. And I'll do one and I'm gonna set this one to 200 pixels. I remember this one's already set to 1 by default. That's my Flex shrink property. So let's take a look at this now. So sign up is set to 200 pixels, which means it's width is 200 pixels. If it has the space for it, let me close my Dev tools. That's really big.
Lewis Benson: I want to set a width on my overall container. I believe to make this a little bit more clear. What's happening? so I'm also going to set 200 here.
Lewis Benson: And we run out of room. Let me turn off flex wrap.
Lewis Benson: And I'm also going to turn off this Gap. So we have maximum space here. Okay, that's much better.
Lewis Benson: And how far am i zoomed in?
Lewis Benson: pretty far
Lewis Benson: so as long as we have the space. These will go to 200 pixels by default. and if I go back to my Dev tools and I start shrinking these down we can see they're shrinking at the same speed and they're growing at the same speed. So what I want to do now is I'm actually gonna change this one to be 10 on Flex grow. So as I move this it's now going to shrink and grow at It's only gonna grow at 10 times to speed as the other one. Yes, Ryan.
Lewis Benson: You have a question.
Ryan Arnold: Sorry forgot my community. Could you just go back to the style sheet real quick and show that code again?
Lewis Benson: Yeah.
Lewis Benson: And I've actually gonna switch to using the long hand just so that because this looks kind of confusing. I just want you to know that this is equivalent to what's above
Lewis Benson: I'll just put this underneath of it so that it's a little bit more clear what I'm doing because this way they're labeled. So we have one. two hundred pixels and this is the exact same thing. I had of it again. You will see the shorthand written a lot more whenever you're going through code. This is the way most people write when they're using Flex.
00:25:00
Lewis Benson: All right, so as we were so those are growing and then if I set this one to Grow 10 it'll grow ten times the speed as the other item. So as I shrink and grow this now this is going to grow 10 times faster than this side over here.
Lewis Benson: And this is one of those things. I mentioned responsive design where you can make this work great on mobile devices and on larger screen sizes. This specific property is also referred to as a fluid design because it doesn't use break points to decide. Okay, I'm gonna now wrap this over or I'm going to change my size suddenly. Every single Pixel this is moving with the screen. So that's a fluid design versus a responsive design and it kind of mean the same thing. But a responsive design could snap I could say when I hit this breakpoint, you're gonna shrink down to this size. when I hit this breakpoint, you're going to shrink down to the size and you'll see it. It'll chunk the sizes down as you go but with a fluid design it grows and expands at the same speed as you move with it. So hopefully that makes sense.
Lewis Benson: Flex shrink Works the same way as Flex grow and I'm going to put flex On this side and we can watch that property shrink. If I don't really have that much room there goes you can see the sign of a shrinking really fast.
Lewis Benson: So that's kind of it for the basics on those properties. the use cases they're kind of complex to explain without an actual. Web application that's using them. So what I would recommend is actually exploring these more on your own. We're not going to have time to dive too much deeper into these. I will tell you they're not that commonly used you're not going to use these every day most of the time you're just going to settle with and you can get the same results using media queries and widths but it is powerful and it is something that I would recommend exploring when you have the time. But again, I'm not going to dive any deeper into these right now. I'm just for the sake of time and we need to get into grid.
Lewis Benson: So with grid, I'm actually gonna transition over to that. I'm going to show this with the drawing and how this is a little bit different than So with flexbox here's our page. We have that main axis and we have our cross axis with grid. We have to Define what's called a grid. and the grid template. Is basically telling the screen where you're going to contain certain elements and I'll show you what that means so I can say that I want my page to be three columns wide and grid Works in rows and columns. Whenever you're building your template. It would be in a Rowan column. So if I want my header to be here I could say this header is going to take off. three sections so you can't actually see the background color on that or the Border.
Lewis Benson: So, let me see if I can change that to something visible. There we go. So if I have three sections what this would look like is I have a line here. And I have a line here. So my nav bar is now broken into three parts. And what I'm gonna do is I'm actually gonna create a line here. This is going to be my top row. And I'm gonna have another row here. And I'm just going to kind of lay this out the way that you would do it with grid. So my headers broken into three pieces. And then maybe we want to have a sidebar and we can put that sidebar right here.
Lewis Benson: And we'd put our content or our main. It would go here and it's gonna take up two of The Columns, but it's on the same side as the sidebar. So if I was using flexbox, I would have to have this wrapped in a container and then I have to set this to display Flex to put these side by side and I have to manipulate them that way and I'd have to make sure this one's taking up two times the width as this one. and then for This section 16 This would be the header. This should just be a section it could be a nav if it's a navigation sidebar. and then this could be an article.
00:30:00
Lewis Benson: And then at the bottom I would put my footer.
Lewis Benson: So it looks something like this. And if I was using flexbox, my main would have to be set the display flex and have to be set to a column and then I'd have to have this all wrapped inside of another container which would then be set to display flex and it would be set as a row. And then that would kind of give us the same layout but with grid you have a little bit more flexibility because only do I not have to use as many selectors and as many containers and nesting as many things I can also use this template to lay this out dynamically and also change it dynamically. So let me show you what that looks like in With my index. I'm going to create a new one called grid.html.
Lewis Benson: And I'm going to create a new style sheet called Red Dot CSS, just so we're clear on which ones which. I could have placed all this inside of my styles.css. So you want to continue to use the same style Go ahead. And I don't need to make sure I link this in this time link. And that's called grid.css.
Lewis Benson: So we had a meme. and within that mean we have a header.
Lewis Benson: We'll do a nav for the sidebar.
Lewis Benson: We have an article. that would be our of content and then within my main I'm also going to have a footer. I could have a secondary footer outside of the main as well. This would be the page footer and this will be my content footer if that makes sense. So I have two Footers that way I'm Gonna Leave This one out for now just so that it's clear why this is inside of the main because you can have each piece of your
Lewis Benson: elements can have its own header and folder. So if I wanted to I could put another header and footer inside of the article, too. And that's where you put the article title in the article footer which might have the author information in it. So just kind of giving you a little bit of review on semantics there with that.
Lewis Benson: Okay, so This is going to be. My grid container and I'm going to use a similar naming Convention as I did with flexbox. Just so it's clear What's Happening Here? and now I need to actually put classes on all of these. So we have grid item. I'm just going to copy and paste that on all of them.
Lewis Benson: Just like that.
Lewis Benson: And the next thing I want to do I want to give these a second class name that represents where they're going to be located.
Lewis Benson: So we can do. Item one. this has to go inside of the class.
Lewis Benson: item two item three and item four and the reason I'm doing this now is so that I can Define my grid items using certain Styles and there'll be applied to everything. So I don't have to do individual selectors. And then I also want to individually be able to grab each of these items and put them into my template. And the template will make a little bit more sense once I actually build this out for you.
Lewis Benson: Okay, so let's start building up the CSS. So I'm going to select my grid container.
Lewis Benson: And I want to set this to display grid. This is very similar. We can even see that we have flexbox here. We're not selecting Flex we're selecting grid. And again, this is a separate layout to flexbox. It's its own thing. But you can nest flexbox with end grid. And in fact when I normally do a layout of a page, I may have two grid containers on the whole web page and I might have 20 Flex containers on the page. So you use them together to leverage them a little bit more but I typically lean harder into flexbox than I do great, but grid does have a place and it is very good to know how to use it. So next we have to Define our columns because I said in my drawing that I wanted to have three columns, I'm gonna use this repeat. And I'm going to say we're gonna have three columns. And each column is going to take up one fractional.
00:35:00
Lewis Benson: One fractional unit. So what this means is it's going to take up one third of my display size. I don't know if that's completely clear how that works. If I said this to be two fractional units, then it's going to take up two thirds because I have three columns of the screen size. each piece of that
Lewis Benson: So if anyone have any questions about that.
Lewis Benson: What the fractional unit how that works? So it is just a representation of a fraction of the page. it's a little weird to look at but once you use it, it kind of makes sense. So the next thing I want to say is how much space do I want to put in between each grid item and this is similar to the Gap property with flexbox where I use gaps at 30 pixels and it pushed things apart by 30 pixels, but for Grid, it's called grid Gap. But it does the same thing but it doesn't just do it left and right across the main axis. It also does it up and down because this is a grid. And I'm also just going to add 10 pixels of padding because I want to push things away from the edges of the page. So if I look at my page now, I'm not going to see any results yet. So what I'm going to do is I'm actually going to put a background color on all of my items. So we have item one.
Lewis Benson: And we'll say background. I will do my tomato.
Lewis Benson: And we'll do item two.
Lewis Benson: background Orange and I forgot my DOT there. It's nice that vs code makes it a different color so that we can see that little bug item three. background I'll do gold.
Lewis Benson: item four keep this
Lewis Benson: dot I apologize for all this. Coding out of the same things over and over and over again, but it is necessary. in order to make this demonstration effective and how many items did I have?
Lewis Benson: If four items, So the next thing I want to do is actually lay this out now with a grid template so I like to do this inside of its own selector. So I'm actually going to push these way down. So they're out of the way. These aren't relevant to the actual grid part of this. These are just putting colors on the elements. All right, so I'm going to select my grid container again separately. You can do it in the same selector. It's just something I like to have outside of it so that it's easier to understand. And I'll show you why. So we selecting our grid container. And the property is called template areas and what I'm going to do now is actually make this a multi-line piece of code here. I'm going to put quotes. and we're going to say header
Lewis Benson: I did this as item one. I should have made these a little bit more clear. I normally name these. I'm actually Gonna Change. I don't want a good deck and change all these though too. I normally would name this header instead of item one. But if we look at the class we can see that is on the header. So we'll call Item one.
Lewis Benson: and item one. So this is representing the top three columns on the first row. So now I want to do my second row so I'll put quotes here. and I'm going to say item two
Lewis Benson: quotes items three and item three and then I need to do the last row. And the last row is the footer. So if we look in here. I can click on one we can see the footer is item four? So I'm going to plug all those in and this will make a little bit more sense. Once I have this built and we can see everything laid out item four
Lewis Benson: I'm putting these in their individual quotes. They need to be.
00:40:00
Lewis Benson: apologize for that
Lewis Benson: item four and item four So if we look at the drawing again. We can see the headers and three pieces. We have the section in one piece and we have the article in two pieces and we had to order and three pieces and that I just kind of Drew that again with text and that's how this Template area's works. You basically draw out what you want using plain text. Just putting a string on each line. And when I say string I'm referring to text within quotes. That's what we call strings in the programming world. so each of these is
Lewis Benson: a row and each row has three items in it. And This is our side column. And these two are my main content which was the article and then the bottom one is the footer. So hopefully that makes sense. why I wanted this in its own selector and why it's on Multi lines like that. If you were to do this in one line it would work but it'd be so hard to read it wouldn't be worth using at that point. Okay, so the next thing we need to do. Is actually select each of those and tell it where these are going to go. And what I can do now is say item one. We're going to select item one and we're going to say the grid area for item one.
Lewis Benson: Is my item one and this item one is referring to this item one up here. So hopefully that makes sense where I'm getting this from this isn't the class notice. I don't have the period and it's just plain text. So item one is item one. And now I'm going to do item two.
Lewis Benson: And this is a little bit of kind of like boilerplate code. You'll have to do this every time you create a grid area. But once you have it, it's very powerful.
Lewis Benson: And I'm just gonna do the copy and paste thing and change the numbers.
Lewis Benson: That doesn't make any sense.
Lewis Benson: three and four Okay, so we cleared our grid areas. We have our colors put in the colors again. This is just for the demo. This isn't something that you would normally do when you're laying something out. It's just so we can see the content on the page. We have our size is set up. So let's take a look at it and see what it looks like now. walk to go to that page
Lewis Benson: grid.html and we're not seeing anything just because we don't have any content. This is the same issue we had yesterday. Let me go ahead and add some text in there.
Lewis Benson: And there we go. So our headers at the top are contents in the middle are sidebars on the left and our Footers on the bottom. if I wanted to actually give a height we can get this to stretch out a little more. So let me do that.
Lewis Benson: I'll go to my grid container and I'm going to say height will be 100 view height. And there it is. Let's close the dev tools. So this would basically be what the page would look like whenever you have it laid out. Does anyone have any questions about how this layout works?
Lewis Benson: Something we can do also is change the dimensions of our content here. So if our item one is looking. A little large we could say height. 100 pixels and that brings that down a little bit but keep in mind the grid template is taking up that space so we would have to adjust that as well.
Lewis Benson: There are easier ways to do that. And that's one of the reasons why I usually just use flexbox for manipulating that type of thing. What we could do if we wanted to bring that one up is actually take this and create another row like that and that'll stretch it in that direction. So everyone see how I did that just by making a duplicate row
Lewis Benson: So now we have four rows instead of three and I can do that again if we want to stretch it down.
Lewis Benson: So there's our side navigation. And remember that the one FR is making this take up two thirds. This is where the split is on that. Yes, Ryan.
00:45:00
Ryan Arnold: I'm having trouble getting mine to display like that. Could I see your grind that HTML real quick?
Lewis Benson: So here's the grid HTML I added this content and just so that it wouldn't collapse. Because it has to have something in the element or the element won't display.
Lewis Benson: Yeah, so I don't.
Lewis Benson: I think this is probably one of the more powerful layout methods, but you can see there is a lot of boilerplate code here to make this work. But where this is really handy is whenever your screen size is changing all the time. We can see that it's flexing and growing with the screen size. And then you can also rearrange your template columns with media queries which again we'll get into how media queries work in the second hour. But it's nice because you could just redefine this entire grid isomar.
Umar Z: Yes Lewis, can you please explain that when you define this one dot item two these classes you defined? What's the purpose of this?
Lewis Benson: That's how I'm selecting them from my HTML. I'm going to rename these real quick. so that this is a little more clear. So I' This one will be class. I'll call it sidebar.
Lewis Benson: We'll call this one just content or work. And then we'll call this one footer. Because that wasn't really clear and I apologize for that. So I'll make this a little bit more clear by using names that make sense rather than just two item three. and then I have this extra item on here here that Okay, so we have header sidebar content. I'm going to keep referencing this because I'll never remember The obvious names so this item I already forgot. Item two is sidebar.
Lewis Benson: Item three would be content.
Lewis Benson: And item four would be footer.
Lewis Benson: And that I can do the same thing here. I can say my book. That wouldn't be photo. I'd be header header
Lewis Benson: so my header class is selected and I'm telling that HTML element that is a grid area called header. So now this is going to reference my template and look for the header and it's going to apply it to that position on the page. And then this is actually going to be called sidebar.
Lewis Benson: So let's change that up top as well. And I apologize for not doing this initially. I should have known that this would be kind of ambiguous and hard to understand with out names like that content.
Lewis Benson: Yeah, no problem at all. again I should have done this from the start that's on me. This Twitter. order and footer One thing here I'll notice these lines aren't perfectly lined up. So you just kind of use your imagination. I'll put some spaces in here just to show you we're drawing this out in text. I think this space won't hurt anything. It does hurt. cuz I changed these two. So I gotta change these down here.
Lewis Benson: sidebar content
Lewis Benson: and Fire Yeah, so that's perfectly fine with the space is if you wanted to put spaces in so that your text is lined up and this gives you a bit of a visual of what it's going to look like on your page. And again, you can go I can duplicate these a bunch of times. And this is just laying out my patient. I have a really thin footer and a lot of content in the middle. So if I wanted the thicker footer I could add extra Footers. We have semicolons. That's why it's doing that. And now I have a really thick footer and it's also dividing up the space evenly so it did take away some of this. So maybe I want to have some more of that and you can get your pixels almost perfect just by adding more and more and more pieces of template. And just keep on adjusting and it'll fix the ratios itself. But that gets to be a little bit much. Normally you don't see more than three or four rows at a time.
Lewis Benson: But yeah this is how grid works and now if I wanted to I could put another grid inside of my content. I could put say images in here and a grid layout like I say, there'd be three images here and I could use rid inside of this grid container. I could Nest them just like I do with flexbox. I don't normally do that unless I have a situation like that where I have images laid out in an actual grid. this content here? If I had a list of links, I wouldn't use grid even though I could make a template and I'll just do that real quick to show you what that would look like. we'll say nav
00:50:00
Lewis Benson: if I don't have a nav clap, but I'll make one here in a second and I could say grid template areas.
Lewis Benson: Always completes the numb. and then what I could do here is links and it's just one column, but I could do this in a bunch of rows. And then all of my links will be stacked on top of each other this way. And I could place that inside of that container. So if I wanted to give this a class. of What's actually already called sidebar so I'll just use that name still?
Lewis Benson: and then inside of the I want to select this. Content which would be like a UL.
Lewis Benson: and then this would have Li times 3 we'll just give it three lengths. format that hello.
Lewis Benson: world links something like that. So I'm going to select this UL now.
Lewis Benson: And the UL is going to be. my grid area
Lewis Benson: And we want to put in links.
Lewis Benson: And there they have it it's laid out as a grid item. But I actually didn't even nearly need to make this a grid because you L's are already vertical. But if you want to Leverage The Grid properties like being able to move things around inside of your container. You could use grid for that. I would personally just use flexbox for something like this. I would just set it to display Flex Direction column and then I have my same results rather than you seen all that what I had to do here to create this template area. And I had to set the grid area and then I had to go in here and create the actual class for it. Yes, Ryan.
Ryan Arnold: I'm sorry to keep asking. I'm still having trouble getting this to display properly and I'm not sure what I'm missing here.
Ryan Arnold: I See the grid container class.
Lewis Benson: So originally I had these called item for item three item two item one.
Ryan Arnold: Yeah, I still have them all called that I didn't have trouble differentiating. I'm just not sure what I'm missing from either my CSS or my HTML to get it to display properly because right now it's only showing four rows that each say content and they're all going across the top of the page.
Lewis Benson: So do you have your grid container selected set to display grid? And did you set your grid template columns to be? You have to sell it what size your columns are. Basically, how wide they are?
Ryan Arnold: Mmm, I got that.
Lewis Benson: Okay, repeat three one FR with a comma and then do you set your grid Gap?
Ryan Arnold: Good job, ten pixels padding 10 pixels height 100 VH. Okay. …
Lewis Benson: Yep, and then you have your
Ryan Arnold: Can you scroll back up real quick? Okay, that's supposed to be good container. I just had that as grid. Sorry about that.
Lewis Benson: Yeah, so this is the same class that is on my main.
Ryan Arnold: There goes that fixed everything. Thank you.
Lewis Benson: Awesome Yeah, so hopefully you can see how powerful is grid. It most developers. I know are intimidated by it just because of the amount of syntax. That they have to use on it. I got a good friend that swears by it. He doesn't use any flexbox. He just uses grid for everything. It's his coats hard to read because of that but it works you start to get a lot of this type of stuff where you're setting grit area and there's a lot more shortcuts. I'm not gonna dive into all of those today. Again, there's one of these topics that I would advise that. You may spend a week doing a YouTube tutorial just to kind of get a better understanding of this because it's not something you can learn in a day. but I do want you to know enough of it so that if you do run into it, you'll know how to kind of manipulate it a little but if you need to
00:55:00
Lewis Benson: and using what I showed you is flexbox is enough to lay out a page any way you want. So hopefully that helps with that. But again, we're only scratching the surface on what you can do with these layout techniques. We'll get into some of the styling Frameworks and they'll do a lot of the work for you as well. So you won't have to If you're not really fully grasping how all this works right now, you can use the styling Frameworks as a substitute until you have time to practice with these Kind of technical ways to do things. Where you have a little bit more control over the Styles when you start using styling Frameworks, you'll have to kind of use what they give you. They have stuff like this already set up. You just put a class on one of your HTML elements automatically will style it into a grid format for you.
Lewis Benson: But you only have so many options that way this way your options are endless. You can literally make this. However, you want it down to Pixel Perfect and when you're working with a designer, you may have to go back and study up on this again. And this is one of those Concepts too because I don't use grid all the time. I use flexbox more than anything else. I always have to go back and reference documentation. So I'm actually gonna bring up to documentation for grid just to show you what it looks like.
Lewis Benson: Here we have the auto flow property which is kind of like a shortcut to get it to build out your templates. And there's so many ways. This is what I typically do for my grid template columns is used this repeat. And you can click on each of these two to see these different layouts.
Lewis Benson: But what I wanted to show you in the documentation is these two right here? We have the grid template areas and the grid template columns. These are the two that you'll mainly see being used. But that doesn't mean you can't leverage the other ones as well. And I would advise that when you have time that you read up on grid template columns. This is what we were. Working on here. This is not using the repeat. They just did it manually. They typed in each FR. I'll show you what that looks like. So what you could do instead of saying repeat you could say one F. I think it's comma 1fr 1fr it's the same thing. If I go to my page and look at that. It's the same other than I lost my gap for some reason. I miss it. I'm missing the
Lewis Benson: there we go. So that's the same thing as doing the repeat three one FR, but you can manually Define it this way so I could say this could be two FR and you can see that moves over this content here. I could say 0.5 FR and that brings it over if I don't want to use as much space. So that's where you're defining your column width. Typically. I just keep them the same but they're right here is a good example of a use case for where maybe you don't want to have all three the same. So your grid template columns, you can lay them out like that.
Lewis Benson: And then the late Rose or grid template areas. This is where you actually draw out the design so you might want to bookmark these. Two if you're planning on practicing with grid bookmark the grid template area and the grid template columns because these are the two important ones to make all this work.
Lewis Benson: Maybe follow on some YouTube Red documentation and practice with this because this is one of those ones where it's hard to remember all of this. Unless you actually use it.
Lewis Benson: Does anyone have any questions about any of this?
Lewis Benson: Okay, so if we don't have any questions, let's take our 10 minute break. And then when we get back, we'll practice a little bit more with some layout so we can while work on the ideas behind responsive design screen sizes media queries.
Lewis Benson: we'll talk about a little bit of the metadata thing that I mentioned the first day. I'll bring that up again about the DisplayPort and what that is. And we've talked about some of the relative units. I'll go over those again just to make sure that we're got a good grasp on EMS Rems vws and VHS. All right, so, let me get the timer started.
01:00:00
Lewis Benson: And I'll see you in 10 minutes.
01:10:00
Lewis Benson: Okay, welcome back everybody. I hope you had a good break.
Lewis Benson: So now we're going to get into the foundations of responsive design. I've mentioned this a few times. And I've showed the dev tools. on how to find your breakpoints this right here is really important for responsive design. We need to know what things look like on different screen size. So when you hear responsive, it's not about things being interactive or anything like that. It's referring to the ability to see and use your applications on any device. So it is responding to different screen sizes. So here we see that it has this And our page looks okay on small. We go to mobile large tablet laptop
Lewis Benson: that we have expand this out this way we can get up to desktop and if I decrease this percentage here, we can actually get into some other sizes here. They have this 4K. This is your Ultra wide monitors and you see that kind of looks a little weird on an ultra wide we can bring that down so that it's around 1440
Lewis Benson: that's not terrible to look at I guess but this would be pretty stretched out and it would be hard to read a lot of this information. So responsive design allows you to change the layout of your page or change the way things look maybe change your font sizes all based on whatever screen size you're on using breakpoints and the way we accomplish this is there's actually multiple ways but one of the ways is using media queries. We also seen that we could use that Flex wrap to change the layout of the page based on screen size that way. That is another way to make things responsive. Let's get into the media queries. These are pretty cool. With these do is they actually change your default Styles based on your screen size. So I'm actually going to create a black Square in the middle of my content here so we can. Watch this.
Lewis Benson: Let's go to my grid. The content is here. So I'll put a div.
Lewis Benson: And let's put some content within this div. I'm gonna give this a class of box.
Lewis Benson: Because it's just going to be a box on the screen. And I'm going to style this box. Let me get underneath of all this grid stuff. We're going to go down pretty far just so this is all off screen. There we go. the Box and we're gonna give us some padding so that it has some size. 20 pixels we'll do a text align Center.
Lewis Benson: and border will do three pixels solid black.
Lewis Benson: And let's see what we got on the page now. So here is this content and I want to change the screen size or so. I'm going to change the background color of this box based on the screen size.
Lewis Benson: So to do that I'm gonna have to create a media query. So the structure these out you're going to use the at sign. And we have this little template here for the m at Auto abbreviation. If I click on this it's going to give you some extra stuff that I'm not going to use. It says I never used media with the screen that's referring to you could have it except a Mobile screen. There's some different settings for that. I usually just base it on the width of the device. That would be a more advanced setup. If you're going if you're using a Apple monitor that has double the resolution you could set it up to have different styles for those type of situations, but we just want to make this responsive based on width. And there's a couple ways to do this. I'm going to show you the old way first because it is the most common way you'll see.
Lewis Benson: And what you'll do is for small screens, you'll say Max width. And put a colon. And then you'll declare the pixels. So we'll say 600 pixels on a small screen and then everything inside of these curly brackets. Is going to be your new Styles. So if you don't think about all of this, I'm actually just kind of open this way up and everything's gone. But I'm actually typing inside of these curly brackets and I'll close this back off it just for this demo right here. Dot box because I don't want you to get confused by the media query syntax. I'll show that to you after I make this work. So if I wanted to a screen size or sorry my background color to be say There's color. I will go light Coral work and that actually just formatted all me.
01:15:00
Lewis Benson: And get rid of this extra curly bracket. There we go. So I have this style here and you can see it's just normal CSS styling and that's what I wanted to drive home. I can put whatever Styles I want here. I can select whatever I want. I could select my nav. I can do all of this inside of the media query and apply these Styles. So now go ahead and format this back. So we have the media query. Because this looks a little bit complex with this line here and this extra curly bracket with that nested in. But the reason I expanded this out was just to make it clear that I'm just using My normal code block and my normal properties. None of that's different. Other than I'm doing it inside of this code block for my media query. So we have media Max width 600 pixels. We want to go to light Coral. So let's take a look at this.
Lewis Benson: I'm going to use my tools here. So this is 320 pixels. This would be a small screen. And we can see on a small screen. That is the light coral color. I'm going to expand this out. And I set that to 600 pixels. So watch right here this little number that's showing you my current pixels on my width as soon as I hit 600. It goes back to that yellow color or basically no background color. So under the screen size, I have different styles being applied over that screen size. I have a different style being applied. And this is a very useful if you want to change the layout of your page. You could have conditional CSS based on your screen size. Does anyone have any questions about how that worked about any of the syntax? Anything at all anything not clear?
Lewis Benson: And I know this one isn't all that useful yet. I'm just changing a background color that doesn't really make a lot of sense for responsive design. Hopefully you can see the potential though. We can literally change any styles. So I'm going to change my grid. So it's different inside of my media query. But first, let me show you the other screen sizes. Let me label this one here.
Lewis Benson: We'll put a star here so that this is small screens and next we're going to do.
Lewis Benson: a medium screens
Lewis Benson: so looking at the syntax above it's the same principle at media. and I'm going to say
Lewis Benson: men with this time
Lewis Benson: and I'm going to show you a different way to do this. That's a little bit easier to understand. But again, I have to show you this way because this is the most common way done. The new way is very new and a lot of developers don't even know what exist yet.
Lewis Benson: And this will have a Max width here. So if we're doing 600, we also want to do 900. So for between 601 pixels another one pixel higher here for the men. and we are 601 to 900 is what that means and then we put our code Block in so this is our medium screens. And we'll do the same thing here. We'll just change this to a different background color. We'll do a light blue.
Lewis Benson: let's watch that work. We can already see it's the light blue because I'm under 900 and I'm over 600. So if I get above 900 it switches back to Yellow I get under 900 it goes to light blue. And now we're a pink because we're under 600 and it will remain pink until it's too small. And so we can see now anything above 900 It's the default styles. That are set here. And all I'm doing is I'm overriding any styles that are in here so I could also change things like padding like I say. If we're on a small screen, I need 60 pixels of padding for small screens. And it's going to override this 20 pixels and apply 60 pixels on a small screen. So let's watch that happen. We'll get under 600 and we changed our padding. So that's a little bit easier to read on a smaller screen.
01:20:00
Lewis Benson: Okay, so I'm going to do large screens now. I'll show you the Syntax for that and it's very similar to the other ones. I will say at media.
Lewis Benson: And then we'll put in. For the large screen. It's just Min idth. And the reason it's just Min width is because anything passed 900 pixels. Is going to be considered a large screen. So it's no longer going to use default settings. It's going to use very specified settings for that screen size.
Lewis Benson: So if it has a Min width of 900 pixels. 901 pixels. We're going to do a different background color.
Lewis Benson: And I'm going to go Blue Violet for this one. And we shouldn't see anything unexpected. We are and then doesn't matter why screen size now if it's really large we're getting that violet. So again, this demo isn't all that useful yet. I'm just showing you the basic syntax on how these work. And now that I have this I'm gonna convert these to the new syntax. So we have this Max width men with this is so confusing to me. I wouldn't be able to do this without my notes. So Every time I'm using these properties I have to sit here and think Min width 601. That means that I'm going to it takes me so long to comprehend what it is because it's backwards in my mind. men width is the large screen and Max width is a small screen. I feel like it should have been Min width the small, but it's one of those things.
Lewis Benson: That's why I prefer the new syntax. because we can use the less than sign so we can say if width is less equal to 600 pixels do this. That's so much clearer what that's actually doing to me. And then we can do the same thing here. if the width is greater than 600 pixels and the width is less equal to 900 pixels then we're going to do this.
Lewis Benson: And then the last one. If the width is greater than 901 pixels do this. So hopefully that's a little bit more clear on what these are doing. again I have to show you both ways because the old way is still the most common. But in my mind when I see if the width is greater than 901 pixels do this. I understand that a lot more than if my width is 901 pixels do this. I can never comprehend that for some reason. So maybe it makes more sense for you to use the old one. If so, go ahead and use it. This is just easier for me to read so this is the way I'm going to do any media queries in my demonstrations.
Lewis Benson: So what I want to do now is actually make this useful, so I'm going to remove the Box. We're no longer going to use the Box. But I am going to keep these here. These are kind of like boilerplate code if you will and you can create more of these If you want to copy these down. Put the comment in here. Maybe take a screenshot of this. And have this in your notes somewhere for future use. And then you could just copy and paste this put them in a file and then copy and paste them into every CSS file you make one thing about media queries too. They should always be at the bottom of your CSS file.
Lewis Benson: That way they're overriding all of the Styles above so just paste these in and put them down below and forget about them until you're ready to use them basically, so this could be some template code for you. I wish there were some sort of Emmet shortcut with the explanation point but there isn't unfortunately. Maybe your projects don't require media queries, but I use them quite a bit so it could be that. You could leverage other ways to lay things out using say Grid or Flex wrap things like that, but it's still good to have these ready to use if you need them. Test so let me show you how we can change our grid. I want to get rid of the leave the sidebar it's fine. I'm going to actually take this selector here. And I'm just going to copy it. And I'm going to paste it into. My small one here.
Lewis Benson: So on small screens, I can now change the entire grid layout. I can say if I want a small screen. Then I want my sidebar.
01:25:00
Lewis Benson: I need my template columns as well. And I'm going to put those above here, so I'll make some space. I'll put those right there. I don't have a selector.
Lewis Benson: I'll put them inside of the same selector.
Lewis Benson: There that'll work. So I can now manipulate this so I want my sidebar to take up more space on a small screen so that it's easier to see so I'm going to switch this back to one FR on a small screen. And maybe I want to take up more space in the middle on a large screen. So we'll do something like this. We can also. our content. Is a little bit too short on a larger screen so we'll give it a little bit more of that.
Lewis Benson: So you can see that it's actually changing the size of my grid not very much. It's subtle. But it is changing it but it doesn't look very good. This side bar just isn't working for me. So what I want to do instead If I'm actually gonna delete a couple of these and I'm gonna create a new row and I'm gonna put my sidebar here. We'll do something a little bit more dramatic, but it might make our layout look a little better.
Lewis Benson: And then this was going to be content So instead of having our links. On a sidebar will actually have a navbar.
Lewis Benson: And hopefully this makes sense what I'm doing right now. We're basically overriding the default grid styles that we had. and I'm going to change this back to a one and we'll see what this looks like now.
Lewis Benson: I don't see a response. What went wrong?
Lewis Benson: That could be I could have broke it all and that was exactly what it was. Thank you for pointing that out so we can see now we have this now area here and it's a little tall. So what we can do is we can expand our content to take up more space.
Lewis Benson: And that'll shrink that down a little bit and we could also just set the width on that or I could even make my header twice as tall. And we can start playing with these ratios a little bit to make this. Work the way we want it to work. Sometimes you got to get a little bit more dramatic with it. But I think that looks pretty decent as far as what a navbar might look like. Maybe take one of these headers off.
Lewis Benson: But here we're using a media query to change our grid layout. So when we're on a medium screen or a large screen we have our sidebar, but when we get on to a Mobile screen, we have a nav bar instead. So that's at the top and you'd be able to scroll down through this without trying to read these tiny little links on the side. does everyone see how this could be useful using these media queries.
Lewis Benson: Does anyone have any questions about how they work?
Lewis Benson: So another thing I noticed is my links here are now vertical and a navbar. We should probably make a flexbox instead of a grid so if I look at where's my grid or my nav at Now what about the UL spine? We'll select the UL.
Lewis Benson: And this actually might fix this content issue too because it's probably taking up too much space. So this is the part where it can get a little tricky Media queries because we have this extra curly brace here. It's easy to just start typing underneath of here. And then hard code those Styles in and that happens on every screen size. So you need to be careful and this is where I like to click on the curly bracket and highlights it and it highlights the closing curly bracket as well. So if I click on this one it highlights both curly brackets so we can see where the code block ends and starts we use the term scope here because that makes more sense to me the scope of this media As everything that's contained within it. So if I put some space after this closing curly bracket, I could put another selector here and I'm going to select my nav which is called sidebar.
Lewis Benson: sorry, I'm going to actually select my UL because it's the parent container of the links. And within my UL I'm going to say Flex I'll give it a of 10 pixels and now we look at that in our links. Let me zoom in on that.
01:30:00
Lewis Benson: Our links are now horizontal we can do it this little bullets there. Does anyone remember how to get rid of the bullets?
Lewis Benson: Didn't remember that property.
Lewis Benson: So when we can't remember our property what we can do is just hit up mdn. I'll type in UL. And we'll scroll down to the warnings. And here it is list style type. So if you ever forget just always hit the documentation or do a quick Google search and that's the other way too how to remove bullets. Yes. And we got this top result here by default browsers add bullets on unordered list to remove the bullets. From Ali with CSS add list style type none to your code.
Lewis Benson: This code targets the CSS selector UL so that's what we currently have. So I'm just going to copy this piece right here. And paste it right there. And we'll look at the document and now we're our links even though they're not actually links their paragraphs. They're just symbolizing links right now are right there. so since this is now a flexbox. How could I put these down to the center? what Flex property? Can I use to bring these down a little bit?
Lewis Benson: So remember this is the main axis going left to right. And the property for left and right is a certain keyword. I'm looking for and the property for your cross axis is a different one. Does anyone remember?
Iris Coats: that direction
Lewis Benson: Flex direction would change this from a column.
Iris Coats: 
Lewis Benson: Or sorry from a row to a column…
Iris Coats: to
Lewis Benson: which would change our axis. All I want to do is move the content.
Lewis Benson: So the choices are either justify content or align items which one would move these down if I need to move these down?
Lewis Benson: With this being in a row right now. And it's okay if you don't remember. Whenever it is a line items. Yes. So a line items is always moving your cross axis. And remember when you're in a row, you're cross-axis. Is going to be vertical. So a line items will move these down. So I'm going to set. a line items Center and keep in mind this set of properties only applies to small screens and I didn't get results here align items Center. I might not have enough space. Let's take a look.
Lewis Benson: So here's the UL and again, yeah, that's what it was. I need to set the height of my UL to a hundred percent in order for that to work. Currently. I don't have enough space to move anything up and down if we look at the height of the UL. It's taking up just the height of the content. So that's why I didn't work. But we can fix that by saying height.
Lewis Benson: 100% And when I say a hundred percent that's not referring to my screen size that's referring to my parent container. So it's going to take up a hundred percent of the parent container. And now As the little unexpected that they move down that far. I think yeah, it's spilling out of the container. So it looks like we might have some extra padding or something. We have some margin there. If I were to remove that from here and here we should have better results. And there This would have been solved if I had been using a reset. That would have removed all of my padding and margin by default. And I'd also fixed the height of my navbar. It looks a lot better now. So here was what was that? I'm sorry.
Umar Z: I'm so sorry. Can you please redo the thing? How do you remove the margin and fixed thing from the Box model?
Lewis Benson: I didn't actually remove it from the code. I just double clicked let me reselect this I select my UL because I can see that it has margin on it when I look on the left is a little bit of yellow. I don't know if you can see that. But when I can see that it has margin if I scroll down to my box model and I look at I can see the margin here. So if I double click on 16 and I want to see what it looks like without margin. I just Delete it, press enter and it's giving me a live sample of what that would look like without that margin.
01:35:00
Lewis Benson: Yeah, and I could also set it to zero and it will do the same thing. It just deletes it. if I go and if I refresh my page, they'll come right back. So this could be a good way to just kind of play around quickly without having to change the code and then switch between your screens. You can modify all of your changes here first. And then once you have it the way you'd like you can copy the styles. Which are up here? And if I right click on this I can go to. copy Styles and that'll copy everything you see here. And then you can paste that into your CSS and it'll give you a bunch of extra stuff. You'll have to delete. But everything you added will be applied. So it may It might not in this case. It'll be easier if I just say. margin zero and then that fixed it.
Lewis Benson: We do have 40 pixels of padding. That's because we're using a list. I'm okay with that. Something I could do here as well because these are Flex items I could justify content to move them left. And right one thing to keep in mind with flexbox is when you justify content, it negates the Gap property Gap is content is also moving things across the main axis justify content always kills Gap. So if I say justify content, and I say Center
Lewis Benson: I was wrong it didn't fully negate it there are times where it does and I guess this isn't one of them. So I apologize I misspoke there. let's try flex and this would move it all the way to the right. So it doesn't fully negate it like I thought.
Lewis Benson: I'm not sure why I thought I was certain it did too. I think it's because normally when I'm using this I have this in a small container and there's not enough space to use one or the other. So it gave me that little bit of misconception that it was just being negated at that time because normally I'll have something else on this side as well. And I'll actually do that real quick. Just to show you again how that works. because this is the flex container this L I'll put it inside here. I'll have an Li. And this would be my logo. And then I would wrap. all of these allies in this div
Lewis Benson: So now my UL has two children if I Collapse that down we can see two child. because this is set to display Flex. This is where my links are now vertical because they're no longer in a flex container and my Logos there. So what I'm going to do now is set justify content space between and that's going to push my logo away from my links.
Lewis Benson: So we have Justified content flex and so let's change that to space between
Lewis Benson: And my Logos all the way to the left and my links are all the way to the right and now we just need to get these horizontal again. Can someone tell me how to get these links to be horizontal again?
Umar Z: better more alignment
Lewis Benson: All I need to do is set display. To flex like that and now they're horizontal again. I'll do that in my code. But to keep in mind they're all touching each other. So think about what I might need to do to space those out.
Lewis Benson: So what I'm going to do is here, I'll say L with a direct. Child of div should remember this from yesterday. And I'm going to say Flex how do I make these spaced apart? I'll do a quick refresh to show you. If they're all touching each other what Flex property I use to push these apart.
Ryan Arnold: a justice of content space between if you're doing Flex.
Lewis Benson: We can see what that looks like. The one I was thinking about was Gap is a flex property. But we don't have enough space for space between but we can give it enough space. That is an option. Sometimes this is the best option too. So currently we're at a hundred and eleven pixels on the width. You see where I'm getting that number from. 111 pixels it's the little tool tip right above the word. It says div 111.59 by 18. So what I'm going to do is a little bit of math. if I wanted 20 pixels of space using space between what would my width of my div need to one 11 plus 20 would be 131.
01:40:00
Lewis Benson: Plus 20 would be 151. So I'm going to give my div a width of a hundred and fifty. I'm supported round it down.
Lewis Benson: And we'll take a look at that and there we have our 20 pixels of space in between them. And I believe we can see that.
Lewis Benson: I'm not sure. I can't see the empty space and it won't show me down here either. But if we know the width of each of these we could add it up and figure it out. I'm not going to go through all that right now. But yeah, so this is 150 and then you do 35 Plus 39 plus 36 and then subtract the difference divided by 2 to see what our space is. We can adjust our width. And this is where I want to show you that Gap is a really cool property so we can get that looking to where we want it. So that would probably be 15 pixels-ish of Gap, so I'm going to take the width off. I'm going to take the justify content off and I'm just going to say Gap 15 pixels. And there's our results.
Lewis Benson: It's very similar to what this so there's more than one way to do things. I'm not going to say one way is better than the other there is benefits using a hard coded width and space between and there's benefits to using Gap. It'll come down to whatever problems you run into for example. With this right here. You see how it kind of breaks when we're on 150 screen size. So we might have to do some stuff with that. Typically with navbars you'll see a lot of developers do it Mozilla did. And when you get so small it creates this hamburger menu and put your menu inside of there. So as I'm shrinking you can see the theme is about the touch the AI help. And it goes into the hamburger menu. We open that up and there's all the same menus. And actually get into how to build one of these next week.
Lewis Benson: We don't even have to know JavaScript to do this. There's a framework we're going to learn called bootstrap and it has JavaScript functionality built into it without us even knowing what's happening under the scenes. All we need to know is that when we tell it to create a hamburger menu and we click the button that works. We don't actually have to know how it works yet. We will learn how to build these from scratch eventually. So that is something I look forward to. But using bootstrap, you could do it with a few lines of code and create something like this. And then maybe even using a framework like that for this.
Lewis Benson: Maybe not. I don't recognize the class names. and if I look at their Scripts
Lewis Benson: Yes, nothing I recognize so they could be using a framework. I don't know what it is if they are. So does anyone have any questions about what I did here how these media queries work? Does anyone need to see any more demo on the media queries themselves?
Lewis Benson: Okay, so I'm going to move in to a quick recap of the metadata that I talked about day one week one. I know that was forever ago. So it's this piece right here in particular we have this meta called name viewport content with equals device with initial scale 1. I just want to show you something here if I comment this When we take a look at our page. It looks kind of broken. It's doing some weird stuff. Let me close my Dev tools here.
Lewis Benson: So let's get it back to 100% notice. My media queries aren't working. They're not doing anything. so without this piece of metadata media queries cannot function So this is actually more important than you might think. And if I change the scale of this too that also changes things. The media query still works at the same pixels. Let's change that to a four.
01:45:00
Lewis Benson: We go 40. And then we'll go back to one so we can see the difference is here. I don't actually see it changing now. But it does change the initial scale. It's just basically how large things are. Not sure why That's not behaving.
Lewis Benson: 
Lewis Benson: It must be something in my browser settings. It's preventing it from actually scaling but just keep in mind this piece of metadata here. You have to have this metadata for your media queries to work. I I was working on a project with a group of people and one of the developers didn't like all of this extra noise in here. So he just deleted all the metadata. And I spent two days trying to figure out why my media queries wouldn't work. I thought it was my logic here and it turned out that it was just missing that so I just wanted to make that really clear that don't delete your metadata. It is useful your browser needs it and it's what makes media queries function at least this one here. And then the last thing I want to cover before we take our break and go over the assignment. is the relative units so
Lewis Benson: we went over these I think yesterday or there's nose two days ago. We talked about view height. We talked about pixels. I think one Omar brought up points versus pixels. I just want a quick review on that. Can someone tell me what the REM is for? How it works. Just in your own words.
Ryan Arnold: It's the measurement the width of the letter M. Depending on how you have your font size set.
Lewis Benson: Yes, so it'd be the height of the letter M. That's where the word originates from but more specifically it's referring to. The root font size. So again, I mentioned this before I like to set mine to 10 just for the simple math and I can't spell size for some reason or So I'll set my default font size to 10 pixels. and then everywhere that I have pixels now, I'm going to convert this into Rems so grid Gap is going to be how many Rems
Lewis Benson: In the shout it out if you know it. Yep one I'll be the same with her padding.
Lewis Benson: What about my site? What would I put for that?
Iris Coats: can
Lewis Benson: this isn't pixels. This is view height. Yeah, so I couldn't use Rems in this case. I mean I could but it's not going to work the same. So let's put this as we'll do a hundred REM just to show you what happens. Now I have a scroll bar. I'm able to scroll up and down that might not be too bad. But what happens on mobile devices? so if I set this to mobile devices A mobile device isn't 1400 pixels tall. So I'm going to actually bring A pick a mobile device is probably around 600 to 700. I think I can just select an iPhone. Here we go. So we're at 375 by 6. 67 and I got this really long scroll bar here. I'm going to switch this back to view height.
Lewis Benson: And we still have a little bit of a scroll bar. But it definitely reduced it quite a bit. Let me set this to 90 and I believe that's because we have some margin and padding. Now we have no scroll bar. And if I close this we still have no scroll bar. And if I put this on a really really large screen, which I can actually do using my tool here I'll set this to 50% and I'll bring this way now notice. It's stretching with the height. So that's what view height does it stretches your height to match your viewing area.
Lewis Benson: So then Here's something I see people do sometimes. And I wouldn't recommend it but it does happen. our logo here so I have those LR so I'm going to set the font size on those. We're going to put it right here. Make sure I'm not inside of a media query mess up font size to I'll say 10. I gotta put font size first to do this. I'll say w. So I'm going to remember what VW is.
01:50:00
Lewis Benson: View it and this is a trick. I see that's way too big. Let's set this to one VW. Okay, so that's somewhat manageable it doesn't look terrible. And as I shrink my screen notice the font size of shrinking with it as I grow my screen. It's growing with it. so that's a little weird and I see people do this sometimes because they want to shrink their content to fit the device.
Lewis Benson: That's definitely not best practice because you get on such a small device your content just it kind of is gone. I can't read that at all. You'll see that with images a lot, too. So let me get a placeholder image if you remember this from yesterday. We have placeholder image. I just search for that and it says placehold.co. And we're gonna grab the 0 by 400 placeholder image. And I'm going to Plate this in my content of my grid. There's my box. I'll put it right here. I am G. And for my source, I'll place that URL for my ALT. I'm going to say a placeholder. and remember don't put the word image here and your placeholder, alt text or sorry and your alt text because it'll say A picture of a placeholder image it's just a little redundant and also don't say picture of it to beginning of it.
Lewis Benson: Because then your screen real estate picture of placeholder and just one of those things you just want to be kind of vague about it, but be descriptive if that makes sense. Okay, so there's our image. We're set to 600 by 400. And let's take a look at that. And it doesn't shrink or grow with the page. So what I see developers do is they'll use view width for something like that. So, let me set this to IMG. and we'll set this to width so that it scales. and we'll say we wanted to take up. five percent of the screen so five, uw's That's kind of small. Let's do 15.
Lewis Benson: I'll do 35. Here we go. So it shrinks the image with the page now you could do this for a little bit and then maybe in your media query bring it back up so we could say Here, it's 35 but on a small screen. We don't want to be 35. We want it to be 65. And then we get a large image again. So there is the difference between And responsive as I mentioned before watch Hot snaps. You can see that snap right there if it changing screen sizes. This isn't a terrible use case for a VW, but I don't recommend doing it this way still. because it could break on devices unexpectedly. So instead what I would do is just use width. and set this to pixels so you could say
Lewis Benson: On small screens you want it to be 500 pixels? and on larger screens maybe 200 pixels something like that.
Lewis Benson: And then once you get small it goes it'll take up more space. And I might not be the best example just because it's really small right there, but it depends on your uses and how you want your page to look but I do recommend putting in the pixels hard. Let me actually go really big with it here. We'll say we'll go 900 but that's too big 800. Whoops. I scrolled all the way down.
Lewis Benson: There we go. So 800 we shrink it down now right there. It's kind of breaking. This is where you could start to add in more media queries if you needed to so you can say when I hit I'll say. 1085 pixels If we are less than 1085 pixels, then we're going to change the size of that image. I'm going to do that real quick. I just to show you what that looks like.
Lewis Benson: So I'll just scroll down to here. And I'll just put a new one at media width if it is less than oops, it's less than 10 85 PX.
Lewis Benson: Then what we're going to do is say image.
Lewis Benson: and we're going to reduce that width. We're currently at 800. So let's say 700 pixels.
01:55:00
Lewis Benson: And there went. And then it starts to break again so we could say if we're under 900 pixels. Which we already have a media query for that right here. We can say image. We'll go 500 pixels.
Lewis Benson: And that's not quite enough. I'm actually going to increase it here. We'll say 950. and there went And then as we get smaller, I can add another media query and we can keep dropping that down. So that on all devices no matter what type of device you're on. It's going to look good. And that can be really tedious to do I know but it is a really good practice to make sure all of your devices can see all of the content. So does anyone have any questions about how I was doing that? Why I chose those pixel sizes or anything like that. I was looking at this number up here as I'm stretching and growing the page. So right there it starts to look bad again so I could change with another media query.
Lewis Benson: And then that would and this one here has a range of media queries, but I could keep doing this where I say less than so. I could copy this one. I'd have to put it under this one Because we got to be under the 950. And we'll say 65 or 655. Change it to 500 or we're already at 500 change it to 400.
Lewis Benson: and I might have to change those again to 680 685 there we go.
Lewis Benson: And then once we hit 400 pixels, I'd have to add another one. So that's kind of the workflow of working with media queries. You just kind of watch your content and you adjust your page layout based on whatever pixel size you have using media queries again, I know this looks complex, but if you need to simplify it you can always just put a lot of space in here. And then just remember it's normal selectors Within These widths. So any questions at all?
Lewis Benson: Anything you want me to recap any code you want me to show?
Lewis Benson: Okay, so there's one more thing. I've been mentioning that you should be using the tutoring if you're falling behind and stuff like that. And I noticed some of the students have some questions about how to do that. So I just want to show you where you can find these links. So I'm going to bring up my Slack. So this is the October 2 cohort Channel. This is our class slack Channel. This is also where I've been posting the videos each day. so if we scroll up in here I posted these two links here for tutoring. These are the Tas that are available if you need to get tutored, all you have to do is click on a link.
Lewis Benson: And once it loads you can click on this piece right here where it says 30 minute meeting or it could be a one hour meeting. I think Reece has one hour and 30 minute and then you just select the calendar day that you wanted to do the tutoring and then you select the time that you want to do it for and I believe this is set to local time. So that's all you have to do. Once you set an appointment. Let's say one o'clock you hit next and you confirm it you're scheduled for that time. And then you can talk to whichever Ta on slack to see how you're going to handle the meetings. It'll probably be through Google meet or maybe a slack cuddle. If you prefer that the s huddle. You can select a person in Slack. And this is for recording here. It is up here on mine. Sometimes it's on the bottom left. Sometimes it's up here, but there's a start huddle and then you can all join the huddle.
Lewis Benson: You can do group chatting that way and it works just like Google meet. So whichever way works for you. Make sure you're using that tool and reaching out to the Tas and doing the tutoring sessions. Does anyone have any questions about any of that?
Lewis Benson: So let's go over today's assignment.
Lewis Benson: Also, my request somebody asked me to unlock all of the assignments. So starting Sunday. I'm gonna unlock the entire week's assignment. So you might see a whole bunch of these up at once. I'd ask that you don't submit them early that you just submit them each day. This way though. You can look ahead a little bit and maybe do a little bit of self study before we get started on it if that'll help you at all. So I'll be starting Sunday. I'll start unlocking the entire week for all of the assignments. So let's take a look at today's. day four and it looks like day five is actually going to unlock and an hour. So we'll have access to that one to look ahead on.
02:00:00
Lewis Benson: So let me go to the instructions.
Lewis Benson: Okay, so day four, we're back to the normal layout where we have an a file named Styles dot CSS. And we're going to set up the index with HTML elements.
Lewis Benson: And you're going to manipulate them using flexbox and grid properties the content of these elements can be whatever you want as long as they're appropriate. So you can use placeholder images and you can maneuver them around if you want to have a grid of placeholder images, you can kind of duplicate this layout if I ask that you don't just copy exactly what I wrote line by line that you reference it if you need to reference to video or if you need me to send you some code don't copy and paste my code type it out yourself reference it but don't do it exact if that makes sense. it'll help you in the long run. Remember this isn't about your grades. This is about learning to code. So if you're just submitting assignments to get credit, that's not going to help you be a developer. Just one thing to keep in mind. Sorry, I went to the wrong page.
Lewis Benson: So we're gonna manipulate using flexbox and grid properties and the content can be whatever you want. this is going to just be mostly experimentation. I want you to just see how this stuff works see how you can manipulate things using justify content for your flexbox a line items with your flexbox. You can mess around with the flex basis the flex grow the flex shrink if you want. I'm not going to require that you have to include those just because they're kind of Niche and they're more advanced and you can do the same thing with other properties as as grid
Lewis Benson: a couple things you can do is create a three by three grid test out manipulating block elements with flexbox properties that's similar to what I did here. Let me close the dev tools right here with this links. I'm using a flex column inside of this overall grid container. So that's kind of what that's referring to. There is nesting flexbox properties inside of a grid container. Or come up with something on your own. Utilize some relative units such as em REM VW and VH so don't just use pixels for everything if you're putting 1200 pixel width on your page. Keep in mind. That's not going to look good on mobile. So maybe use some of these more responsive units such as VW and VH for your overall body width. Probably don't use VW for your font sizes.
Lewis Benson: you can but it's a little weird when you start getting on really small devices. And then you got your Rems and EMS and you're not required to use all of them. Just use some of them and don't use pixels for everything. And if you were taking notes refer to those as much as you want. And use the examples that we went over in class today and it's always recommended W3 schools. I'm always recommending Mozilla.
Lewis Benson: Basically the same thing that laid out slightly different so you can compare with W3 and Mozilla. Maybe W3 has a better example. I'll actually bring that up after I'm done going through the instructions to see what it looks like. So I don't think I've seen W3 schools grid. and flexbox documentation so you're just going to be mostly experimenting. Let's bring up our rubric.
Lewis Benson: The necessary files that would be your HTML index and CSS. So this one's should be fairly give me type of points right here. You create the two files and you'll get full credit. make sure you link it into if it's not linked forgetful flexbox and CSS If you want to create a nav bar using flexbox and you want to lay out something similar to what I did here with a header us maybe a sidebar or a Content just a couple things with grid using that row and grid template column and grid template areas misspoke there. you could do something like that.
02:05:00
Lewis Benson: make sure that the content populated on is a appropriate and relatively assignment. This is kind of another give me as long as you don't put anything inappropriate on there. You're not putting anything that you couldn't show to a potential employer. Then you should be good to go on content. And that's what that is mainly referring to. Does anyone have any questions?
Lewis Benson: Okay, so we skipped our last 10 minute break if you need that 10 minute break. I definitely recommend taking it. But you can go ahead and get started on the assignment. I didn't want to take too much of your time with the explanation there. And again, I'm gonna bring up that W3 schools go ahead and get started. I'm just kind of do this on the side just to see what it looks like.
Lewis Benson: They actually have a really good layout on W3. So if you need some sort of reference code. w3schools documentation has
Lewis Benson: They even have a live editor here that you can run the code in.
Lewis Benson: I have a grid container.
Lewis Benson: column Gap in row Gap
Lewis Benson: Here's our grid template areas and grid template columns check those two out.
Lewis Benson: Okay.
Lewis Benson: Let's stop the recording.
Meeting ended after 02:08:29 👋