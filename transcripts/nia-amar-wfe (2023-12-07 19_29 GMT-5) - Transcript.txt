nia-amar-wfe (2023-12-07 19:29 GMT-5) - Transcript
Attendees
Brian Kimbrow, Chantrice L, Daniel Perez, Gregory Robertson Jr, Iris Coats, Krystal Jefferson, Lewis Benson, Lewis Benson's Presentation, Ryan Arnold, Umar Z
Transcript
This editable transcript was computer generated and might contain errors. People can also change the text after it was created.
Lewis Benson: And this is day four week seven. Today we're going to be get GitHub our workflows with that and then we're gonna get into some JavaScript today as well. The get and GitHub. I'm just kind of. Breeze through that since we're using that every day in our workflows already. I'm just to give us that recap on some of the nuances with the terminal commands and that sort of thing. Let me get my screen share going
Lewis Benson: so back this into my projects folder first thing I want to do is go over some of these terminal commands again. Just the basic ones. I'm not going to get into the real in depth ones. The most common ones will be using on a day-to-day basis and through your normal workflows. So I'm going to get bash here. If you're using your terminal commands to your vs code, then you'd want to open your vs code first and open your terminal through vs code and whichever directory it is you're working in. I'm just going to choose to get bash here though.
Lewis Benson: Let me zoom in a little bit. So the first thing I want to do is just create a new folder. I'll do mkdir. This make directory and this is used for creating You can create. Multiple folders at a time with this and it's a really quick way to get your file structure set up. If you have this in your normal workflow and you use this regularly, it's actually a much quicker to use the terminal to create all your files. If you prefer using the graphical interface, that's fine as well, but it is good to be familiar with this. Especially if you get into a position where you're working remotely on a remote server.
Lewis Benson: And you don't have access to the files on your local machine an example of that would be if you're working and AWS servers, which is the Amazon web services. A lot of those files are set up remotely on a cloud. And they're published on the cloud and you'll never actually clone those down to your local machine. Everything will be done through a terminal and you'll be accessing and manipulating your file structures through the terminal so it is good to know this. If you're not using it regularly, or if you don't think you'll get into the cloud services type of work. It's not a big deal. If you kind of let this slide out of your memory, and then whenever you get into a position where you need it to just refresh yourself at that time, there's plenty of resources out there to remember this stuff. So don't worry too much if you're not very fluent at it yet. get back on track here. I use dmkdir command, but I haven't put in the name in the folder yet. So I'm going to do that now.
Lewis Benson: And I'll just call it today's date demo 12 - 7. And now I can change directory using CD and go into the folder. I just created by typing in its name. So demo 12 - 7
Lewis Benson: and now that I'm in the directory I can create files here. So I'm just going to create some files here. We'll do an index on HTML. a Styles CSS script dot Js.
Lewis Benson: that should be good for the file creation. This is our basic layout. And now I can use the ls command. To list all of the files currently in that folder. So it's LS for list. And it's showing me that I have those three files in that directory. If I want to see my current directory, I have it access right here, but if you don't see it there or you just want to confirm it you are where you think you are and you're going to use the command PWD for print working directory and it just shows us where we're currently at so I can see my C drive users my username OneDrive projects demo 12-7. So just printing out my directory and this could be useful if you start writing a scripts maybe through bash python or even node.js.
Lewis Benson: Sometimes knowing the full path name can help with the scripts. So it is a good command know. the next one I want to go over recap is your get commands. So we can create a git repository locally. Remember we've been doing this on GitHub. We've been going on there creating our repo and then cloning it down and that initializes the repo But if you were working on something locally and it's not a get repository currently, then you can get init to make that into a local repository. Keep in mind. It's not on GitHub when you do this, it's only saved locally to your machine.
00:05:00
Lewis Benson: And it just allows you to have all that Version Control such as creating branches rolling back to commits and all of the normal get behavior that you would have so you could add and commit but you can't push unless you wire this up to a GitHub cloud. So I'm going to get in it. And if I do Ls. I'm going to see my normal files here. But if I want to see the dot get folder that was just created because it's a hidden folder I can use LS for list. And then minus as the flag. And now we can see every folder and file in there notice. We also have this t and What this means is dot slash is our current directory. It just means where we're currently located dot slash is the Parent Directory.
Lewis Benson: So if I wanted to I could kind of manipulate that with other commands such as I could use t slash. And what this will do is code into my parent folder. So it actually open vs code to my projects folder. So you can use these little access points here. If I did not or dot slash that's going to open vs code in my current directory. I typically just use the dot I don't really bother with the slash because it means the same thing so I'm just gonna go ahead and open vs code there.
Lewis Benson: And that's over here just to show you that works. So we have this as a get repository, we have some files in it. And the next thing I would do is ACP. So if I wanted to add these three files to staging First I'll check to see what changes were made by get status. It'll tell us that if we have anything staged if we have anything that needs committed just gives us the status of our current Repository. And we can see these three have changes that haven't been made or haven't been committed yet, and they're not currently being staged. So it's advising us to use git add to start tracking these. So we can do that by saying get add and then And that will add the one file. I'll do it get status to see the difference now.
Lewis Benson: There we have that one file added and these two are not added if I get add and then put a dot the dot means everything in my current folder. So keep in mind if I'm nested in another folder my current working directory is within an assets folder for some reason and I get add period it'll only add the files to staging within that folder. So if I wanted to do the entire repository that I need to make sure that I'm in the root level of my project. So add period this will add my last two files. Get status to confirm. And we can see everything there was added and now I can commit these changes.
Lewis Benson: We'll do get commit m. And I'm just going to put initial commit. This is a pretty standard message for when you just create empty files and you're just kind of getting things set up. remember I can't get push. I'll show you what happens.
Lewis Benson: It says origin does not appear to be a git repository. I don't know if you remember me saying this but origin is actually a variable it stores the URL to your remote Repository. so if we don't assign anything to origin, then we don't have this wired up to a get repository and I can see that by get remote - V There's nothing returned if this was get repository, it would actually show me some results there. So the next thing I want to do then is actually wire this up to get up. So let me open up my browser.
Lewis Benson: And I'm going to create a new Repository.
Lewis Benson: And I'm going to change this to be my codex demos. You would typically keep this as your username unless you're wanting to put all of your projects within an organization. If you're not familiar with the organizations, you click on your profile picture and you should be able to see your organizations there and go in and create an organization. If you want. It's basically like a secondary profile. That's not your main profile and what it allows you to do is invite collaborators and also keep code separate from your main Repository. it prevents me from spamming all of my people that I'm linked with on GitHub with all these demo repositories. So since I create so many of them. I just want to have a organization to contain all of those notifications.
00:10:00
Lewis Benson: So this will be demo. 12 - 7 I'm doing this. This is the same name as my current working folder. This is best practice, but it's not a requirement I've seen. people use different repository names then their local folder names It'll still work the same it doesn't matter. But as far as organization goes, it's easier to find your stuff if everything's named the same.
Lewis Benson: And I'm not going to include a readme because I want to be able to wire this up. Without cloning it. create Repository
Lewis Benson: Okay, so We didn't do this ad readme thing. I can always create that manually through vs code. So I'm not too worried about that. But the one thing we definitely need to do is just get remote ad Remember origin is the variable. That contains this URL right here. So this is kind of like doing if you're in JavaScript, you would say let origin equal and then you'd pass in this With the bash terminal it has a little bit different syntax. We do get remote ad origin and then we pass in this URL. So that's what that actually means whenever you look at that. We and What this does is create a main branch and makes it your default branch.
Lewis Benson: And then this push-u origin main it allows you to push that newly created Branch up. We don't have to worry about this because when we initialized our repo locally it did all of this automatically. So typically whenever I have a local repository, I would just grab this one here. And just send it and what will happen is this code will run first it'll run successfully and then these two lines will actually fail. There's not a big deal. I usually just get an error message in my terminal. I just do it that way because I can just click this copy button and paste it right in but just to kind of show you without the error message. This is the only line of code. It's actually running here. Took us to get remote ad origin. This is the important thing. We need to make sure we're linking our local repository to our remote Repository. So I will do that right here.
Lewis Benson: And if I do a get status, we'll just make sure that everything is still up to date. Looks good. So I should be able to push words and me now.
Lewis Benson: And We successfully pushed everything to GitHub. There's the URL that it pushed to and it's pushing the main branch. Everything looks good there. Now I should be able to just refresh my repository on GitHub. And there are the results. So I'm just gonna put a little bit of content in this.
Lewis Benson: This is the wrong file. We'll go into my
Lewis Benson: so it looks like I already had a vs code open for that. There we go. And I'm just gonna put a little bit content in here. Just so we have something on the page.
Lewis Benson: We'll do an H1.
Lewis Benson: I'll put the A paragraph. I'm just going to put some lorem in here. lots of lorem
Lewis Benson: and I'll put a footer. and I'll say
Lewis Benson: Ampersand copy semicolon to get the copyright symbol 2023. I'll put my name here. And we'll have a look something like that. So we made some changes. I showed you the ACP process through the terminal and I'm just going to show you through vs code. So I'm going to click my source controller here.
Lewis Benson: And we can see the changes were made on HTML. So I can plus this plus button here. It'll add at the staging. This is the same as doing get add period or just add file name. If you click this plus button up here, see how it's lined up with changes if I had multiple files it would add every single file if I hit the plus sign next to the file. It only adds that one file. So it doesn't matter which one of these I click because they only have one file. And now that the changes are staged. I have two options here. I can either type my commit message in here. And I can actually hold shift and press enter to make this a multi-line comment or commit message. But I prefer to do though is leave this blank and just press commit to open up the commit file. So let me show that.
00:15:00
Lewis Benson: And then I can type my commit message here and I can add bullets. I can add all kinds of detail and it's just a little bit better experience in my opinion Some people prefer just to type over here. So they don't have to worry about having multiple things going on. I think it's faster. Whatever you go ahead and use if you the use the terminal if you like the interface you can use that. There's also an external Source called get crack and what you can download and use as well. Let me put my commit message in there and I'll just kind of show that briefly online what that looks like. So the commit message would be add content through HTML and then if I want to this would be like a heading. So I can put a sub paragraph. Just explain what kind of I Add content for the page
Lewis Benson: so decent commit message explains everything we did we'll know exactly what we are forever look back at this and if we needed the roller code back, that's where it would go. So I can either press this check mark to accept the commit message. I typically just close the tab, and it does the same thing. Because you got to close the tab. Anyway, just saves a step. And we close the working tree last thing is to push your changes to get up. This It doesn't always say published Branch what this means is that it doesn't necessarily have the main branch on GitHub yet. So if I click on this, it's the same as doing get push origin Main. So I can go ahead and click that.
Lewis Benson: And then I'm gonna add one more change in here. I'm going to put a use strict. And a console.log. It just says hello world.
Lewis Benson: And then wire this into my index.html.
Lewis Benson: Okay, so that's two files that I just changed. I'm going to ACP this one more time using the interface here. And I'm just going to say add JavaScript. with console.log and we're going to add all. and commit and now it says sync changes instead of publish Branch. It's the same thing. It's still a get push origin Main. And we can actually see that in my little title tooltip there. It says push one commits to origin meme. So I'm going to click that. It's going to push those changes.
Lewis Benson: Another way to do this. They push origin main is down here. There's this little sync button. This does the same thing. It'll push your changes up as So you have lots of options. This may not show up without gitlins. I think it does though.
Lewis Benson: Get lens is an extension. It shows Some details here about it. They have a pro version and all that. I never really mess with their premium stuff. But what you can look at is this nice little interface here that shows you a commit graph. If you're working with a lot of people this is actually really cool. You can actually see all the different branches and who was pushing and who did what commits and has their little profile picture there. So that's pretty useful and there's some other stuff in here as well where you can see You can see your commit messages in the history as well as What the actual code was at that time? By clicking their I can go down and look and see the old code. So a lot of cool stuff in this extension if you want to download it and check it out. Feel free to play around with it.
Lewis Benson: It's a little bit much until you get used to it. then go ahead and collapse those down and then just to show you in the extensions page. get lens
Lewis Benson: must be one word. It is.
Lewis Benson: So this is the gitlins extension and another thing that it does that I really like about it is as I'm writing code. I can see my name pop up right here. Or if another developer was working in here. I can see their name come up and it tells me when they made those changes so you might have noticed that in the past that this has been coming up on here saying five minutes ago. I added this and it also has my commit message there as So little handy told to have And that's part of the gitlims extension. so next I'm going to go to GitHub pages. And we're going to look at this on GitHub Pages now, so to deploy this site. I'm going to go to settings.
00:20:00
Lewis Benson: And once I'm in settings, I'm going to go to Pages here on the left. settings is up here on this toolbar and then on the left hand side. I have all these links. I want to click on pages. And this is already set to deploy from a branch. I don't have to change that. But I do have to tell it which branch to deploy from. where this says None. I want to change this to Main and press save. And that's all there is to it. It's now deployed. It's currently building the site. It takes a few seconds if I press refresh. And we have nothing here at the top yet. I can go to actions. And watch this build.
Lewis Benson: This is just kind of showing me the progress. I can actually click in on these and see exactly what it's doing. But it's a little bit beyond the scope of what we do here. It doesn't really matter how it works behind the scenes as long as it publishes our site for us. It's fine. If you do want to know more about custom domains and things like that advise looking into that a little bit. Let me actually bring that up here real quick. So here's this section here for custom domain. They do have some resources for that. And you could actually change this to be a custom For example, if I wanted to build a portfolio that was customized to me. I could make a website. That's like Lewis that's benson.com. And then share that link on LinkedIn and it's a really easy one to remember. It's just my name calm.
Lewis Benson: If it's not available in the com extension then maybe I'll go with a dot iOS pretty popular for Developers for some reason. So that's always an option. So this should be deployed here. We do a refresh. There we go. So I'm still going to GitHub Pages tab. I can see the URL now and I got this visit site link. I'm going to click that and just make sure I got my content.
Lewis Benson: And there it is. Let's looking pretty good.
Lewis Benson: Does anyone have any questions about get GitHub? Is there anything you want me to cover specifically about git or GitHub? Any of the terminal commands or anything like that? Because I did kind of go through this a little quickly again. This is just like a high level overview. But if you do have questions like you I'd like to address those now.
Ryan Arnold: Would you mind going over just one more time doing the fork and a branch?
Lewis Benson: Yeah, absolutely. Yeah, so to do a fork. you have to be on somebody else's repository because I'm on a organization. This is considered. Somebody else's repository. So once you're on that repository, you just click the fork button.
Lewis Benson: and create Fork
Lewis Benson: So this is going to put this on my primary repository now. So we have it we can see the one where it was forked from and we can see that I'm on my current username and I can see the name of the repository there. So what I'm going to do now is flown this down. I'm gonna have to put this inside of a different folder because This is a different remote than what I've been working On the original one doesn't have my username. It has my organization name right here. So it's actually a different URL for origin. So I'll put this into a different folder because of that. I'll do it in review week.
Lewis Benson: And we'll do get bash here. You just need to be in a terminal that's inside of the directory that you want to clone it to we'll get shift insert
Lewis Benson: Okay, and that looks like it completed successfully. So now I will CD into that Repository.
Lewis Benson: And I'm going to do a code period here just to get this into vs code as well. Just to kind of show you this side by side.
Lewis Benson: so If we look at the bottom here, This is where one way we can see what branch we're on. We can also see it here. And if I do get branch? It also tells me that I'm on my main branch. You could also do get the dash V looks for all of the remote variations of it. This is actually. the commit to have that. hexadecimal code for the commits you could actually change your branch to those commands. Which is interesting, but your question was to create a new Branch here. So I'll show that.
00:25:00
Lewis Benson: So to create a new Branch you're going to get switch. This is switching to a new Branch. But if the branch doesn't exist, then you have to push minus C. And then the branch name that you want to switch to so often times will create a branch called Dev whenever I'm working on a separate Branch. This is kind of my go-to. So rum developing things and in my brain, my main branch is where everything is actually deployed. So I'll do get switch Dash seed Dev. And there is a couple Alternatives. I'm going to show you another really popular way to create a new Branch because you'll probably run into this at some point because it's so heavily used still. It's the exact same thing. It's just a different command and that's get check out - B. and then the branch name, let's call this one Dev to
Lewis Benson: So exact same thing but completely different command and completely different flag. The checkout command does a little bit more than just switching you can also use it to create timestamps and things like that. So it is a little bit more advanced. And this kind of replaced the idea of creating branches. This is the newer way to do it to get switched minus C. Once you create the branch though longer you need to use than the minus C Flags. You can switch between your branches freely. So we'd say get switch Dev to come back to the regular Dev. it switch now to and that's how you can switch between your branches.
Lewis Benson: now that I'm on a new Branch whatever changes I make they're not going to be applied to the other branches. So this is where you can get multiple versions of your code base. And then compare them together and merge them together if you wanted to. One more thing the note. Is this down here also allows you to create branches. If you click on that, you can create new branch. And then you just type in the branch name. I'll put Dev 3. And that's the same thing. So you do have a little bit of the graphical interface here for creating branches as well. And then you can also switch between the branches by clicking on that and selecting the one you want. So for anyone who prefers the vs code, there's the way to do it there. Now that we are on our new Branch. I'm going to make some changes. I'm going to cut this in half all of this content.
Lewis Benson: a press save and then I'm also going to add a little bit of CSS in here. We'll say body.
Lewis Benson: background color purple We'll just lighten that a little bit so it's not bright. Okay, so there's our two changes. I'll use the terminal this time to ACP just to show that again it add period It met Dash m. And we're going to put in our commit message. and this will remove some text Add CSS.
Lewis Benson: and I'm going to push Origin, and I'm not going to type main because I'm not on the main branch. I'm going to type Dev instead. I'm so whenever you're working on. a different branch you have to push it to that Branch. You can't push to the main branch. So we'll do get push origin Dev and we can see that's on my profile not on the organization. And it looks like everything worked. So I'm going to go back to get Hub now and I'll show you how to merge this in.
Lewis Benson: So here we have this little alert popped up and says Dev had recent pushes less than a minute ago. So I'm gonna do a compare and pull request. And if we look up here we can see how this is actually going to be merged. It's going to take the base So there's my organization name and the name of the repository on the main branch. And it's coming from my username. On the dev Branch. So whenever I do this pull request, I'm actually doing the pull request into The original repository if I didn't want to do this to the original repository just yet. I could actually switch this to my current profile.
00:30:00
Lewis Benson: And now I can do a merge on my own profile so I can merge Dev and domain without merging it into the original repository. So there is an option for that. It's really useful if you want to see if your main branch is deployed locally or deployed on GitHub pages and you want to see the changes deployed before you actually open a pull request to the original repo. You can do that right here. I am gonna do this and then I'm going to open another pull request to the original just to show you the difference between the two. So it open pull request.
Lewis Benson: And the pull request is open and now I have the option to merge it here. And again, this isn't merging it to my organization. This is merging Dev B to my main branch before I actually merge this. I want to show you the difference. I'll go to code. Here's the main branch. I'm going to open up my CSS. And there's nothing in my CSS and that's because those changes were made on the other branch. So over here I can actually switch to the dev branch. And now we can see that change that I made. So if I switch back to the main branch, it's not there. when I merge this pull request, it'll actually update my main branch with the latest code. And the reason you would want to do this is protesting purposes. You're going to want to check to make sure everything is going to line up correctly first off.
Lewis Benson: Before you merge it in you want to make sure that there's no conflicting code and you want to test your application and to end to make sure that everything is working correctly before you merge this and you're deployed website if this was a production level website for a client. You don't want to just start making changes and merging them into their production site because it could cause their actual web page to go down and that's never a good thing. Especially when you're dealing with a customer or even your own web pages. You don't want to bring your web pages down because you're merging code. And so you want to test everything first on separate branches and that's the whole purpose of this. So emergency pull request will confirm merge.
Lewis Benson: And dev has been merged to Maine if I want to now I can delete this but it doesn't delete it on my local computer. So if you do delete this, you'll need to also delete it locally through your terminal. So typically I just leave these alone unless I start getting a whole pile of branches and then I'll go through and clean them up. So let me go back to pull requests. And I'm going to click new pull requests because actually want to merge this into my organization code as well.
Lewis Benson: So here we see again the base repository. This was the original screen you seemed when I click on this showing the base repository of the original branch of Maine. So if you didn't switch this over, to your username And again, if you're forking a repository, you will have your username here and you'll have the original repository there. So. This still is valid. This is what the screen would look like and if you didn't merge it over then you would just create poor request here. And now you want to give a description to whoever that explains everything in detail that you did a lot of times they want screenshots of the before and after possibly even a video clip of if it's something functional they want to see that in action. Most people are very Cautious about just merging some random person's code into their repositories.
Lewis Benson: But most developers are open to external influences on their projects and that's a good thing too. This is what we call open source. Anybody can go in and work on things. For example, the vs code application itself is an open source project. If you found a bug in vs code, you could go in and fix it open a pull request to the original and as long as you describe everything you did step by step and show the testing and everything's working correctly. Then they'll actually merge your code into vs code and you'll become a contributor on that project. that. There's some database applications that are open source. There's lots of big web applications out there. The Linux operating systems open source. So a lot of things let me put a title in here.
Lewis Benson: And then here I'd want to give a really detailed description before and after screenshots and all that. because this is my own. I'm just going to create pull request
00:35:00
Lewis Benson: And because I'm on my own organization, I'm able to merge this in already because I'm considered a editor on this project. If This Were somebody else's repository I wouldn't be able to merge it at this time they would have to merge it for me So I'm just going to click merge and then And that's Did that cover everything that you wanted to see Ryan or is there anything else you wanted me to go over with?
Lewis Benson: the forking cloning branches Yeah,…
Ryan Arnold: That was pretty much everything. Thank you.
Lewis Benson: no problem at all. Does anybody else have anything that they wanted to see with get GitHub GitHub Pages? Anything like that?
Lewis Benson: Okay, I'm going to show an alternative way to deploy a web application though. This is a third party platform. That doesn't use getup Pages. I'm just going to kind of go through this briefly. I'm not expecting you to be able to do this. It's not like a graded thing. I just want to show you as an alternative in case you wanted to get away from GitHub Pages for some reason. Perhaps you want to have two deployments off two different branches. This could be a solution for that. Let's say you have an actual production level page and you also want to have a development deployed version of it that you can use for testing. This is a free third party web page you can use for deploying web applications. It's called netlify.
Lewis Benson: So I'm just going to search for netlify. And we'll click the top link. It's sponsored, but that's okay. Login, I'm going to log in with my GitHub.
Lewis Benson: And then all you have to do once you're on here is add new site. And then import an existing project.
Lewis Benson: And we're going to deploy with GitHub. I am going through this kind of quick if anyone does want to netplify deployment at any point in the next week or so. Let me know and I can walk you through it step by step if you're getting stuck on anything or hung up on anything. We're not actually going to be using netlify as a requirement until we start getting into Frameworks and this is because GitHub Pages doesn't work with JavaScript Frameworks. such as react so we hit deploy from GitHub.
Lewis Benson: And then you just select whatever one you're trying to deploy. So these are always in a weird order. It looks like they're an alphabetical now, so I'm going to go to I believe it was called demo.
Lewis Benson: And there it is 12/7. And again, I could pick Dev if I wanted to deploy from the dev branch and then my GitHub Pages would be deployed from the main branch and my netlify deployment would be deployed from the development Branch. So I would have two separate deployments for the same website, which is great for testing. If you recall the issue I ran into with the slashes. This could be a way to identify bugs that only occur in deployment that aren't happening locally on your local machine. Maybe you have a link to a photo that is linked locally to your computer. So you could test your deployment before actually merging it in. No, so that's the use case for that base directory. This would be if you have your entire project within a folder. Typically you won't do that.
Lewis Benson: A build command is referring to node.js. We don't have a build command. Published directory this would be for a front end framework. We don't have a public published directory. And we don't have a directory either environment variables. This is something you could run into fairly soon if you wanted to build let's say weather application. And you actually have an API key from a weather API, then you would want to add a environment variable and this is just a key value pair that's red externally from your program and it's completely hidden. so you don't accidentally share secret information to GitHub into a public environment where everybody can read it. So this kind of works like a JavaScript object. We have a key and a value.
Lewis Benson: And then locally you would have another file. So if anyone does want to use an API. Just let me know when you're working on your Capstone projects and I can help you set this up so that you can keep your secret. If you have a premium API key and that becomes public knowledge. And somebody malicious gets a hold of your API key. They can hit that API so many times that it cost you hundreds of dollars a minute. So it would be very bad if somebody malicious got a hold of an API key that was set up to a credit card. Typically free apis, like weather apps and stuff like that. You'll get a free trial and when you exceed your API limit, it just shuts off. Your API doesn't want to work anymore. I'm still not the best behavior for your applications, especially if you wanted to demonstrate it to a employer and then you go on and somebody. spammed out your API keys and you don't have any more uses left then it's just no good.
00:40:00
Lewis Benson: So I'm gonna hit deploy. And what's going to create one of them just close that?
Lewis Benson: And this takes a minute to build just GitHub pages. But it's a very similar process once it's done the URL will appear right here. And we get a randomized URL. It's kind of on GitHub. We get that your username don't github.o slash repository name on netlify. It's always something completely weird. It's just random words and then some letters and stuff. So we click on that and we have the same results now. This is deployed to a web application or deployed to a different URL but it's off of the same repo. anytime I do an ACP this will update on that Lafia as well automatically. It will detect the build process and if I go into actions, I should the build deployment this one's for here. I should see some there should be one on here from netlify somewhere now.
Lewis Benson: It might not be up to date just yet. I'm on the wrong one. I need to go to my profile.
Lewis Benson: That's not showing up in the actions, but it should show up.
Lewis Benson: Yeah, it doesn't detect it just yet, but it will show up eventually. It'll be a little deployment here on the side the same as the other one because whenever you're using that lefi, it does trigger a GitHub action and it has to do checks before it can actually move in.
Lewis Benson: But does anyone have any questions about that? I know that was a quick down and dirty on that lafi, but I just wanted to show you that it exists. And if you're interested in it, then you can use it.
Lewis Benson: Okay, so it's pretty much all I wanted to cover with getting GitHub. I do want to start getting into some JavaScript review just because there's so much content to cover with JavaScript since we did it for two weeks. and GitHub was a fairly short amount of content. So let's start diving into some JavaScript. I'm going to open up my close this
Lewis Benson: I got so many of these open now. I use this one.
Lewis Benson: Close that one. Okay, so this is my review week. I'll delete this repo out of here.
Lewis Benson: I don't think it's gonna let me.
Lewis Benson: There we go. All right, so everything's back to normal. We have an empty HTML file. We have a Javascript file. That's not LinkedIn and it doesn't have any content in it and I'm keeping this bootstrap file from yesterday. And here this is the same review week that I've been working in all week. We'll keep the bootstrap just because I like the styles. And I'm actually just gonna go ahead and Link that in now so we can see there's changes.
Lewis Benson: very bootstrap dot men dot CSS
Lewis Benson: I'm not going to link in the bootstrap JavaScript because we're not doing anything sophisticated with bootstrap. I just want to get there reset and some of their styling for just to make things look a little nicer as we're working through this. We'll do a title.
00:45:00
Lewis Benson: It's called JS demo. I'll put an H1 in here. with a Hello World and a console.log
Lewis Benson: with a Hello World and then the link that in as well. script
Lewis Benson: Okay, let's see if this is all working.
Lewis Benson: And there we go. This looks pretty good with the bootstrap. This was a theme. So that's why the colors are a little weird. If I went to boot Swatch yesterday and downloaded this. I think this was the Slate theme. But that's working. Let me check that again. Yeah, there's a hello world.
Lewis Benson: We refresh to get rid of that. There we go. So everything seems to be wired up correctly.
Lewis Benson: So let's get into actually doing some JavaScript now.
Lewis Benson: So here was the console.log again remember that's just the way to get some of our outut. One thing to note is console is an object. And log as a method so I'm going to get into that right now. If I wanted to create an object literal, that's where you used to curly brackets and it's key value pairs. so why you would want to create objects so that you can create things that have properties that describe what are kind of objects in real life so such as the example I gave earlier and week one was a pen i pen has different properties to it at a length. It has different colors. It has a method would be like writing with the pen. So that would be where you'd want to use an object for something like that.
Lewis Benson: I'm going to create an object called person. And I'm going to give them some properties. They're going to have a name.
Lewis Benson: We'll give them the name of Tom. So Here's our value. And then these are comma separated so I'm going to put a comma. And press enter notice my curly brackets. Are not on the same line I could bring these this. But you don't typically type these out like this you typically put them on multiple lines. We'll do an of 30 Again, I want to put these back on multiple Lines Just because this is a little weird domain to have these.
Lewis Benson: I like this. And then I always put a comma at the end of each property. Even if I don't have another property I end it with a comma it's called a trailing comma it's not required but it does make it easier to go back and add properties later without getting it because if you forget this and you press enter and say
Lewis Benson: height 70 inches should be a string.
Lewis Benson: and we have an issue here because we're missing that comma so it's easier just to keep the trailing commas there at all times and then you don't worry about it. I'm actually just gonna make this a number.
Lewis Benson: So you can keep putting these properties on here, but you could also put a property that is a function. So this one is going to be talk. And this is going to be assigned to an anonymous function. So I'm going to say function.
Lewis Benson: And I didn't put a name here. This would be where your function name would go. I'm not going to put a name there. I am putting my empty parameter blocks. I could put a parameter in here. I could put something like if I wanted him to talk to a certain person for example I could say
Lewis Benson: talking to who? And this would be a string that goes in.
Lewis Benson: We can do that. And then I'm going to create a string that is returned from this. and I'll use a string type of literal and I'll say
Lewis Benson: this Dot name remember when I'm using the word it's referring to The person object I could also say That's not good practice though as we learn more advanced object manipulation. This will actually hinder you quite a bit. If you start putting the object name within your object, so to kind of future proof that make sure you use this dot name. But it does do the same thing as typing in the object name. so says
00:50:00
Lewis Benson: And I'm going to put dollar sign curly brackets.
Lewis Benson: Talking to who?
Lewis Benson: And then we'll put our actual message. Hey there.
Lewis Benson: All So this looks like it would work out pretty well. Let me go to the browser. inspect
Lewis Benson: and we're going to type in person. There is our object. It has these properties on it age height name and then our talk Remember I method is a function that lives in an object. And a function is a top level. It's not on nested within anything. So just kind of like a distinction between the two they are technically the same thing in a It's just the way they're accessed is a little bit different. So to access the talk method I'm going to say person talked. And I need to pass any string. I'll say And we get Tom says to Bill hey there. Something I haven't shown before I'm just going to show it now. because it's kind of cool is there's a thing called default parameters.
Lewis Benson: So walking to who we're expecting this to be a string. We can make it. So if you don't pass in anything here, we can actually assign this ahead of time unless you do pass something in so you could say talking to who equals. someone
Lewis Benson: and this is kind of a generic way to do things. It's commonly used on authentication. Whenever you're logging into a web page. It might start off saying hello user and then after you log in it switches to hello and then your actual name. This would be a use case for a default parameter. So it does look a little weird. It's like we're assigning a variable to a value here. And let me show you what happens now if I do. We'll do person.talk I'll type in bill again.
Lewis Benson: And we still get Tom says to Bill hey there. but if I leave this blank Tom says to someone hey there. So that's just the difference in that there's a lot of little details like this that we weren't able to go over but this is one I did want to show just because I think it's cool. I use it quite a bit. Yeah, that's a default parameter. And they're only defined whenever nothing's passed in. It's also a good way to kind of set up some I don't want to call it air handling but a way to handle situations where your function may or may not have perimeters.
Lewis Benson: As anyone have any questions about the object.
Lewis Benson: So it's a pretty basic concept here. One thing to notice is I'm using the const keyword to declare This is a variable because we're assigning it to the object. I could remove all of this. This is still technically an object. We have an extra. little bit there looks like
Lewis Benson: it doesn't like that for some reason. But I should be able to remove the variable. There we go. Nope, it doesn't like It wants it to be assigned to a variable typically whenever you have anything assigned to a variable you can have it stand alone is what I was going to demonstrate there. For some reason it doesn't like that syntax. It could be the use strict on this not allowing it. So I'm just going to move on. It's not really a big deal. I could show it with a string if I do const my string equals. Hello. I could also remove this. And it doesn't do anything. It just returns nothing so. It might not like that what the object though just because this is a reference type and this is a primitive type.
Lewis Benson: So it might not be able to put reference to nothing on nothing. I've never actually tried that before so that's interesting. I'll have to look into that and see exactly what's happening under the hood there with that.
Lewis Benson: But moving on I want to show the arrays now. We're gonna permanent example here. So we're going to get into a raise. I'll just do my array for the variable name. I'll add more to it of root. Is equal to and then we put our square brackets for our array template. And this is just an empty array at the moment. We can see that my array of fruit we'll get an empty array. There's nothing in it, but it does have a length property that's assigned to zero and we also get all of the array methods that we can use on this array. those live inside of this prototype So if you're ever wondering what the Prototype is, it's basically where methods are stored on this object and an array is considered an object in JavaScript. We can do type.
00:55:00
Lewis Benson: of my array of fruit and we get objects for that. Pretty much everything in JavaScript and object even though they're not objects. It's confusing concept. If you don't know what I mean by that, don't worry about it. It's not a big deal, but type of will tell you what the data types are. That's a really useful way to make sure things are what you think they are. If I put curly brackets we get object. If I put quotes we get string if I put a number we get a number. If I put null anybody know we're gonna get from null.
Lewis Benson: We get So for some reason Knowles and object even though It should be no. I don't know javascript's weird. If I put true we get bullion.
Lewis Benson: So there's a lot of different data types there. I'm just going to kind of run through that but notice We've got an object. We're gonna object so lots of different objects. most reference type data structures in JavaScript are going to be considered an object. If I do a function, it's a const.
Lewis Benson: my function give it some parameters.
Lewis Benson: for actually need the equal sign there and the arrow so it's about log.
Lewis Benson: And we'll just have a log in and be string. So if I do type of
Lewis Benson: my function we get type that it is a function. So nice little way to again just to see what things are. You can use this in comparisons as well. You can make sure that if you have an input coming from a user that it is a number and not a string or not something else. So it's a good way just to check on data to make sure that it is what you think it is.
Lewis Benson: All right. So back to the arrays. I'm going to add some fruits to this. We'll say my array of fruit dot push the push method will add things to the back of the array. And we'll add an apple.
Lewis Benson: so we say my grain of fruits. There's our Apple being added without another one.
Lewis Benson: On this one we can add an orange.
Lewis Benson: And we get those two items. I remember we also get the length property on this. So if you wanted to check our length.
Lewis Benson: we get two. Keep in mind this is a regular number here. So you could actually do math on this. We see that sometimes while Loops. We'll subtract one from the length or we'll add one to the length depending on what we're trying to do. There are some use cases for that. And speaking of for Loop. I'm going to go ahead and create one here. or let I equal 0 if I is less than my array of fruit length
Lewis Benson: remember the length of our current fruit array is 2 because I push these two items in even though if you look up here on declaring this as an empty array, so something just kind of keep in mind. This is a really really common thing to do is creating empty arrays and then at a later time So if we wanted to we could actually push items Using a loop as well and I will share that in a little bit here. We did our increment I and our curly brackets. And we're just going to cost about log. I first. the comma and say
01:00:00
Lewis Benson: so 0 I is one.
Lewis Benson: And now on the next line I want to do the actual fruits so counts about my area fruit and we want to pass in square brackets. This is how you index a array using the square bracket notation. I'm actually going to put in one more fruit just so we have three element minimum.
Lewis Benson: We'll put in a pair.
Lewis Benson: And there is our three fruits being added. If we weren't using a for Loop, and we wanted to do this. Without the loop under straight what that looks like, maybe it'll help understand if you're having any trouble for loops. We would do it zero.
Lewis Benson: We would do it one. And we would do it 2 so this is how we're indexing for I'm not currently logging any of this. I'm just showing how you would access the items in the array. And because for loop I starts at zero because we told it to here and as it increases it's incrementation. It's going to change which item it's accessing the same way. It does here. So for Loop goes around the second time it goes around. This would be the value. And the last time this would be the value. Are there any questions about for Loop the array anything at all?
Lewis Benson: All right. so I'm going to create another. Array, but I'm gonna do it through The map method automatically returns array in order to use the map method you need an array to call it on. So I'm going to create an array here.
Lewis Benson: And I'm caught numbs because when put numbers in it. And we'll just do a bunch of random numbers.
Lewis Benson: So there's our random numbers. And what I'm going to do now is map over that and then kind of manipulate the data in a way but into a newer array so we'll say const. updated nums Is equal to nums dot map? And this takes a callback function. So I'm going to put my parameters here. This is the parameters and a function. And I'm going to call this num. I'll call it number. so it's clear what the item is as it iterates over it. I'm going to put in an arrow. And the arrow is the same as using the function keyword except it goes to the right of the parameters instead of the left. So normally you have your word function over here where my cursor is currently flashing and no Arrow.
Lewis Benson: If you want to use the arrow function, you don't put the function keyword instead you put the arrow to the right of the function parameters. And then an optionally you can put curly brackets the way you would in a regular function declaration. If you don't put the curly brackets, then this has to remain on one line. So if I said log number and then I tried to do something down here. Whatever I put within this isn't going to work. So if I did another console.log. of number plus one you can see it's already mad at me. That's because I don't have curly brackets. If I wrap this and curly brackets, it's happy it just formatted that. So if you have it on one line, you don't need to curly brackets.
Lewis Benson: This is valid syntax. Just keep in mind that whatever is here is being returned. And this current logic doesn't really make a lot of sense because we're logging and console.log doesn't return anything. So this updated nums is going to contain three undefines. So let's just take a look at that. and say updated nums actually more than three there because I was the number right not the fruit array. So every single one of those is undefined because anytime you type console.log.
Lewis Benson: It returns undefined. So whenever you type a command into the terminal here, whatever it's returned type is it's going to show up right here. because console.log doesn't actually return a value. Then this is going to show undefined.
01:05:00
Lewis Benson: There's some other methods that are like that. If I type in a string and just say The string hello is going to show up. But if I were to invoke a function that doesn't return anything then the undefined will show up. And that's all that little undefined there means is that whatever function you just ran doesn't have another value. another example I think would be push. So if I say numbs push. And I will pass in one. so It Returns the value that you're pushing. I'm sorry now there's returned the index. So the push method Returns the index that you pushed in.
Lewis Benson: So that's interesting if I actually look at my nums now. There's that one that got pushed to the back of the array. And we can see that it has all It does the length not the index. So if I do another push I should get a 10.
Lewis Benson: Yeah, so that's the length of the new array. I've never used that value for anything before so I don't think it's not useful. Because if I call this method then I can just do numbs.length on the next line. And I also get 10. I don't think I would do that. That would be you could do it. You could put that for Loop or something I think and
Lewis Benson: how would be really weird? I'm actually gonna try it. I'm interested if I say numbs. Sorry, let me do a for Loop.
Lewis Benson: or let I equal zero
Lewis Benson: and I is less than nums dot push passing 12 I plus plus.
Lewis Benson: log nums at So I'm really interested if this actually will work the way I think it will.
Lewis Benson: Seem to be an infinite Loop.
Lewis Benson: I did say less than I Yes, so that doesn't work. We're in another infinite Loop. Good know. it's interesting because it does return that length so. I thought maybe it could but apparently in a way that this functions working. It doesn't know the length just right away before this actually runs, so I guess don't try that. Make this a length instead. And we should see all those numbers now.
Lewis Benson: Yeah, they all are. line 33 and line 33. So yep that lines up. Let me remove this console logs here. So that doesn't spanning the screen.
Lewis Benson: There we go, and line 30 as well.
Lewis Benson: So line 30 we're logging. We're creating that map so we're actually gonna come back to that. And we're going to actually modify these values so that we get our updated numbers so we could say number. plus 5
Lewis Benson: And that will add. 5 to every single value
Lewis Benson: and then if we wanted to we could take the updated nums and we could filter them.
Lewis Benson: using the invoke the filter method and then pass in a callback function. The first parameter of the Callback function will be the number that we're iterating over. I'm going to do the standard function declaration just to show the difference between the two.
Lewis Benson: And then you need to return keywords and then whatever logic will go on this line. So this is declaration This is the exact same setup as this over here. Except that I would do numb. Plus five if I actually wanted it to look exactly the same. But the filter has to return a Boolean, but just to show you the difference this callback function. Is the exact same logic as this callback function?
01:10:00
Lewis Benson: I'm going to convert this back to an arrow function just because I prefer those and they're the more. Widely used way to do it. I just deleted my parenthesis.
Lewis Benson: So now we want to make this a Boolean. So anytime you do a filter it needs to return a false. So what we want to check for is we're gonna get the odd numbers so I'm actually gonna make a variable here.
Lewis Benson: And we wanted to check for odd We'll say number. We use the modulo operator. to and say it's not equal to
Lewis Benson: 0 so if whatever number we're iterating over divided by 2 if it has a remainder if it's not equal to zero. Then we know it's an odd number and it will go into the new odd numbers array. So let's take a look at our odd numbers array.
Lewis Benson: And there's the odd numbers of the filtered array.
Lewis Benson: Does anyone have any questions about that?
Lewis Benson: All right, so I ran a little long there past our break. I'm going to start the 10 minute break now. When we get back, I'm gonna go through a more practical use case of JavaScript on a web application. It'll be more of a realistic use of how you would actually want to implement this into your project.
Lewis Benson: So far, we've just been kind of using the logic. We haven't actually implemented the logic. So let me get the 10 minute timer going and we get back. I will do that.
Lewis Benson: And I will see you in 10.
01:20:00
Lewis Benson: All right, welcome back. So I'm gonna get into a little bit of a demo here where I built something kind of more realistic. Everything we've done is definitely essential. Knowing how to manipulate a raise knowing how to access objects methods. All of that is definitely fundamental to using JavaScript in a real world application. But we should use it in a real world application so that you can see how this works whenever you start building your capstone's. one of my probably preferred ways to include JavaScript. In a project as a calculator and I don't mean the one through nine digit with plus divide multiply that type of calculator. I mean to calculate a real world problem. I'll make an example where we build a web application for.
Lewis Benson: An actual client if I were to build this a page, I would say we'll do a roofer contract. And then you would want to have some sort of calculator that would actually calculate the cost of the roof. Based on the materials If there's any cleanup costs associated with it anything like that? We could incorporate all of that logic programmatically so that somebody doesn't have to sit down and figure out the total cost. And that's a pretty common use case for JavaScript is to calculate things like this and then display that back to the user. It's not the only thing we've seen a lot of Dom manipulation interactivity making things disappear and appear based on clicks all that type of stuff is also important, but in order to actually put this into a project until we learn more you'll probably want to come up with something like this some sort of way.
Lewis Benson: If you build out a portfolio, you could Implement something like a dark mode toggle. You could also implement. maybe a calculation for If you're building up, a freelance website, you could say for every web page or whatever page I build to say you build a five page application. You could say that your cost is going to be a hundred dollars a page. And there's going to be added fees for extra functionality and things like that. You can build a little calculator on your portfolio. So that clients could use that to see how much that your rates would be. That's not really something you see as a calculator on a portfolio, just so that you have some sort of JavaScript functionality. That could be an approach you take All right, so let me get started here. We don't really have any content in here yet. So we're gonna want to add in.
Lewis Benson: Our forms and we want to make this so that it feels kind of realistic. We'll keep the bootstrap in there. I think that'll help a bit. So first thing I'm going to do is do my heading. We'll just say Roofing.
01:25:00
Lewis Benson: Project calculator I would probably also build a splash page for a roofing site something to kind of grab the user's attention. A splash page would be like your home page that you would first land on but the pricing. It wouldn't have any of the content. It would just show maybe some pictures of the work you do a get a quote Now button and things like that. And then within your actual web page somewhere is after you click on get a quote button is where you could have your calculator live at but for this demo, I'm just going to get a quote page. So we need a form. I'm not going to give this an action, but I am going to give it an ID.
Lewis Benson: And for the idea we'll use roofing calculator.
Lewis Benson: And all this is going to do is allow you to pick from different types of roofs. And allow you to figure out how much it would cost based on the choices you make because the idea here. So we'll create a label or form. And this is going to be for the roof type. So I'll just call this roof type.
Lewis Benson: and select roof, right
Lewis Benson: And then we're going to put a select. So this is a type of input that allows you to pick from multiple options. If you remember this from the HTML and that was quite a while ago. So I will go over this one again to show you how works. for the name this would be roof type.
Lewis Benson: And the ID is also going to be roof type.
Lewis Benson: And then we want to put our options in here. Optim so for the option we get this value attribute. This is actually what is read by JavaScript. So whatever you put within the value is going to be the output so if you wanted to put the price of your materials here so I could say this one costs $3 per square foot. I could do.
Lewis Benson: five ten fifteen dollars per square foot and I could put those numbers right in here. But then on the outside, I would actually put the label that you'd be seeing shingles. I'm just going to put the string in here though, because I feel like it's easier on the JavaScript side to understand what this data means. So I'll do value shingles. And we'll be using conditional statements to actually compare and see which one is selected.
Lewis Benson: And for this one, we'll do metal.
Lewis Benson: And third type of roof of we can do tile. It's not really that common in my area but you might be in a area where they use tile roofs.
Lewis Benson: And then we have our closing select. So that looks good. Because we have bootstrap in here. I can use my classes here as M-5, just to get this away from everything. If I wanted the center it too I could use some layout techniques for that. I don't want to get that deep with it. I just want to kind of get it going. We're still inside the form. This would be the first thing to select. Next thing would be the area how big of a roof is It will say label.
Lewis Benson: area enter roof area And we want to specify that it's square feet.
Lewis Benson: And then we're going to need an input for that. Type. I'm actually going to put number here. That way they don't accidentally put a string in we don't want to mess up the data going in and try to do math on a word. So you can use this for making sure that the only type of data being passed in is a number keep in mind input Fields still return strings. You'll have to convert it into a number, but if you try to convert a word into a number it throws an error. So we could avoid that. And we'll give this an ID of area for the area. I also going to give it a Of area as well. I like to use the name attribute on my inputs. And we can put a checkbox in here. decrease the cost based on the checkbox. We could use disposal if they are going to want to.
01:30:00
Lewis Benson: Get rid of the stuff on their own then they can save some money. Let me put this in a wrapper.
Lewis Benson: And we'll do an input and notice. I'm putting the input before the label. That's because Then I started the label in the checkbox will be on the left. So whatever side you put these on. Is decide that they'll end up on? ID this disposal
Lewis Benson: and We could give it a value of disposal.
Lewis Benson: And then put our label in.
Lewis Benson: You'll say include disposal charges.
Lewis Benson: And then we need a way to submit it. So I'll put a button.
Lewis Benson: I don't really not have to put the types of mint but it's still a bad idea. Because it makes it whenever you're looking at the code. We see this button. We know that we're inside of a form element. So it's an optional thing if I were to make this an input. We would have the same result. This would actually create a button whenever you say type submit if we keep this as a button though. It's just a little bit more clear on what this actually is. And then we'll say calculate.
Lewis Benson: Okay, so that looks pretty good. As far as our form goes. what this looks like on the page. It's really But it's good enough for the demo. I can always style this another time. If we need to we could select between these let's all working and we can put numbers in here. We could also change the step size on this so that it's not one. If we wanted to we can make it count by tens or 20s or whatever. But when we're dealing with an area, we probably will just leave it alone because we can type Panera as well. And then our checkbox. It's working. And we click that it submits the form. So everything seems to be working correctly. let's add in the JavaScript to actually wire all this up.
Lewis Benson: So what we want to do in our JavaScript is actually select the elements I'm going to do this as a function. So if we look in here we have our roofing calculator. That's something we'll want to select. We're the reason I want to do this in a function though so that we can prevent the default and we'll create basically a callback function that will pass into our event listener on the submit button and we'll listen for the submit on the form. So hopefully that makes sense on why I'm doing it that way.
Lewis Benson: So let's select this form It's a Roofing calculator equals document dot I can do get element by ID. I'm going to use Query selector because it's my preferred way of selecting things. And we'll pass in the hashtag roofing calculator.
Lewis Benson: So that should get me the entire form and then we're going to want to put a event lesson on this. so we'll say roofing calculator dot add event listener and this is not a click event. This is going to be a submit event because this is a form element take a look in there again. You see this is a form. We're not clicking on the form and then We're clicking on this button and then getting the data. But I don't Want to click event. I want to grab the entire form. So we have access to all of the data. So whenever this button is selected, we'll listen for that event. And then we'll stop the file from refreshing the page. So that'll be the next thing. So this will take in a submit and then we'll take in a callback function.
Lewis Benson: So I'm going to create the Callback function externally and just pass it in so we'll say function. And we'll call this. Calculate cost
Lewis Benson: and it's going to take in the event object.
01:35:00
Lewis Benson: And then we're going to pass that in as our second parameter like that. And then we'll see if this was working. I'm gonna do it the event t default
Lewis Benson: as well as the console.log. form submitted
Lewis Benson: so I was sub.
Lewis Benson: That's a little odd.
Lewis Benson: refresh
Lewis Benson: area just into the refresh. I'm not sure what happened there. But now we got our form submitted whenever I click that. So now we should be able to see what the values of each of those are inside of this callback function. So first we would need to check the actual
Lewis Benson: selector one so all I'm going to do it first. I just log this out. I'm just kind of do this. step on that kind of my thought process, but I don't want to just rush through it and not have you understand what I'm thinking as I'm working. So I'm actually log things out to kind of show you my thought process as we go. So we have this item within the forness the first thing that we want to check for. And it has a name of roof type. So inside of my callback function because I have this event object here. I can access any of the elements within the form. So what that means is I can access this input. I can access this input and I can access all of these by their name. This one doesn't currently have a name. So let me give this one. name equals disposal
Lewis Benson: alternatively I could select these using query selector and grab their IDs, but there's no need for that because I have everything within this four ball ready through the event object. So I have access to every single input field and I can get all of the data that's passed into that. So let me delete this form submitted button or sorry consider log and actually look at those so we have event not dot whatever the name of the element is This one is called oops roof type.
Lewis Benson: And then you need to put a dot value at the end of that to actually see it. Let's put that in a console.log. I'll put this into a variable first.
Lewis Benson: Just so that my console.log isn't really really long.
Lewis Benson: If I wanted to I could put this directly into the console.log without putting it in a variable. Just so we can see that it's working correctly. So this is selecting on shingles. I can't calculate and we can see shingles. Next we want to get the number that's passed into the roof area. something else I wanted to While before I forget is actually make all of these required fields.
Lewis Benson: As I work out Adam is required. because it calculate this one's already selected it shingles, so it doesn't really matter if I have that. But now I'm going to put it on. This one here as well. It doesn't matter where you put it in here. As long as it's within. This is an attribute somewhere. If I don't put a number in there and I calculate I get this please fill out this field. So we get a little bit of validation there for us to help us to make sure that it'll prevent errors at our JavaScript. If somebody leaves us blank, then that could throw an air. Because that would be an empty string and you can't convert an empty string into a number.
Lewis Benson: So making that required will help with that because we did there so the name of this is area. So let me access that value.
Lewis Benson: aread on audio so I know this is a little bit cumbersome to look at and it's sometimes hard to remember how to access the values of these. This is one of those things where if you forget you're pretty much have to Google search how to do it. The best way to remember is just by practicing it and using it. It's not really any documentation that I know of. I don't know where I haven't seen this in mdn or anything. So it's one of those things where you just kind of learn it and then remember it and if you forget do some Google searches, You'll find it on stack overflow. You can use AI whenever we get to that. I'll cover how to find these Solutions through AI. So there's that one. Next we want to pass an area. And we'll make sure that this is working correctly.
01:40:00
Lewis Benson: so shingles type in four five four calculate and we get both of those values. So the last one is the include disposal charges. So we need to see what this value is whether it's So I believe that has an attribute of checked. So I probably don't need the name on that, but let's whoops disposal
Lewis Benson: equals event dot Target Dot Chat, I believe is what we'll put here.
Lewis Benson: So it's not checked. Let me type and I didn't put in the name of it.
Lewis Benson: It is called disposal.
Lewis Benson: That's something I always forget is the name. Let's try that again. And I should probably add it to my console.log so I can actually see if it's working.
Lewis Benson: Check it. And we get I uncheck it we get false. So instead of value on a checkbox you use checked and it gives you a Boolean and it tells you if it's true or false. So that'll make the math a little easier since we're going to be using IF else statements and if they'll statements liked Boolean, they like bullions. It makes it easier to work with So next would be actually calculating out the cost so we would need to determine how much will it cost us? To create one of these roofs. So I'm going to create an object.
Lewis Benson: And we're going to say per square foot And this is just one way to do this. There's many ways you could figure this out. We'll do shingles.
Lewis Benson: I can spell shingles today. That would be great. I'll set this to five per square foot. metal
Lewis Benson: I'll set to 10 per square foot. and tile will be
Lewis Benson: 15 per square foot So we now have an object which assigned each of these to a price. And we can now use that for our comparison for our math. So if I look back at my index, I just want to make sure that I did spell tile metal shingles. And we have pile metal shingles. So those are all the same. So what I'm going to use is the value within here. And I'm just going to pass this value to this object so if I access
Lewis Benson: this roof type here. This has shingles. Let me just show real quick. I can say cost per square foot dot shingles. I got spell it correctly. Not shingles, and we get five. So I'm accessing that property name. dot square foot and this is also the same as what's being returned here. So the way this can work now is I can actually do cost per square foot and there's another way to access properties on an object rather than using a DOT you could put in square brackets. And then you can pass in a string. That's the name of the property.
Lewis Benson: And you get doing this and doing this or the exact same thing except this one will allow me to take whatever is being passed as my value and actually pass it into my object and get the number.
Lewis Benson: Does anyone have any questions about my Approach here and how I'm going to access the cost based on the value of what I'm selecting here?
Lewis Benson: Tomorrow if I type in some numbers here and ulate. This says metal. So if I do cost per square foot? And I pass in the string metal. I get the price of metal. So that's the idea behind how I'm going to actually get the prices. And use that the calculated out.
01:45:00
Lewis Benson: Okay, so we have our object of our prices. We have everything on our variables. So it looks like we're ready to actually get the calculation out and then we can print that to the page. So the next step is to calculate the total cost so we'll say let total equal cost per square foot and then we use a square brackets. And I'm going to pass in roof type. So remember this value is going to be either shingles metal or tile and because I'm using that square brackets, it's the same as typing in the string shingles metal or tile. So what this is actually going to be returning right now is either five 10 or 15 as a number.
Lewis Benson: And that's why I chose to use the values.
Lewis Benson: I could have passed the numbers into the values inside of my HTML And then this value would have been five 10 or 15. So if you prefer to go that route, you just change each of these values to a number and then you don't need the object. But I prefer using the object so that I can update my cost within my JavaScript instead of updating within the HTML configurations typically done in JavaScript rather than HTML. It's just for most developers go to make changes. Especially to calculations like that.
Lewis Benson: All So next we need to multiply that times the area.
Lewis Benson: And one thing to note is I need these to be numbers. So I'm going to put a plus sign.
Lewis Benson: at least in front of that one. Because we want that to be a number putting a plus sign here just converts it to a number. also do I int. And then put brackets around it you can do number. And put brackets around it. There's a lot of different ways to convert it a plus sign works just fine. So I'm just going to do that.
Lewis Benson: So We need to know what the cost of disposal is. So I guess we need to also determine that now. So to disposal cost five hundred dollars.
Lewis Benson: So what we need to do to determine the disposal we're assigning this currently to true or false. but we actually want to assign it to a number so I could say
Lewis Benson: disposal Before I do that though, let me comment that out for a second. I need to actually make a let Disposal cost I need a variable for this. And I'm going to initially sign it to zero.
Lewis Benson: And then we're going to say and we're just gonna say if disposal because this is already a true or false so Then I will say disposal cost. equals 500
Lewis Benson: and I could put this on one line like this without curly brackets if there's only one thing it's just like The Arrow function or I could wrap this in curly brackets if you prefer this syntax. Either way, this will work the same. So if disposal is true. It'll be 500 if disposals false. This will still be at zero. It won't be reassigned to 500. So that's the idea there. So that was the next thing we needed to add. So we'll just do plus disposal cost. It'll either be plus zero or plus 500. So there's our total cost.
Lewis Benson: And then the last thing we need to do is put it on the page. So we have our total cost. I'm going to put this to fix two decimal points. Let me look at my index here. Where do we want to print this out to?
Lewis Benson: Under the form. I'll create a do. and we'll just say ID of total cost and this is where it'll be printed too. So I'm actually gonna put a comment here and say
Lewis Benson: JavaScript printing total cost here And I'm just going to append child to this ID. So let me select that. I'll select at the top here.
Lewis Benson: const
01:50:00
Lewis Benson: What we call that, m I forgot I call it total cost. I'm going to total cost output because I already have a very called total cost.
Lewis Benson: total cost output equals document dot query selector And then I'll pass in. total cost output
Lewis Benson: and then I'll just have to do.
Lewis Benson: But it's not less. Sorry. I'm going to look a few there. It's total cost output Dot. intertext
Lewis Benson: or sorry text input X content, that'll work. Maynard text wasn't coming up for some reason intertext equals total cost what I'm going to do this as a template literal so I can just put a little string there. and say
Lewis Benson: I could give the whole breakdown of this You could say for a roof. with an area of
Lewis Benson: dollar sign curly brackets area the cost will be
Lewis Benson: dollar sign curly brackets total cost
Lewis Benson: So, let's see if this is all working. I would expect to see that number being output to the page. No, I didn't append it to the child yet. So that's the last thing. no. No, we're good. This is already on the page. So this should work. shingles say 400 square feet include calculate for a roof with an area 400 the cost will be 2500 dollars. So it's working. The Styling is something to be desired here. You could lay this out and a receipt format where you could break down Let's see if that actually works there too. Yep, so we can see that 500 is being added and taken away.
Lewis Benson: So that's all I have for. This little demo here. Does anyone have any questions about this at all? Any of the thought process was confusing or anything want me to explain?
Lewis Benson: And again, this is just a really good way to implement JavaScript onto your Capstone projects. Think if I like a calculator like this something you want to calculate maybe you make a pizza shop and you can set up different toppings with different prices and you could add up all that stuff on a side page. If you don't want to implement something like this, you could also try to implement maybe a comment section. It wouldn't be wrong. It wouldn't. Be persistent, but you can make it so you can write comments on your page if you wanted to kind of like a mock chat service. Just as long as you have some sort of JavaScript implementation on your project that is one of the requirements for the Capstone. You need to be able to demonstrate that you're able to use JavaScript effectively. As well as HTML bootstrap and CSS.
Lewis Benson: So pretty much everything we learned in the past. Six weeks you'll want to demonstrate on your Capstone projects. So anyone have any questions?
Lewis Benson: All right, no questions. For the review on this because we went over two different things.
Lewis Benson: As far as practicing with deployments go on. Basically as you're build your projects out on a repo then you can ACP wherever it is you're working on that'll give you the project with the terminal the practice with the terminal deploy your sites that will give you practice with the GitHub pages and kind of keep it fresh in your mind how to deploy through GitHub pages. You could also do. If you haven't already you can go back and do the first contribution assignment our exercise that we went over earlier on. Where you go to that first contribution GitHub page and Fork the repository. Add your name in and push it all up.
Lewis Benson: And we also have the schools. The JavaScript on W3 schools might go a little bit outside of the scope of what we learned so far. But that's not a bad thing. It's always good to try to push yourself a little bit with this and learn as much as you can.
01:55:00
Lewis Benson: Here they have examples. They are using the VAR keyword. Don't worry about that. We know to use Latin const. for these exercises Let's see they got. variables operators functions I believe this is the click event. So I haven't actually shown this. You can actually do. on click inside of your HTML and what that'll do is it'll add an event listener through your HTML. That is an option you can also do on change which I can't fit all that text in there right now. But that would allow you to actually update these calculators live. and the way you would make that kind of work is We see here. I could say.
Lewis Benson: on the select on change I'm just gonna put a
Lewis Benson: equals and then you pass in a function, but it's just passing a console.log. And say value change like that, so you can actually write JavaScript in these quotes with an on change. You should see results. if value changed and where that's useful is if you wanted to update this in live every time you change a number you can make your calculator update that value using that on change like that. It's not the most common way to do this. But it's not a bad way to go about it too. So that's kind of what they're showing there. So if you do go through the W3 Scrolls
Lewis Benson: you'll probably run into some stuff that we didn't cover JavaScript is huge. There is so much stuff that we didn't get into big and We did Cover a raise that you can check out their array methods here. They have quite a few here. They have something that we didn't cover. They have some that we did Cover. So this is still a really good resource one of these I would advise going through and trying to complete. Everything in here as you can see, this is a lot in here, but make it a goal that you complete all these tutorials. And actually make all of this stuff work. The more JavaScript methods, the better off you are especially array methods and string Methods are absolutely huge when it comes to
Lewis Benson: completing any sort of Challenge and figuring anything out code challenges interview problems anything like that? So check all of the stuff out. There's lots of different practice stuff on here. And also make sure you're getting caught up on your assignments. That's the big one this week. We want to get as many assignments turned in as you can. Don't hold back on that and if you're stuck on anything at all, that's the time to ask because we can help you get through this and understand that way when you do work on your Capstone. You can do it with confidence and actually build something really nice. You want to be able to Showcase this Capstone to an employer so We're going to be going through and seeing what you build. We're going to be looking at it live. We're going to be seeing your deployed site. And if it doesn't look like something you would want to present to an employer.
Lewis Benson: You might not get the best grade on it. So make sure that does look good. Even if it is simplistic and you want to make sure it includes everything. You will have a week to work on it. If you do finish it early, then just keep fine tuning it add more content add more pages if you get yourself A really good working page you could always add in about page that it just talks about you instead of talking about the page itself meet the developer that type of thing. there any questions at all about What we're working on right now in the breakout rooms.
Lewis Benson: or any questions about anything
Lewis Benson: Yes, Omar.
Umar Z: You just wanted to ask. Our classmates that did anybody else get a chance to register for the JPMorgan program and get into one of their webinars?
02:00:00
Gregory Robertson Jr: No, I did. are the
Umar Z: Get what was the takeaway from it? I mean because I think according to them according to their requirement. We are on a very basic level right now according to my understanding, but I wanted to share with you guys and want you to share now. They're slides with Lewis as well. So just maybe to have an idea that if we can apply for we can submit a resume because the application process is going to start in a week or so and from December to 13th of January something like that and after that they're gonna start
Umar Z: Interviewing and Court challenges and stuff like that. So I wanted to know what are those platforms and I have written them down. what are those platforms what are their basic minimum requirements? I can share with you whatever the slides say. So If Lewis, yeah, …
Lewis Benson: Yeah, you won't take the screen over.
Umar Z: That's a problem. I have it on my phone that I took a screenshot on my phone so I can only read it to you. I cannot.
Lewis Benson: Can you put it in the class Slack? Are you have slack on your phone?
Umar Z: that's a good idea. Hold on. I think I have it. Let me open it.
Lewis Benson: Yeah, that's actually really great that you brought that up. Thank you for sharing this.
Umar Z: Yeah, I have lack. So what DMS go to DMS direct messages.
Lewis Benson: You could put it in DMS or in the October cohort Channel…
Umar Z: I talked about cohort.
Lewis Benson: if you like.
Umar Z: Yeah, I have it. Okay, so just make an American attachment here a picture attachment. That's it. Okay, let me do it.
Lewis Benson: Yeah.
Umar Z: I'm doing it right now. Love access to my pictures. There you go. so the pictures Okay, one two three. four five six Yeah, so I think I have seven screenshots. Let me share.
Lewis Benson: Okay.
Umar Z: So at least we can discuss this thing how to start preparing for it. Even if you're not get selected up, please we can get into the process, and learn how to handle interviews and all that.
Lewis Benson: Absolutely. Yeah, this is really valuable stuff. Let me bring this up on the screen here. We can get into the so you just took screenshots of the slides,…
Umar Z: Yeah, yeah.
Lewis Benson: I was there any of these specifically that you wanted me to look at I?
Umar Z: I just bought these are seven slides. This is the whole process that we're describing it. Yeah, so we can go through every slides lighting one by one.
Lewis Benson: Okay.
Lewis Benson: All So this is a actual job position. It's not an Two year non-rotational development program with program management support and mentorship. So it sounds like You're going to be getting trained.
Umar Z: So no,…
Lewis Benson: It sounds like for two years. Is that how they explained it.
Umar Z: they explain it that it's gonna be actual job, and yes, there will be providing some training. But then they need something from us a certain level of understanding so we can also be working on our own. That's what she said.
Lewis Benson: I Okay and is it a time frame or is it just you have to prove that? what you're doing?
Umar Z: A time frame over what to get hired or when you are on the job. so yeah.
Lewis Benson: how much experience it required do they have a
Umar Z: Yeah, that's a good question. so when I applied for it when I register for it, I mean, so the option was which I choose experience from zero to two years. So they know these are the beginners and I think in one of the slides it says that they're not taking anybody which is enrolled in University programs or something like that. So they're looking for people coming from self-taught people or coming from boot camps. So the expectation is like that,…
Lewis Benson: Okay.
Umar Z: .
Lewis Benson: Got it. Yeah. Q&A Are these in a different order than?
Umar Z: These are the so I just took the slide just so their own employees. this is the minimum requirement. Okay.
Lewis Benson: All right. So authorized work in the states not currently enrolled in a full-time undergraduate or secondary program finishing core technology training such as a boot camp or Workforce Development program by 20 February of 24. that would be so yeah, you would have the first level by then for sure. You'll be in level two at that time, but they may be okay with that. You'd have to see.
02:05:00
Umar Z: I could have asked this question to them, but they just only took four questions at the end of the webinar that they only had time left for four people and they randomly picked four people and that's so not everybody could ask questions.
Lewis Benson: Yeah. Yeah. Okay, so funder foundational knowledge of object-oriented programming languages such as Java Python and sharp. That is something we don't teach any of these languages at codex.
Umar Z: So Jr. Is different the JavaScript as you said..
Lewis Benson: Yeah, their apples and oranges Heather. In fact JavaScript was originally called ecmascript and they renamed it to JavaScript to just try to get Java developers to start using JavaScript because they thought it would entice them.
Umar Z: Mm- Yeah.
Lewis Benson: But they're completely different languages. But when the fundamentals of JavaScript python would be very easy to pick up. It's so similar to JavaScript as far as the methods go and a lot of the way it's like build out. And it's object-oriented program programmed, but it's you can also do a functional programming with python so you can do either or which is very similar to JavaScript in that sense. So when you get down JavaScript, I'd say you're probably have the fundamentals at this point. You could probably learn the fundamentals of python in a week self study.
Umar Z: If I remember it correctly, I think I remember that she mentioned that they should have the basic knowledge of JavaScript because she said a lot of programming will be done in JavaScript. I remember the word JavaScript so Yes. That's what we're working on right now. That's why I remember it. She meant it was yes.
Lewis Benson: Yeah. then if you wanted to brush up on some python before you went into some of this you could the send like I said,…
Umar Z: Mm-hmm
Lewis Benson: the syntax is so similar the
Umar Z: You told me you show us I think a couple of times I remember it's very similar. Yeah.
Lewis Benson: Yeah, just the way you think about it as this is the same and then you just use indentation instead of curly brackets for most of it.
Umar Z: Yes.
Lewis Benson: Yeah, it's very easy to pick up foundational experience using Version Control Systems. You're using GitHub so you should be good there. basic understanding of Data structures unit testing and algorithms. This isn't something we get into until Level 3,…
Umar Z: Okay.
Lewis Benson: I believe. We might do a little bit of nosql databases, but they're probably referring to SQL databases.
Umar Z: Nothing, they mentioned sequel. Yes. You're right.
Lewis Benson: Yeah, that's not very common that anyone would even mention no sequel because it's such a niche thing. They're really good for small web applications authentication and things like that, but for big data sets, it doesn't scale. It skills horizontally where you make more tables. But it doesn't scale vertically. You can't add more computing power to make it faster. So when they say data structures, they're going to be referring to things like linked lists arrays objects cues Stacks. So you've just scratched the surface on data structures at this point. You got objects on arrays, but there are so many more. and JavaScript doesn't use that many data structures because The way it's so loosely typed you don't need them. You can use Arnold Ray to do a queue.
Lewis Benson: Also a stack you can use an array for a stack which those are two different data structures and other in all the other languages. You can create those data structures and JavaScript if you want to really efficient program, but again, that's not something we get into until three actually data structures. I don't think we get into level four. Unit testings and level three that would be whenever you write so all that code I just wrote. You would write tests that would say yes. This is going to be the output. So for example if I put in certain values in my forms, I would write a Javascript file that's only job is to determine no matter what values I pass into these forms. I'll get the expected results. So it's not going to pass in any errors. So you would be writing tests to actually test your functions in JavaScript.
Lewis Benson: And you would pass in a whole bunch of not use cases, test cases. so for our function that takes in a string you would pass in a whole bunch of strings and just test to see how your function responds and that's what that's referring to there. Algorithms. This would be the way you solve problems is the best way to explain it. So
02:10:00
Umar Z: Yeah that in few interviews available marketers available on YouTube. So yes, they throw a scenario and that the candidate they had they have to come up with an algorithm to solve the problem. Yeah.
Lewis Benson: yeah, and a lot of people are intimidated by the word algorithm. It's just a series of steps to solve a problem. And in fact, I actually verbally gave you an algorithm on how I was going to solve that little math problem. I did and let me open up my code there real quick. of the algorithm to solve this problem here was first to get the values from the input fields. And then determine whether this is zero or five hundred and then I needed to multiply this times this plus that so that's my algorithm. I'm not really wording it in a very fluid manner if I wrote it down and wrote out the step process on how to get a total cost. That's an algorithm. that's what they mean. It's just a series of steps to solve a coding problem.
Umar Z: It's all the problem. Okay.
Lewis Benson: Yeah, it's just a fancy word. That means that of times when you're dealing with code. A lot of times you have loops and an algorithm could have a condition that says as this iterates check for the condition. Is it It's not true. Go to the next iteration and continue that until it's true. That's a different type of algorithm, but it works the same. It's just a series of steps to get a solution. The rest of these look like they're soft skills.
Lewis Benson: So yeah this right here would be the hardest part you could learn this stuff. you could start studying up on this stuff on YouTube. You said you had some SQL experience?
Umar Z: I had some SQL experience here. So maybe I can just get into it again a little bit. But even if we don't have Whatever they're looking for a minimum requirement. I mean we can at least try if we can get to any stage of the interview,…
Lewis Benson: Absolutely.
Umar Z: for learning curve for future interviews, even if you fail this one.
Lewis Benson: Yeah, I was just kind of going through everything in here so that you're familiar with it during I would definitely apply if you can discuss some of this stuff. Maybe say and you have room to grow in this area.
Umar Z: 
Lewis Benson: I'm wording it like that might be enough to get you past that point I got room to grow on unit testing. it's all my list to learn. I'm working on it. I'll be sufficient at it soon enough, and then you just move on from there. Let's see. What else we got on here.
Umar Z: So this is across this year. So we need to also discuss this thing to please.
Lewis Benson: Did you want to talk about it?
Umar Z: No, no, you go ahead and
Lewis Benson: Okay. So application opens December 13. You're applying online through resume. They have locations. Apparently, I haven't seen their actual.
Umar Z: application like which city is Jersey City is Delaware is Houston Plano, Texas and Columbus are something like that.
Lewis Benson: So you'll update your resume to include multiple coding projects. So you'll want to build some stuff out then for that and include those in your resume. I don't have a sample resume to show you at the moment if I can get one put together though this week.
Umar Z: Whatever we have done so far.
Lewis Benson: I'll do that. Basically, you'll just have a small section.
Umar Z: I mean or at the way we're gonna be working on a Capstone product so we can showcase all of our progress on GitHub and share that with them or no. That is two basic for them.
Lewis Benson: It wouldn't hurt to share your GitHub profile. You could throw that on your resume as well. I believe most developer resumes will have their GitHub Link at the top of the page and they're like contact stuff. You'll have your LinkedIn up there your GitHub your name your phone number and your email. You could throw it in your projects. if you feel like it'll help fill out space on the resume, but I would probably just build multiple variations of different Capstone ideas. So a portfolio perhaps build an commerce website and then maybe build some sort of music site that you're a fan of some band and you can put the artist on there and just make it a fan site and include all that functionality that we covered and make it Capstone level. Once you build one Capstone, it should feel pretty well easy to build another one.
Umar Z: Yeah, yeah, you're right about that. Yes, of course.
Lewis Benson: Yeah, so you can get multiple coding projects and probably a couple weeks. But again, December 13th that's coming up very soon. So you would have to definitely started
02:15:00
Umar Z: Yeah, but the last date it's gonna keep going on for a month. It's a Jan 13th is the last day to apply but she's
Lewis Benson: yeah, that's plenty of time.
Umar Z: Yep, so that's what I was thinking maybe somewhere in the beginning. January first week or something so I can apply there and meanwhile I can get my stuff ready.
Lewis Benson: Yeah. I'm not familiar with this hacker rank platform. This sounds like it's something similar to code Wars.
Umar Z: Yes something that's what the day you have to just completed. And then if you complete this, then you'll get to the second stage, what is that super day final interviews?
Lewis Benson: Is this something you've heard of Brian if you there Brian?
Lewis Benson: I know he was going through some. Stuff like this. I don't know what platform it was on now. So yeah, this are here super day finals invitations email. So this is where they're gonna email you code challenges and…
Umar Z: …
Lewis Benson: it sounds like Or technical interviews. Yes.
Umar Z: they'll be two interviews. He said she said it's gonna be same day. so you should stay two hours for that. So I thought I know it's gonna just go beyond 40 minutes in most cases it does so she said two hours it's gonna be two interviews in the same day.
Lewis Benson: Got it. I'm going to share a resource to.
Umar Z: And then that's it.
Lewis Benson: Let me see if I'll find out Sarah and a resource here in a bit on that. for It'll help you solve whiteboard coding interviews.
Lewis Benson: Actually, I think I see it.
Lewis Benson: Yeah, I'll come back to that in a second. So this is coding challenge that I go to the next slide.
Umar Z: yeah. Yeah this is the next slide. So they're here. They're elaborating a little bit more shows where you gained your coding skills, like our school online learning scoring boot camps include multiple coding projects or Technologies And any additional technical certification which we don't have right now anyway list any leadership or extracurricular volunteer experience, It's selected hacker rank assessment will be sent via email within 48 Hours submitting online application. so we have to pass this hacker ranking, but whatever this is in 60 familiarize your serving haircut Ryan take practice challenge Keep track of time.
Umar Z: Try your best to please them both. yeah. Yeah. Also, she said there'll be two questions so you can divide your time 30 minutes each but it's not mandatory that you have to do what 30 minutes if you can attempt one in 20 minutes or 15 minutes. So yeah, then you can give more time to the second person. So it's It's hard. It's only depends how you prioritize it,
Lewis Benson: Got it. so yeah, that's pretty interesting approach there. And then I'm assuming too if you do run out of time, but probably doesn't fully disqualify you if the other candidates also ran at a time.
Umar Z: That might be the case. Yeah, you're right. Yeah. As you mentioned ones that sometimes they just want to see how the Euro Pros toward the problem even if you fail but your approach sometime passes in their eyes so they can give you a chance in it.
Lewis Benson: Yeah, I'm gonna share this resource here. I got this to load up. I'm just gonna drop this in a slack real quick and then I'll bring this back up again.
Umar Z: Sure.
Lewis Benson: So this is a YouTube video. It helps you with coding interviews. I found this to be a very valuable resource when it comes to this type of thing. so I'd advise watching that a couple times and memorize that process and it can really help you get through the coding interview Okay,…
Umar Z: Yes.
Lewis Benson: let me go to the next one here. So this is the FAQ again. We know it's not an apprenticeship.
Umar Z: So yeah, so I know this so she said what happens after the two-year program and so she said either you will be promoted depending upon your performance or you'll just continue in the same, field in whatever job you're hired in the beginning. you'll continue in the same role. I mean and do you priority location assistance? She said no can apply even if I don't know She said yes, you can apply. So that answers the question what team will I join when I start so she said ver whatever your first preference is the location. Let's go somebody picked Houston. So she said that we will consider that if selected so we'll post you in Houston, And once you start in one office a girl she asked this question the mid program. I mean during the
02:20:00
Umar Z: What you call it two year program can we switch offices or switch cities or locations? She's not know that's not gonna be happening because you'll be with your manager. And if the manager in the same city, then you will be staying in the same city. So at least for first two years, you will not be changing the offices,
Lewis Benson: Okay, that makes sense.
Lewis Benson: Have a good night, Ryan.
Lewis Benson: So you're familiar with the team system then?
Umar Z: Team system what sorry second.
Lewis Benson: Yeah, so what team will I join when I start does this based on your location or?
Umar Z: Yes, it's based on whatever location you choose during the application process. Whatever city is closest to you. And it provides so you'll be positioned that City.
Lewis Benson: Okay.
Umar Z: Let's pause use 10 or Jersey or Delaware. Whatever.
Lewis Benson: All right, and they is this an engineer position?
Umar Z: no, they call is a software engineering. this is just basic front end. But whatever we are studying is the same thing.
Lewis Benson: Okay.
Lewis Benson: Yeah. So engineering is like designing the software planning it and designing it and doing how it's all going to work and everything.
Umar Z: Appreciated mention any such thing.
Lewis Benson: Yeah, so for example that page I just build that's technically software engineering because I thought up the algorithms for I didn't have any plans for it. So that would be there software development is…
Umar Z: I think
Lewis Benson: where you have a plan of how you're going to build it. You're following a design and you build to the specifications that you're told to build it to.
Umar Z: I get it.
Lewis Benson: so they're basically the same thing in a way but They're kind of different. Especially when you get into full stack software engineering you're going to be designing the database structures. how to structure all the tables where to put all the relations at you're going to be designing the server Logic the algorithms that are going to handle all of your data coming in from that software engineering if it's just front end though, then software engineering and software development are pretty much the same thing.
Umar Z: Okay.
Lewis Benson: All right, and then there is a R code. Anyone can access this through the slack too. So if you need to QR code, it's there in the select Channel. So that looks like it's all the slides. I think we hit them all we hit this one.
Umar Z: Yep.
Lewis Benson: Yep. at Gregory
Gregory Robertson Jr: So let's say I want to wait till on their motor on properties or wait on for more opportunities and stuff like this. Is that okay to
Lewis Benson: What do you mean?
Gregory Robertson Jr: I just want to on weight I learn more on software. we will be learning now. So on plastic like they okay…
Lewis Benson: It's okay…
Gregory Robertson Jr: if I wait. they
Lewis Benson: if you wait, but I wouldn't hold yourself up on a certain knowledge breakpoint. once you learn the fundamentals and foundations of software development You don't really need to know for example, if you were going to apply to a C sharp position. We haven't taught you see Sharp, but that doesn't mean you can't apply to do a sea salt C sharp job. I actually know several That had zero experience with that language and they're working as C sharp Developers. I see that all the time. It's just they want to see that you're capable of learning and they want to see that you have a good thought process on problem solving and beyond that what you currently know isn't as important is how you can learn things. So if you can show that you were able to feel free to dive into an opportunity like this because you get on the job training. And whatever we're learning here might be completely different.
Lewis Benson: To what you learned there? So you could specialize in a different language as well.
Lewis Benson: so it's up to you if you want to feel free to wait, but I'd advise jumping on any opportunity you see as early as you can just because it takes a while to get through a hiring process. You see how many interviews are in this one process here? Does that answer your question Gregory?
Gregory Robertson Jr: Yes.
Lewis Benson: alright
Lewis Benson: Alright, yeah, so that's a really good thing. You brought up there Thank you for sharing that. is there any sort of gate to this anyone who wasn't in their original seminar they able to still apply to this? I believe this was shared in the general chat. initially
02:25:00
Umar Z: Near overshared this information. Yes.
Lewis Benson: sit here. Yeah so this isn't the general chat. There's this link here. I'm going to put this in our class slack as well. So that this is Fresh So anyone who wants to take advantage of this opportunity feel free to look into it. If it doesn't really fit your area. Then you that you might have to relocate or if you're not willing to relocate then maybe this isn't the right opportunity yet. But if this fits for you go for it because this looks really good. Getting an opportunity like this really cool. because especially since it's a full-time job rather than an internship on the job training and You just have to show your willing to learn it. It looks like.
Lewis Benson: Yeah, and then this video here, it's a great tool for. Interviews and whiteboarding your code challenges out. And that's actually a common thing. So I'll just show that real quick while we're here, too. I'm gonna bring up figma.
Lewis Benson: A lot of times you'll do this remotely on these whiteboard interviews. You'll do it through a Google meet or through a zoom call or whatever platform they want to use and you'll go into a whiteboard platform like this. And this is basically where you start the whole interview. And typically what I would do is use these sections. And I'll create a section for where I'm working at. So first thing I'm gonna do is put the problem here. And whenever they give you whatever it is, you're trying to solve I'd place that text in here and just repeat it back to them. So if they let me start off right already function that makes and a spring
Lewis Benson: reverses the string So this is the problem we're going to write a function that takes in a string and reverses the string. So then I would do. input it takes in a st outp it returns a string and then I would give an actual example of that. So if I named this function reverse string what I would expect to get if I pass in the string. Hello. is o
Lewis Benson: l l e h so as I'm in the interview, I'm actually doing this live with them like I'm saying exactly what I'm saying right now. So here I'm invoking the function. I'm passing in the string and this is going to reverse the string and return a new string. So it takes any string and it returns a string. So you want to be a specific as you can. And then once you get the problem done. And you give them the input and output then you actually have to draw it out and show them what that would look like. So you would take your text and you might have several letters. This one's kind of hard to think about your shapes. Just to kind of represent strings because they're a lot larger. And then we can C control V.
Lewis Benson: And I'll just do a four letter one. and then in here I can put a B c d now each of these represents each index on a string so this would be my string here. a b c d and then each of these is each index of that string. So the way we need to reverse this is first I would have to split it into an array. So I would demonstrate that with a line here. Saying that I just split the string into an array. So now I can actually draw out an array using. I could use this table.
Lewis Benson: And shrink the table. The only has two so that's not going to work. I'll use shapes.
Lewis Benson: So we'll C control V. It didn't let me.
Lewis Benson: So now each of these represents an element within the array. and then we would use a B c d so I'm drawing this whole thing out so that we can see all that works and then I would call the reverse method. So I'll just write that right here. reverse
Lewis Benson: and this reverse is an array. So then I would take this duplicate it and then show the reverse version of it. Again, you're doing this in front of an interviewer explaining your thought process and how all of this works.
02:30:00
Lewis Benson: So there's the reverse string. And then you have to join this back together into a string because we're currently in an array. And then you would use the dot join method to do that. So I'll just write.
Lewis Benson: dot join and to pass in an empty string so that it doesn't put anything in between the letters. And then once you get that, then you have to write out your actual algorithm. Which would be declare a function? Set your parameter of string set your return to whatever the string that's being passed in is. very split All the reverse method on the string return the final string. So that's how you would write out your algorithm and then you would actually write the code in here as well and the cool thing about figma is they have actually
Lewis Benson: things in here to write code so you can write your in a code block on figma. Most white drawing applications don't have this but you don't write it out in here notice. I don't actually get any autocomplete. So you have to be careful.
Lewis Benson: So you'd be my string. Put the name of my function.
Lewis Benson: reverse string and then this returns a
Lewis Benson: Reversed version of our original string so I'll say reversed. String which doesn't exist yet? and then my string not split
Lewis Benson: this method turns it into an array. You put that into a variable.
Lewis Benson: And then we would want to reverse it.
Lewis Benson: reverse string equals array Dot reverse
Lewis Benson: and then we would want to rejoin it.
Lewis Benson: And then return it like that and that would be the completed solution and then you go over any test cases. The efficiency of it all that type of stuff. So using that YouTube video they kind of show you how to do all this but I wanted to show you kind of realistically what this process looks like in case you do get into a technical interview. Just so you have some familiarization if you are required to do a whiteboard interview. So this is what they expect to see is you actually draw the problem out. You would actually write your algorithm out step by step. So you can do that here also, sometimes they don't care if you use pseudo code instead of actual JavaScript. So if you're not that confident with the syntax. You could write this we're in a pseudocode way. And if you're not familiar with pseudo code there's your tutorials out there on that. Let me put the algorithm here.
Lewis Benson: Put our text in. one declare function step two Set parameters. step three declare array, variable and split
Lewis Benson: the string step 4
Lewis Benson: using reverse method five join string back into
Lewis Benson: this should be a red or array back into string six return new reversed string so there's our algorithm. These are the steps to solve the problem. If they told you you weren't allowed to use the reverse method, then you would have to do this through for Loop where you would add each letter into an array. You could do that with the shift method so that it puts it in the front of the array. And then you could join that back together that way if you weren't allowed to join, then you could use an empty string and still use a for Loop and push everything together. But if you were using one of those approaches you'd have to show all of that here as well. I just went with the simplest way just for time constraints. Does anyone have any questions about this? Hopefully somebody found this interesting and useful.
02:35:00
Lewis Benson: This is a common practice when you're doing an interview to actually draw out a problem like this. And I know this looks a little messy. Typically you have about an hour to do a problem like this. And then you have time to go straighten us out a little bit and make it look a little better. Maybe make these actual straight lines instead of these crooked ones. things like that
Lewis Benson: Yes no more.
Umar Z: So any idea like how many of such questions are asked in an technical interview because it takes of course much time. So maybe a couple of questions not more than that? But they just knowledge and capabilities.
Lewis Benson: They're typically.
Lewis Benson: I would say they would typically only ask one or two questions. Typically a question isn't going to be as easy as this one.
Umar Z: No, I know I've seen a few videos and questions are not that easy. So that's why it takes ever even longer time to figure that all the coding and all that.
Lewis Benson: Yeah, and then also explaining it and I still didn't even go over everything that you would do in the technical interview. I got to the code Point kind of stopped. You would also want to do. a block for edge cases and all of this is explained in that YouTube video. so I would put stuff in here What happens if they don't pass in a string? What if they pass in a number? so check for number If not a string return minus one, this is a common return type. If something went wrong typically minus one means there was an error.
Lewis Benson: You could also return a message and at this point you would want to ask the interviewer. What would you want me to return if this was passed in a number? What do you want me to return if the function was called with? No parameters what if there's a null but in there? What if it says the wrong data type all this type of questions you want to ask the interviewer when you're working on When you're still writing down the problem. So you could put your edge cases down at that time as well. Once you have all the edge cases down, you have to prove that it works through a visualization. So typically what I do for that type of thing is a truth table. I'll usually draw it out with a pencil. So I'll make a line. And then I'll make another line.
Lewis Benson: almost every problem I've ever been given I had to use some sort of loop or iterator. So I would put my eye for my eye for Loop. So I know which iteration I'm on. And then over here, I would put the string being reversed. So I'll just put string and what is current value is.
Lewis Benson: And this isn't going to be the neatest I normally do this with a drawing pencil. I'm not very good at drawing with a mouse. And then you could also just use the text thing here if you wanted to instead of writing out like that. So you could say zero so just a huge.
Lewis Benson: And then maybe change this one to one so you can see how long this takes just to get this kind of build out. So there is a lot of time constraints here. So an iteration one or string would look like one letter because if I was doing for Loop my return string would have Just the letter. o on for Loop on the second iteration it would be
Lewis Benson: O l. And then I'd put a 2. And I would be explaining this is if I was doing the same problem, but with a for Loop, I'd be explaining each step for Loop. You don't really have a way to use this truth table thing. So you would just have to kind of show it In a more practical way, maybe go back to your drawing and explain exactly how it works. Because the reverse method only works on an array. So you first thing you need to do is turn to turn your string into an array you're using the split method and so you could write the word split right here.
Lewis Benson: And you also have to pass in. What character you want to split it on? If you're not going to split it on a character you just pass in quotes. And that just kind of represents that this is being converted into an array because this was circles and this is squares you explain to the interviewer that wherever you see circles either the index values of a string where you see squares. These are index values of an array and then these technically should be circles again because this would be back to a string. So I'd want to change these to be a circle instead of a square
02:40:00
Lewis Benson: so that makes sense as far as how that process would go.
Umar Z: Yeah, it does. Yes. Yes. looking up thinking that we need really sorry.
Lewis Benson: Yeah, so again.
Umar Z: We really have to have a good grasp of our knowledge of our topic which we are discussing. Because if you don't understand ourselves properly, then we cannot explain in simple words to other person. And in order to get to that state, I think we're gonna need some little more time because we are on basic level right now. So what do you think on what level two stage three will be able to
Umar Z: Will be on that level where we can Express oursel properly and have all the required knowledge. maybe I'm wrong. I have trying to have a Year,…
Lewis Benson: You did say that.
Umar Z: I mean,…
Umar Z: .
Lewis Benson: You said this was zero to two years. So sounds to me like they're not expecting everyone to be in a two-year expert in development.
Umar Z: Yes, yes.
Lewis Benson: In fact, if you have two years of experience and software development, you could technically be hired as a senior developer at that point.
Umar Z: It's exactly exactly.
Lewis Benson: the entire industry shifts every two years so
Umar Z: Yeah and practical environment two years is a lot of time you learn a lot of things that there gives you a whole lot of confidence,
Lewis Benson: Absolutely, and especially two years ago. We were using completely different we were using jQuery now we're using react. So if you stop developing for two years and came back into it you'd have basically relearn everything…
Umar Z: 
Lewis Benson: because the technology shifts so often And that's why I keep showing you W3 schools and mdn the group strap documentation, even like using YouTube. I sent you that video there in the chat this stuff changes. So dynamically that you're always having to continuously learn it forever. You might get into a position where you're using the same technology for three four years the entire industry around you is Shifting. So if you go to move positions, you'll have to learn the new tools that everyone's using.
Lewis Benson: So it is challenging in that and in that sense. That's why a lot of times developers are always building their own little projects and stuff on the side so that they can stay sharp with this stuff.
Umar Z: That makes sense. Yes.
Lewis Benson: And if you get into a position where you're really comfortable with you don't necessarily have to do that. You'll know the fundamentals of programming. So learning all the new tools doesn't take long.
Lewis Benson: And that's the most important thing like learning how to learn is I know that sounds a little odd, but learning how to read documentation how to navigate say bootstrap is a good example because most documentation is set up like bootstraps. If I were to go to documentation for I'll just go to next.js's documentation. You'll see what I mean.
Lewis Benson: And this is a framework that you've never seen before but look we got to getting started and we got to learn next JS. If I open up I'll get bootstrap. It's going to be very similar to that. so
Lewis Benson: we can see what we got a very similar layout here just in the splash. If I go to the docs now here on the left is all of the stuff that you'd use look we got components. And it's pretty much laid out the same way as bootstrap is so you learn how to read one set of documentation and everyone kind of uses the same conventions across the entire industry, but you got to get good at navigating them and understanding them they're getting started. If I go to here I go to read the docs. they should get started. So it's very similar. we look at each one and it's setup basically the same way across the two now. These are very very different things. They do very different things.
Lewis Benson: So they're gonna have a lot different content in them. This is a JavaScript framework and this is a CSS framework. So obviously the content's going to be different but just look at the structure here We got to scroll bar here. So again in turn just learning how to navigate through. This is the most important thing. I'm learning to read documentation. That's the key to being a good developer. Is being able to navigate through this stuff?
Lewis Benson: don't worry about it. if you get in a position and you get left behind on the tolls. Because once you master documentation and reading documentation, then you don't have to worry about it anymore. you just go in and say Let's see this new tool. Right. they're getting started. They even have tutorials on here. If I go back to their home page learn next Js. and start learning and it's showing me a sample application that they made with next.js. So it has everything you need right here on the docks.
02:45:00
Lewis Benson: This is to install how to set up your folder structures these are all the folders that are required for it. So again, just reading documentation. That's essential. anyone have any questions I know we've been kind of off the topic of JavaScript here for a while, but this is still really good information and the ultimate goal here isn't really to Get a high grade on your assignment is to get a job and the software development industry. So if anyone does come across anything like this. Make sure you bring it up. We can go over this type of stuff because our goal is to get you hired. It's not to make sure you're getting your 20 out of 20 on a quiz.
Lewis Benson: We do want you to still do your assignments just because we need to see that you're understanding the assignments. And if you don't do the assignments, then we don't know if you actually understand or you won't even know if you understand. If you're just following along in the videos and you think it all makes sense. It's completely different just watching a video versus building out the application. So we still need to do the assignments. That's not what I was getting out that. It's more important that you're learning the material and getting hired at the end of the day.
Umar Z: Yep, definitely is because once you start adding code on your own your mind is blank. It's like I don't know what I'm doing here. Right just
Lewis Benson: Yeah, that's the way I went through the same thing. I did a year of self-taught where I would watch videos on YouTube and most of the time I was like, That makes sense. I'm following along everything. He says makes sense and…
Umar Z: Maybe that's when you actually learn when you make them.
Lewis Benson: then I go to write it and it just doesn't work like nothing works.
Umar Z: You have said it so many times that when you get into some sort of trouble problem,…
Lewis Benson: yeah.
Umar Z: then you learn actually to fix it.
Lewis Benson: Yeah, I've learned more from mistakes than I've ever made learned from watching videos. Then there's times where I've ran into complicated bugs where I'm trying to build some sort of application. I'm probably going about it in the wrong approach or something and I'm done 700 lines of JavaScript at this point and I start doing research on why doesn't this method do what I think it should do and I'll spend an hour researching different methods and different callback functions before I know what I've learned 30 different things and I haven't sold my problem yet. So it's very good way to learn is by breaking things. and there are times too where I solve the problem and I have no idea why what I did worked and I learned completely unrelated Concepts on the way, but that's just the way this industry is like you'll find it sometimes you'll have your code work and you have no idea why.
Lewis Benson: And that's a good time to start trying to figure out why too. start learning under the hood of what's Happening. why did that work? maybe the browser is doing something different. So sir doing some research ask questions on stack overflow. But you don't have a stack Overflow account. I would recommend making one. Just go to their website real quick.
Lewis Benson: I just went into a weird search thing.
Lewis Benson: So you can make an account on here. And actually ask questions.
Lewis Benson: I like a little thing there.
Umar Z: Yes, either. Okay. I'll just for myself here.
Lewis Benson: Yeah, so You just join Community sign up with GitHub. I believe I already have an account on here. But you can ask think whatever question you have you don't know why your code works. You can share it on here and other developers come in and they'll answer your questions. React JS. Uncaught type air cannot read properties of undefined reading length. That probably means they got the wrong data type coming in.
Umar Z: Yeah.
Lewis Benson: Your user is initialized as this you state. It's being filled with Nothing doesn't have a length attribute. So there's no utility for it. So they just ask this question. They shared all of their code. And another developer came in analyzed it and they broke down the answer for them and these nice little format. And they were able to get their answer. And then somebody else answered in a different way. That I think it's the same answer
02:50:00
Lewis Benson: Now they got the wrong answer there. You can see the Responses underneath so that's another thing too. There's a small print on stack Overflow. Sometimes you find little nuggets in here of good information in these. Little discussions underneath that are really small. I found some really interesting Concepts just for people were having a discussion about stuff underneath of a question.
Lewis Benson: So you can hear you just said ask question. And then you want to be a specific as you can. And break down like exactly what's going on.
Lewis Benson: Pretty much every question. You could probably think of those probably already been asked on here. So if you do have any questions probably search with stock if you want to find a low solution. You could probably just do a search with stack Overflow in the search and then get the solution. I could say something like creating object
Lewis Benson: and JavaScript stack Overflow and see what kind of
Lewis Benson: Which is the best way for creating an object? So here they're using a Constructor function to create an object. We haven't gone over Constructor functions yet here. They're creating an object literal. And then here they're creating an object literal and then adding their values manually. when their method outside and here they get an answer. There's no best way depends on your use case. And then they give a whole bunch of information on all the different use cases. So every little thing you could think of has been asked every question there might be some that you haven't seen yet that haven't been asked like that one with The react issue that guy was having that's a very Niche problem to have basically how to typo in his code and that's why it wasn't working and somebody was able to point that out to him.
Lewis Benson: Does anyone have Any comments or anything?
Lewis Benson: I'm gonna end the recording here. We've gone over quite a bit of stuff. So you'll have access to the slides through the recording as well as That little demo on whiteboarding that I gave I didn't go over everything that you would need to know about whiteboarding, but we haven't learned enough to actually cover unit testing and stuff like that. That's something else you would discuss in your whiteboarding also. time space complexity there's a topics you can research on your own if you want. But I don't think they're expecting you to know all of that during that entry-level position.
Meeting ended after 02:53:08 👋