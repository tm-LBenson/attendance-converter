nia-amar-wfe (2023-12-14 19:30 GMT-5) - Transcript
Attendees
Brian Kimbrow, Chantrice L, Daniel Perez, Elgin Sharper, Gregory Robertson Jr, Iris Coats, Krystal Jefferson, Lewis Benson, Lewis Benson's Presentation, Ryan Arnold, Umar Z
Transcript
This editable transcript was computer generated and might contain errors. People can also change the text after it was created.
Lewis Benson: All right. I'm going to share my screen and what I want to talk about today is we're gonna kind of go over something we've covered before but I'm gonna show you some best practices deployments and using a development environment and a production environment So let me show you what that process would look like. So here on my GitHub repository and I'm gonna create a new repo. And I'll do this on my demos page. And I'm just gonna throw in some content and everything on this so that I can get to the deployment process. This is going to be
Lewis Benson: it's going to call it deployed site. And we'll give it a readme. And I'll throw it in MIT license on it.
Lewis Benson: Okay, so we got some files so it'll allow us to clone this down. So let me put this in my older. I will get bash in the projects folder and My new repository here. Now I can see the end to deployed site.
Lewis Benson: And open this up in vs code.
Lewis Benson: Okay, so I'm just going to create some content so that we have something to actually deploy. Whoops. I just did exclamation point from my channel name. I'll do this fairly basic. I won't put any real content. It's just gonna be a demonstration purposes on what this would look like. Or make a Hello World site. We'll do an H1.
Lewis Benson: And I'll put a background color on the body.
Lewis Benson: So we'll make this a dark White text and I'll put a paragraph of loram in here.
Lewis Benson: So, let's see what this is looking like.
Lewis Benson: was the 5500
Lewis Benson: it's opening the wrong one.
Lewis Benson: Okay, that's odd.
Lewis Benson: Close my other vs codes and restart this and try again.
Lewis Benson: Okay, there we go. So basic hello world page just some real simple content on here. And now what I want to do is deploy this and I'm gonna deploy it through netlify on elify allows us to pick what branch we want to go off of and it's also going to be really useful later on when we start doing deployments of our Frameworks when we start building web applications. They're going to be called single-page applications where everything lives in one HTML page that it'll look like a multi-page application the whole thing is so Dynamic that when you click on a link instead of going to a new HTML page, it's just renders the entire page with new content using JavaScript. So that's how a single page application using a framework. Work but GitHub Pages doesn't support that type of functionality.
Lewis Benson: So we have to use a third party deployment service and netlify is a good choice for this. There's a lot of other ones out there. There is Versailles Heroku. Render, there's so many different ones out there that you can use. I'm picking that lefaj just because it's fairly simple. It's free. And it's just works out of the box. Everything was wired up to your GitHub. So as you're making changes your netlify deployment will update. So let me go ahead and go to netlify. I'll just do a Google search for it. Click the top link. You'll have to sign up for this but you can sign up using your GitHub account. I'm going to log in using my GitHub account.
Lewis Benson: And this is recommended because you want this to be connected directly to your GitHub this right here is where they kind of have the gotcha on the cost. It's free because I'm not really getting a whole lot of traffic on my Netflix account. If I had a high traffic site, I would have to scale this up and actually pay I believe it's $20 a month for the scaled version. So it's not terrible in price, especially if you have a lot of traffic on your site, you're probably making that up on ad Revenue so once you're on here You're Gonna Want to add a new site before I can though I need to actually ACP So, let me get this all updated on GitHub.
00:05:00
Lewis Benson: and Stage that commit that push that
Lewis Benson: and then I'm going to add import from existing Deploy with GitHub. and I'm going to have to add my organization that I used That was the Codex demos.
Lewis Benson: I'm just going to say all repositories so they don't have to do this again in the future.
Lewis Benson: And use my password put in my PIN.
Lewis Benson: Alright, so I should be able to find that on here now. I called this.
Lewis Benson: did I didn't call it deployed site so that's right here. And we're going to deploy off the main branch on this is going to be what I would call the production code because it's off the main branch. This is where I would have my clients and General Public Access. And this is also where I would configure DNS so that I have a custom URL to this site. So I'm just going to hit deploy.
Lewis Benson: And it's actually fairly easy to configure a custom L on netlify. So we can see that's building there. This is very similar to when you look and GitHub actions. my microphone just went crazy there. shows you kind of the progress of what's happening there, but it doesn't give you that little graph, but that's okay and site configuration. I believe we can change site So I could change this to deployed site. And you can see that's changing my URL to deployed site on that lafid.app I can also make this customized. this is already taken. I'll just do a two.
Lewis Benson: Netlify has this isn't specific to my GitHub profile. So you're limited on your names which is why you might want to consider on a site that's going to be client facing to actually show this. Are sorry actually get a custom domain.
Lewis Benson: where is the
Lewis Benson: It's with any settings Where you can actually configure that.
Lewis Benson: Might have to check their documentation to find it again. It is pretty straightforward. I have to dig through here though to find where to actually change the DNS configuration. Their settings can be a little bit confusing.
Lewis Benson: Not seeing it right out the gate here. But I could do it through Google as well or through GoDaddy. I could go on there purchase a domain and bring it into metalify that would work as well. So this is deployed. We have our link here. I click on that and we can see that that's working. so this is my production code. This is what the world's seeing. What I'm gonna do is create a new Branch using git I'll just do that by clicking on this down here on the bottom left of my GitHub or sorry of my vs code. And then I'm gonna go up here and click create new branch. And I'm just going to call this Dev because this is going to be my development environment.
Lewis Benson: I also see very specific Branch names that will describe the feature you're going to add that's probably a better practice than just calling it Dev but it would depend on where you're working at and who you're working with and how you agree on your branch names. I've done it with large groups where we each use the branch that had our own name so that we knew who's Branch was I've also seen it where you have a branch very specific to the feature you're working on. So if you're working on the authentication you create a branch called authentication and everyone knows what's within that branch and who's working on that Project based on the branch name then? And another one could be bug fix. But again, I'm just going to pick Dev because this is my development environment, and I'm the only one working on this project.
00:10:00
Lewis Benson: So I pressed enter I created that Branch now, I'm gonna click this public Branch button right here next to the branch name. This is the same as doing get push origin Dev. You could do this in your terminal as well using get switch with the c flag and then putting in the branch name Dev and then doing get push origin Dev. So. That is another option as well. you could use the source controller here to push that up. All right, so this should be pushed to my GitHub now, so I'm going to go back to that lafi. and I'm going to go back to my home here. I'm gonna add import go to GitHub. And I'm gonna find that exact same site again, and this is going to be my development deployment. And the reason you would want to do this is because sometimes things behave to differently on deployment than they do locally. So you want to test all the functionality out.
Lewis Benson: Prior to actually pushing this live. it may not let me have since I'm not premium. It's because I didn't switch.
Lewis Benson: So I hope that didn't change this. And then I could change this to Dev.
Lewis Benson: So now I'm deploying off of the dev Branch instead of the main branch. Now I could do this through GitHub pages. I could have one deployed on GitHub pages and one deployed on netlify.' the reason I don't like doing that is because GitHub Pages has different Behavior than netlify and I want both environments to behave exactly the same and when you're using GitHub Pages, you're going to get different Behavior between the two of them. I'm gonna change this site name here using the ura change site name and we're going to call this deployed. - Dev - EMV this should be available.
Lewis Benson: And as soon as it's done building I should get here So there is the Hello world with the hello spelled incorrectly. So now I'm going to go back into my code and I'm actually gonna fix that typo so we can see that.
Lewis Benson: And I'm going to add another paragraph. with a wide lorem times 2
Lewis Benson: and I'm going to ACP this. We'll say bug fixed title.
Lewis Benson: Add content.
Lewis Benson: All right, so that's getting pushed up. So let me go to the site overview. And I'm on the deployed environment here. Just give us a refresh to see if it There goes bug fix title. We can see that. Was detected and it's automatically updating. let's just open this up now and see if it worked. This is deployed environment. And there's the extra content and the corrected title so we can see that that's spelled correctly and wherever extra title there I go to the deployed site my production code and no changes have been made to my production code, but I can see within my testing environment that everything looks good. This is ready to be merged into my main branch. I would have tested all the functionality made sure everything still working making sure there's no bugs on this and my deployed environment and that it's all behaving properly.
Lewis Benson: And this is also a good opportunity that if you're using a full stack application that you're testing the security between your back end and your front end making sure that it's working and that it's not being blocked. Sometimes if you misconfigurous server, it'll actually block your front end. So that's another reason why you would want to run a testing environment. And we just want to make sure that nothing's broken because in a large scale application, it could cost a company millions of dollars if they're primary website Imagine if Amazon went down because of developer made a typo and it just crashed their entire website. It would cost them so much money every minute that sites down. So they'll have several testing environments. They'll have several developers who's only job is to run actual testing scripts to make sure that everything's doing what it's supposed to be doing. No, actually run entire.
Lewis Benson: Code bases of just tests and what those tests will do is they'll know scour through the web applications automatically clicking on all the links and making sure that each link they click has all of the expected data being rendered on the page. It'll make sure all the functions are firing exactly the way they're supposed to and that they're actually firing. Sometimes you have bugs where you have reference to a function, but you forgot to invoke the function things like that. So our test environment looks good. So this is our production here. I'm going to go ahead and merge my testing envir. Environment into my production code. I'm going to use the terminal this time just to show the difference on what that looks like. LS to get this to update. Let me make this a little wider.
00:15:00
Lewis Benson: Alright so we can see that we're on the dev Branch right here. and I'm gonna do get add period it admit. I already did my command. Let me do it get status just to make sure everything everything here is good. So now I want to merge this into my main so I'm actually gonna do that on GitHub. I could do this through the terminal but that's not good practice because it doesn't give you an opportunity to review the code at all. I will show you the command but I'm not gonna submit the command if you wanted to do this locally. And the reason you would do this locally is if you're not running on GitHub, you're just doing Version Control locally, so that would be where you would want to have that set up. and that could be a situation where you're running remote terminals through a cloud environment and you're deployed.
Lewis Benson: Service is your local service? So if you have your entire development environment hosted on Your terminal is hosted on AWS and you're going to be running a local server on that remote server. So it sounds a little weird to say it like that but there are situations where your terminal is remotely accessed. And you'll have to do all of your commands through the terminal because you won't have access to In fact, they're actually code editors. Sometimes that are built into the terminal just for the situations. All right, so Just to actually merge the code. I would do get switch Main. And then get merge down. I'm not gonna submit this. I just wanted to show you that you could do that. And then I would follow that up with a push origin Main. The merge command will just merge those together. Let me go to GitHub.
Lewis Benson: And actually do the pull request. And I should be able to go to switch to codex demos
Lewis Benson: and here it is. And it's already asking me if I want to perform the pull request. So click that. And I'll bring this in.
Lewis Benson: And here we can see the netlify actions firing off what this is netlify was allowed to access this. So now it's going to do pre-checks to make sure that everything's working correctly and it's going to do its own stability. It's going to make sure nothing crashes. especially if you're running one small bug in a framework deployment. actually crash all of this and then this will turn into an X and it'll be like you sure you want to merge this. It's all broken. So that would be your first line of defense when you're dealing with production code. Something else to note too is you could be working on another Branch so you could have three branches here. Let me go ahead and merge this in and I'll show what I mean by that if another way to work here. We should be seeing this changing on.
Lewis Benson: On notify here. It is building.
Lewis Benson: And it shouldn't take too long because this is a static site. It should only take a few seconds to actually build this out, but it does. Take a little bit longer on when you're on a free tier of netlify. If I were to upscale my netlify account on this would be almost instant. It's not really worth it to do that. Unless you're actually selling a product through netlify whether it be some sort of blog application or you're getting ad Revenue. or you have some sort of professional setup where you're actually selling websites to a client that would be the only way you'd want to do that. here we have domain management. That's what I was looking for earlier. This is where you can get your custom domains.
Lewis Benson: I knew it was simple to find. So this one right here is where you would add in your custom domain. So you would want to use something like godaddy.com or Google domains and you you could create your own within that lefi and then pay for it through They run about 20 dollars a year. They're typically not set up for auto renewal. So a lot of times what people will do is if you're working freelance, no offer one year support on a web application and then after a year, the client has to come back to either renew and get updates on their site and pay you again, or they just let their site go down and you don't have to worry about it anymore you Remove it from your netlify. All right, so this should be done. It is completed.
00:20:00
Lewis Benson: So there is the updated version of the deployed site production code. There's the old one Let me refresh we can see that we have everything up to date now. So the last workflow I wanted to show is we're currently using two branches and we're deploying or sorry we're pushing directly to the staging area. directly to our
Lewis Benson: testing code the third way to do it. Let me just go ahead and pull down those changes. The third way to do is to create another branch. And this one I'm just going to use my name here. So this branch is going to be code that are the one that I work on. And then I push this code to GitHub and then I perform a pull request my testing environment. And the reason I would do this so that I can trigger all of the netlify pre-checks prior to actually pushing any code up and I'll show you what that looks like again. I'll just add another paragraph in here. and then ACP this
Lewis Benson: and add paragraph That was to next Still spell wrong. All right, so send that. I just bypass staging and went straight to the commit. It's fine for one files. Just be careful. If you ever do that and't if you might accidentally hit commit and it'll just commit all your code when you weren't trying to commit it. Sometimes that's bad. I will go back to our pull requests. So There's a set of name. We don't want to push directly to production code. We want to push to our testing environment. So I'm going to take my name and pull this into the testing environment. Let's go ahead and create a pull request.
Lewis Benson: wait for those netlify checks. There they are.
Lewis Benson: So once all the netlify checks pass that's when I can merge I can do it now. But if I do it now the netlify checks will stop and it will actually show them as failed. So I like to wait for them to be completed because this is in my get history. It'll show that I bypass the checks and just push the code in right away. So not the best thing to do. Here's something too. I might not be able to show you this completely without Wyoming and organization, but maybe at least show me the settings here. Being this as a public repository, it should be fine. So we can set roles. I believe it's actually on branches.
Lewis Benson: This is a rule set. This isn't what I'm looking for.
Lewis Benson: Unless they changed how this works.
Lewis Benson: Let me go back to the main branch.
Lewis Benson: Protect this Branch that's what I'm looking for. So it does look like they changed what this looks like. so bypass list These would be people who could just push code without the tech checks passing.
Lewis Benson: Looking for require signed commits. That's not what I'm looking for.
Lewis Benson: This could be because that I'm in a organization. Let me go to my regular repo first. And just make sure it's not that.
Lewis Benson: Look at one This one should have.
Lewis Benson: Here we go. Yeah, so these are the protections I was looking for. I'm on my basic account now. So require a pull request before merging you could set that as a role. require status checks require conversion Allow Force pushes we can turn that off allow deletions, we could turn that off.
00:25:00
Lewis Benson: So with this basically you can also make it so. You need a certain number of people to approve the pull request. Prior to actually merging your code together. Let's see if it's in Branch protection roles.
Lewis Benson: Interesting is that they redid this very recently because I actually just set one of these up not too long ago. used to be able to just click a button. That had a drop down for a number of people. I'm not sure where they moved it to.
Lewis Benson: Yeah, so this is in the branches. I'm not sure they moved it to but there are ways to do it. Could be under collaborators. Or maybe I need collaborators to make it work. But either way you can make it. So you have to have three people approve your pull request. Just another way to play it safe with tested code. you got to be very careful not to accidentally pull. Code into the wrong place. I need my organizations.
Lewis Benson: And then I'm going to go ahead and complete that merge pull request. Sorry.
Lewis Benson: All the checks have passed. This is where you would do the reviews. I don't have anybody who can do a review on this one right now. But if I did I could files changed review changes and then I would hit approved or request changes or comment. This is what the review process looks like. Once it's approved then whoever is trying to merge it in is able to actually access this button at that time. We'll go ahead and merge that in so now this is going to my
Lewis Benson: Sorry, I did put that on. My test code yes.
Lewis Benson: So now I'll do another pull request.
Lewis Benson: And we'll do Dev domain. But I'm not gonna complete this just yet. I'm just going to create the pull request. Because what I need to do is actually check that everything's working in my testing environment because I haven't checked that yet. So here is the testing environment. We'll open this. I still building.
Lewis Benson: I got the pull request ready to go. So it's running its preliminary checks and then if everything works out. And this looks like it's done. So let me go ahead and open this up. Everything looks good. I don't say any bugs all functionalities working. So now I can merge this pull request. And update all my production code. So that's what that workflow. Looks like. I'm using three branches total to make that work. I have one branch dedicated for staging you could call this Branch staging if you wanted to. And I have my name Branch. That's who's working on it and I merge my name into the staging Branch. I test it Make sure it's all working and then I merge staging into the main branch. Does anyone have any questions about that workflow?
Lewis Benson: This works really well because allows you to do multiple deployments on multiple branches. GitHub Pages doesn't have that option if I go to pages. And I said deploy from branch. I can only pick one branch. I could deploy off of this one if I wanted to. Maybe give me a preliminary check without using that Levi at this point. But I don't have a way to select multiple branches here. I can only select one.
Lewis Benson: oops
Lewis Benson: Okay, so that's all I have for today's quick lecture. Does anyone have any questions about deployments setting up these type of testing environments or this workflow? Anything at all like that?
Lewis Benson: He would have any questions about the Capstone project.
Lewis Benson: Okay, I'm gonna go ahead and open up the breakout rooms. So everyone can get started.
00:30:00
Lewis Benson: me in this recording
Meeting ended after 00:30:27 👋