nia-amar-wfe (2023-11-28 19:30 GMT-5) - Transcript
Attendees
Brian Kimbrow, Daniel Perez, Elgin Sharper, Gregory Robertson Jr, Iris Coats, Krystal Jefferson, Lewis Benson, Lewis Benson's Presentation, Ryan Arnold, Umar Z
Transcript
This editable transcript was computer generated and might contain errors. People can also change the text after it was created.
Lewis Benson: Hi, welcome the week 6 day 2. We're going to be diving into loops. So I've mentioned just a couple times a loop is simply a way to just repeat a block of code. There are multiple types of loops and JavaScript. We're going to be focusing on for loop as you can see right here f o r for Loop and the loop I don't see it written on the right here. i-le while loop basically what the for Loop allows us to do. Is repeat a certain number of times but more specifically we can repeat a block of code until they condition is met
Lewis Benson: Typically, this is used iteratively. Meaning we're going to start at a certain number and we're going to progress until we reach a desired number and that's how many times the four Loop will run. That's not a set in stone rule. You can run for Loop millions of times. Based on a certain condition the condition in the example they have on MD in here. Is they set a variable inside for Loop declaration? They started at zero. And they say until this is equal to nine. That's how many times for Loop runs. So it's typically seen as a way to count a way to iterate over something and run at that number of times, but it doesn't have to run.
Lewis Benson: A set number of times in that case it can be a little bit more complex than that and you can have this run millions of times based on what conditions you place within the Declaration. I can show a little bit of a flow chart. I'm not sure if this is helpful too much. But basically we have a condition to be met. So I can make this readable. so it's going to say addition to be met
Lewis Benson: and then this is going to click the wrong piece.
Lewis Benson: Get my little arrow to Got a lot of extra errors there you get rid of those.
Lewis Benson: And see if I can make this a little bit thicker. There we go. So the condition to be met.
Lewis Benson: And then I'll just duplicate the first one here. So it's the same size. This will go to.
Lewis Benson: Check the condition.
Lewis Benson: this leads to execute some code.
Lewis Benson: this way
Lewis Benson: and then it just repeats back to the start.
Lewis Benson: So essentially that's all it's doing is can't get the stretch properly. There we Click to Arrow.
Lewis Benson: We have a condition to be met we check the condition. If it's met we execute some code the code we're executing is changing whatever condition we're looking at. So this will execute the code it'll modify our condition and then it will check is the condition met. If it is it'll execute this second check. The condition is actually the Boolean that's for Loop declaration. This will make a little bit more sense. Once I actually show the Declaration of this. we can see that here on mdn. This declaration can be a little bit confusing to look at the syntax is slightly different than the way we do most things because we're actually separating three different things with a semicolon.
Lewis Benson: Let me open up. I'm gonna go to GitHub. I'm gonna create a quick repo and clone this down and actually start writing a little bit of code just because I feel like it's a little bit easier to write the code out step by step and then have a pre-written block of code to kind of try to follow if I write it out block by block I find it's easier to explain it. So just start by creating a quick repo for our demo today.
00:05:00
Lewis Benson: And we are on 28 today. And I'll do this with a readme. Create Reposito code the Clone this down.
Lewis Benson: Open this And get clone paste in my link.
Lewis Benson: And then I'll CD into that new.
Lewis Benson: demo 11
Lewis Benson: - 28 I was pressing tab it gets the options to show up. So I don't have to look them up. If you just press tab a few times to try to autocomplete if you have something that's already started. For example two if I press tab. We can see everything that starts with two we have an 11 2 and 1127 11:28. There's just a little shortcut there. So I don't have to remember every single folder. you can just press tab to auto complete and if you have two folders that have similar names that'll show both those and then you can pick the one you need. Okay, so we are in the 1128 folder. We can see that the readme is in there only when I press LS. So I'm just gonna code period into that folder which will open my vs code at that point.
Lewis Benson: Okay, I'm going to create an index.html to get started. So I have an entry point. We need our demo code.
Lewis Benson: And I'll put a title in here. I will create my script file.
Lewis Benson: And I will import that to the bottom of my body.
Lewis Benson: So it's the normal setup procedure? And I like to put an H1 with some sort of content so that I can see that appear on the page. And I will put a new script and a console log to make sure this is working correctly. use ripped
Lewis Benson: Proof of Life to make sure that we have a wired up connection between our HTML and script.js.
Lewis Benson: And there's my Proof of Life console There's my hello world. So everything is working correctly. So I'll show you now how to declare a standard for Loop. And I'll just have this iterate over some numbers and print them out. So the first thing you do is you start with the four keyword. One thing to keep in mind. The for Loop is not an expression. So this is kind of a standalone block of code. You can place this inside of a function you can place Around a function you can do a lot of stuff with it. But you can't do this in a sign it to a variable so I couldn't say const my VAR equals four. This isn't going to work. This isn't a way that you can do that. There are ways to save the results of Loops. We'll get into that more when we get into callback functions and
Lewis Benson: There's actually a specific array method for doing that. In this case, we can't do that. So we have to do the loop and whatever happens in the loop is going to repeat is the idea So similar to if statement we put the four keyword. followed by a parentheses and Then followed by a code block. Inside the parentheses. There are three pieces to this first. We need to declare an iterator variable by convention. We typically use and I'm going to initialize this to be 0. And then I'm going to put a semicolon. That's for Loop statement the second part. Is the Boolean value? so we need some sort of condition to check and I'm going to say I less than 10
Lewis Benson: semicolon to end that second half of the statement and then what we want to do is increase the value of every time So the third piece is an expression that allows you to modify a little bit of logic. in this case, we want to iterate our eyes so we can say I is equal to I plus 1 and that will increase the value of by one every time this iterates more commonly though instead of I equals I plus 1 there's a shorthand version of this. It does the exact same thing and that's So this is the exact same thing as signing the value of I plus 1 it's just a shortcut way to do it. because we're in this small space and these parentheses. This is typically the way we'll iterate one value at a time.
00:10:00
Lewis Benson: for some reason you wanted to do two values at a time, then you could say I equals I plus 2 and then this would count by twos instead of by ones and this for Loop would only run five times instead of 10 times. So that's kind of the difference there on that. Typically if that's the case you'd want to just assign this to five and then still iterate by one there might be a use case where you do want to count by twos in our case. We're going to count by one. So this is the basic for Loop declaration. We have our code block here anything inside. These parentheses will be repeated. The number of times that this logic can run. So again, we first declare our iterator.
Lewis Benson: And then we declare our Boolean expression which we're saying is I less than 10 this will equate to a true or false. I is currently assigned to zero so initially I less than 10 will evaluate to true because I zero is less than 10. So remember this will always evaluate to a Boolean. plus happens after the logic and code So this will run whatever I put in here. It's a console.log.
Lewis Benson: And this will run until this condition is met so I will iterate the number of times to equal or to be not less than 10. So let's take a look in the console and see what we see.
Lewis Benson: We're currently in an infinite Loop because the way I had that a friend so I'm actually gonna have to close my browser tab. and reopen that
Lewis Benson: I didn't necessarily have to close the local server. I just did that so that I could just restart it quickly. So there we have our hello 10 times the infinite loop again that happened because of the way I was typing so slowly the browser started saving and refreshing if you have that the only thing you can typically do is close the browser Tab and then reopen the browser tab on your Local Host again. I'll show you another example of an infinite Loop here in a second. But basically all we did was we ran this console log 10 times and you see that number 10 right there. It's not really that clear necessarily into console that just did Run 10 times. So just to show that I can also log the value of I at that time.
Lewis Benson: Click the wrong. Yes code.
Lewis Benson: This is a different. Yes code. There we go.
Lewis Benson: That must have been from yesterday when I showed how to do the pushing code to GitHub so we can log the value of for each iteration and actually see what i is going to be assigned to as We're looping. So here it starts at zero because that's what we initialize it at. So each time this Loops I'm actually just going to Loop is running a new iteration I'm going to push this above I
Lewis Benson: That way we can see that happening. I mean my DOT log.
Lewis Benson: So Loop is running a new iteration RAM and then it printed out the value of I which is 0 Loop is running Loop is running a new iteration. The value is 2 so as you can see this is looping. And it's changing the value of every single iteration. So whenever you hear iteration, that's what we're referring to. It's every time the loop repeats. We refer to that as an iteration. Also, we might say something like iterating over something as We have a string we could check every letter of a string using a loop. if you remember back to Whenever we were. working with strings we could access each letter in a ring using indexing.
Lewis Benson: So we could say something like let my spring equal.
00:15:00
Lewis Benson: Hello world. and then if I wanted to access the o I could say my world console.log this my string at 0 1 2 3 4
Lewis Benson: and there's the letter o Notice, this is at the top of my console. That's because this is running from top to bottom. And it's showing that line five ran and then line eight Rand line eight Rand line nine Rand and it'll go all the way down to the bottom of the loop like that. So let me for now remove these two console logs just so we can see that O show up and that's all we're accessing is one thing to notice here. This is a number so instead of a number I could say let index equal and I could pass a variable into here. And then I can access my string. Remember. This index is a variable that reduces down to the number four. So I'm essentially just passing the number four in here. So if we look at that we get the same result.
Lewis Benson: where this gets interesting is if I push this into my Loop and instead of index I place what do you think the result of this is going to be?
Lewis Benson: Anybody want to take a guess?
Lewis Benson: Just to kind of thinking about what I is. So we know that I And passing a number into the index location of a st Prints out the letter based on that location. So let's take a look at that.
Lewis Benson: And here we have h e l and we have a 2 there saying that L Wren twice o space w o r l and we didn't get the D just because the loop stopped one character early if we wanted that we could always put the 11 right there. And there we get that last letter. So we just have to run it one more time in order to get that Loop. If I were to run this an extra time, just to kind of show you. We get an undefined there. That can be problematic. If you are doing some sort of logic to your string. For example, let me go back make this 11 again. and I could say two uppercase
Lewis Benson: on every single letter and we get that hello world like that. This is where we can run into problems. If I say 12. We have a uncut type error cannot read properties of undefined reading two uppercase. So what this is saying this error? Is it actually tried to do this?
Lewis Benson: Isn't valid because I'm defined is not a string. It's a primitive data type that represents not having a definition. So when I run that I get the exact same error.
Lewis Benson: if I were to do this on a regular string the letter we'll do the lowercase letter h talk to upper case and we get to capital letter h So this could be problematic whenever we don't know the length of something and we're trying to use methods like this. Now I don't have that air. If I were to put the two uppercase back in here, it would run that on every single letter one thing to note. Is the last one here it does return an undefined and that's why we get that error. So I just want you to see that now because it's an error that you're gonna run into eventually. And maybe this will help you remember? If you ever see cannot read.
Lewis Benson: Property of undefined it probably means that you ran out of values in an array or in a string and you have an undefined and you're trying to use a method on an undefined. That's typically whenever you see an air like that. Did anyone have any questions up to this point for Loop?
00:20:00
Lewis Benson: Okay, so I'm just going to show a couple more examples of things we can do with this for Loop where we're currently situated right now. So there's the counting with a string.
Lewis Benson: We can do a little bit of math on our eye we can say I times two. one thing to note is I'm not reassigning the value of here I'm taking the current value of times 2 and I'm just console about logging. I'm saying I equals I times two. I'm just saying whatever times 2 is log that but I is not being changed at this point. So if I log that we can see 1 times 2 is 2 and all the way up to 22. So you can do things like this. This could also be useful if you wanted to get every other value of a string that may be a case where you'd want to do. you want to count twice. Is high and then divide your number by 2 something along them lines?
Lewis Benson: You can get kind of creative with this. In order to do some fancy things like that. So this right here is just a normal count. So I'm going to put a string in here.
Lewis Benson: We just template literal.
Lewis Benson: Call that counting forward and now we can see that I was included within our string and we have a way to count all the way to all of this in just a couple lines of code rather than repeating ourselves the whole way through another thing we can do is we can actually go backwards with this. So to do that we would say four. We're going to declare our initializer but instead of starting at zero. I'm actually going to start this at 12. I'll notice I'm putting a semicolon. And then I'm going to reverse. my less than sign instead of Have a greater than Sun.
Lewis Benson: We can also use an equals greater than equal to as long as this expression evaluates to a Boolean this will work properly and then instead of incrementing our count. We're gonna decrement our We're going to count backwards. And we can say console.log.
Lewis Benson: coming down it's not early. I'll pass in the value of I. And there we have our accounting forward 0 to 11 pounding down 12 to 0. So this one isn't used as often. I rarely ever decrement with my for Loop. But whenever I do it usually comes in clutch. There's usually some sort of Niche case where I'm trying to filter something a certain way. I need to make a name go from alphabetical. Sending to descending and this usually is the solution I'm looking for at the time. And typically don't think of it until five hours into kind of figure out a solution. So try to keep that one in your tool bottles you can but again, it's not the most common use for Loop counting backwards, but You can do all kinds of different counting with it.
Lewis Benson: Another one is listing out items in an array. This is probably one of the most common use cases for Loop. So me Just comment out these console logs to keep our console a little cleaner. And I'm going to create an array we're going to do some fruits. We'll do an apple.
Lewis Benson: Put my common wrong spot banana.
Lewis Benson: He's got a minute paper there cherry.
Lewis Benson: And we'll do a date nobody uses the fruit date
Lewis Benson: and I'm going to declare my for Loop and I'm gonna do it a little bit differently this time. I'm going to use a property that we've seen before but we haven't really found a good use for this is the time for that use case. So I want to declare my iterator. I'm going to start at zero. The reason I'm starting at zero is because each index value of an array is a starting point at zero just like with a string. On whatever. We're counting. We always start with zero. This is the part that's a little bit differently. So we're gonna say when I is less than fruits dot length Keep in mind. Whatever this array length is.
00:25:00
Lewis Benson: Is the number that's being plugged in here? This gives us a dynamic value. So we don't have to guess at the length. Also the array length could change and we may have this within a function and we may need to be repeating our code. So we don't know necessarily what the array length is going to be at all times. And then we put our increment operator there. So again using the array length is awesome because we don't have to know. Right at the sit here in count one two, three there's only four items this time. But what happens whenever I have an Of two million items. What if this was twitter.com or I guess it's XCOM now and I have millions and millions and millions of comments on there and I need to iterate over them and display them to the user as they're scrolling down the page. I don't know how many items are going to be. So I need something dynamic in order to.
Lewis Benson: Access that so that's where we can use that dot length. But the one thing to keep in mind here. Is this results to a Boolean? This is a true or false I is zero. So it's zero less than five results to true. So there's four Loop will run. So next thing we're going to do is roots
Lewis Benson: did There's anyone think it won't give us the result we're looking for.
Lewis Benson: Let's take a look here. Okay, there's our array printed.
Lewis Benson: four times
Lewis Benson: Okay, tell me why it's not just giving us each item.
Lewis Benson: So right here, it's showing us these index values. Within our for Loop, we didn't access the index values. We're just accessing the array. This is a common mistake. You want to remember to include? your Indexes here. If I did put a zero in there, this is going to just print the first item multiple times. So we're gonna make sure we actually place the letter i there. And again, I is being initialized to zero. So the first time this for Loop runs I is zero. So what I'm also going to do. Is do a second console.log. And this one's gonna have a string Temple literal. Just so we have a little bit more information about our for Loop.
Lewis Benson: this is something I like to do whenever I'm trying to find a bug in my code. I'll often. log to value of if I'm using an eyes and iterator and it are log the value of each item in my array sometimes and I did basically it's called log everything just to see what's going on with my code. Sometimes this helps in order to Find problems. so we'll see the current value of and we'll see the fruit at the index of I so I is 0 so we get the item in the array current value of I is We get the next item in the array. and so forth until we get to the date at the end of the array.
Lewis Benson: pretty straightforward on how to use the for Loop. But it does get complicated. You can see how this is a Time Saver too. we were going to want to print each item of the array before we'd have to do fruits at zero. And I'm just going to duplicate this line. And we'd have to do one. two and three so here I'm repeating the same code multiple times. And if this array length changes if we added another item dynamically throw our application, then I'd have to manually come into my code and add that next item. This is not the most efficient way to do it. I just want you to understand that for Loops are clutch when it comes to not repeating your code, especially whenever you want your application to be dynamic and grow on its own without you having to come in and manually change the code.
00:30:00
Lewis Benson: and what I mean by growing on its own if I were to have a button. Using event listeners that would add items to my fruits array. Then every time I add an item, I could Loop over it and print out the new items of the array based on that. Dynamically, which could then change the content of my page we've seen that yesterday when we had a function that would allow us to keep adding content to our page. If we were putting that content inside of an array, we could then Loop over that array and print all of the content on at once.
Lewis Benson: What questions do you have at this time?
Lewis Benson: Yeah, and I understand that and I find that this is the part of any programming language that most students have the most trouble with you may think that this all makes perfect sense right now until you go to implement it. So if you're not following along I'm advised just at least experimenting a little bit in the browser console at minimum just to make sure you're able to get a console log of I at minimum just so we can get this count maybe going Again, this is probably one of the most confusing topics and all of JavaScript. Especially when we start iterating over arrays. And then iterating over arrays inside of arrays the for Loop can get very complex very quick and I don't want you to be intimidated by it because it's just like task any other thing. The more you practice with it the easier it gets.
Lewis Benson: And this syntax right here, I think is probably the most in confusing thing all of all because we don't do this anywhere else in programming. We have parentheses with three separate statements on it. So if I break this up, there's The second statement and the final statement so First we're declaring a variable next we are establishing our bullion and finally we're doing our iterator. So it is three steps and then outside of this three steps. We have our code block and anything that's Within These parentheses is the code that's going to be executed by for loop. It's kind of similar to and the else statement. And I'm actually going to show that again. I'll just kind of a little bit of review on that as well.
Lewis Benson: They've restructure this backup. So that's properly formatted so if statement we say if and I can do something similar here, too. let me actually put this inside for loop we're gonna say if I is less than fruits.length
Lewis Benson: plus 1 so this will take the length of the fruits. And it'll add one to that length. And it's going to check are we less than that value? let's make this a minus one. Otherwise, we won't actually get to see the results here.
Lewis Benson: And I'm just going to put a console log in here. that says
Lewis Benson: roots are still counting. Okay, so we got our format going on. And again, it's a similar syntax here notice. keyword we have parentheses. But if statement, we only have the Boolean remember this really does result to a Boolean. And then we have within this code block is only executed if this bullying is true. And it's inside of our for Loop. So this if statement is only going to be evaluate for Loop iterations. So let's take a look at what we get for results. we get fruits is still counting. Here we get date. And then we get the value of is3. So it got if statement right after it printed the current value of is3. That would have been on line 11 but at that time
Lewis Benson: I sorry fruits.length minus one was no longer less than I because we subtracted one off of length. So for the very last iteration this line of code did not execute.
00:35:00
Lewis Benson: and I can prove that by logging I
Lewis Benson: This can get a little bit messy, too when you have this many things happening for loops. Before I run this one out.
Lewis Benson: So here we have the current value of I and we have our zero outside if statement and our zero inside of if statement and we can see this repeating for each iteration and then we have our statement, but we don't get The final value if statement while this is running.
Lewis Benson: so it does have a similar syntax, but the for Loop has three pieces if statement only has one piece. Just so we're familiar with that little bit of a difference there that you can see. I've nested inside of this code block so this can get really confusing really quick, especially whenever you start nesting more things within more things. You might see something where there's another in here. It was an autocomplete for loops.
Lewis Benson: There we go. And we would have another if statement.
Lewis Benson: And then another for Loop this can get crazy really quick. You would not be able to read this. Just looking at this code. I would have no idea what's happening. If somebody were to write code like this and present it to me. I'm not saying that it can't happen. In fact, it does happen. So just be aware that These curly brackets notice how about mineral different colors? That might be an extension I have if yours aren't doing that. Let me check that real quick.
Lewis Benson: So there are extensions for that parenthesize. I think it's the one I was thinking of. Which it doesn't seem that I have it installed.
Lewis Benson: so I should part of my theme so that's kind of Lucky. Let me undo these little autocomplete things here. I just wanted to show you that this can get confusing quick. So try not to get intimidated by it. Just look at this one piece at a time. So this large block of code here? We want to look at the most outer level of curly brackets first. And then we want to work our way in so inside of here the first line we have a console log. All these are on the top level for Loop. And then we have an and then if statement these two lines are nested within and this again is what we call cope. Whenever you have code inside of curly brackets that code is scoped to that code block. So what that means is if I were to declare a variable here.
Lewis Benson: I cannot access this variable outside of this set of curly brackets. So if I were to try to say console.log my VAR
Lewis Benson: I'm going to see an error. I'll see it in the console. my VAR is not defined. This is one of those things to keep in mind when you're dealing with for loops and when you're dealing with functions when you're dealing with if statements. Anytime you declare variables their scoped to the curly brackets.
Lewis Benson: So if I were to move this up or down we'll go up with it. It is now a declared variable. And we see the hello and there every time as well. And you could also just move this up to Global scope. And you have access to it. It can always look up through the curly brackets, but it can't Nest down in and find things. That becomes useful later on whenever you start having multiple variables. With the same names because they're used to do the same thing that will make more sense when we get into apis and that sort of thing just for now. I just wanted to be aware of that if you're having issues with Variables not being defined even though you defined it. Just check your curly brackets in your Loops your functions. Make sure that they're all outside of that. There any questions about the for Loop?
00:40:00
Lewis Benson: All right, I'm gonna go into a little bit more practice with this one thing I want to show. is objects Notice, this is working. with an array we can consult about logs at we can see that each fruit is being printed out. Everything's working fine. But what happens when we have an object?
Lewis Benson: I'll just do two people here.
Lewis Benson: Fred and George
Lewis Benson: so one thing to note objects aren't iterable.
Lewis Benson: So remember I defined this as Second and George first and it looks like that actually worked out this time. A lot of times. These won't go in order. You actually see these in a different order. We have one person two in the correct order. That's just a coincidence sometimes too. You may refresh the page and these switch around on you you may have person at person one at the bottom. So objects are not iterable. We could try to run a length on this.
Lewis Benson: and we get an undefined so we're not able to use the Less than length property on it. And we know we can't access. The index of I on an object. Because that is not defined. I would have to be referencing one of the properties on it. for example person one like that. In order to get George to appear there, so you're not able to Loop over objects. That's one of those things. There is a solution for this that we'll learn later on. But for now just keep in mind that we cannot iterate over an object for Loop. But we can iterate over array. So let me create a new array.
Lewis Benson: And I'm gonna do an array of numbers first. And it'll just be one two three. I forgot to put my
Lewis Benson: rest of my variable declaration there. So we just want to print out this array of numbers. Can somebody just kind of walk me through how to do that?
Lewis Benson: If I just want to print out each item within this numbs array.
Lewis Benson: How do I start the for Loop declaration?
Lewis Benson: Did anyone feel uncomfortable with this yet?
Brian Kimbrow: for 0
Lewis Benson: Yep, so we're going to do four. Let I equal 0 and then important to remember is to put a semicolon. Don a comma is going to throw an error. It has to be a semicolon to end what is the next part of the four Loop declaration?
Brian Kimbrow: you want to do is less and greater than
Lewis Benson: Yeah, I'm going to use numbs.length so that we have the dynamic length of our current array here.
Lewis Benson: And what else do I need?
Ryan Arnold: minus one
Lewis Benson: minus 1 Okay, put minus 1 there. I'm going to put a semicolon. And what's the last part of the statement?
Brian Kimbrow: on an increment on I Plus
Lewis Benson: I plus. All right, What comes next after this part of the Declaration?
Brian Kimbrow: You need to add your curly.
Lewis Benson: Yeah, the curly brackets. This code block is the only code that will be repeated in for Loop. And let's go ahead and Each item within the numbers array. nums and what am I going to pass in here to get each item on that number?
00:45:00
Ryan Arnold: need square brackets
Lewis Benson: Square brackets and what do I put in them?
Ryan Arnold: the letter i
Lewis Benson: letter i
Lewis Benson: and we got only two of the values there. And that's because we subtracted one on the for Loop.
Lewis Benson: I don't see how I could make this work. With a subtracted one.
Lewis Benson: So the length of your array is going to be one more than Each index value so I kind of see where you were getting the minus 1. But we're counting from zero. And yeah, I got it. So with the minus one would work if we were doing this as a while loop, which we'll get into that next, but we're not able to do that here because this actually won't iterate past the total number of the array it kind of already accounts for us that extra value on there. There were getting one two three.
Lewis Benson: you're good. Yeah, they're actually as a case where you do subtract one, and I thought that's kind of where we were going with that but that's not That'll be for the while loop. Just because of the order that these things happen in so this is declared first. And then this is evaluated. And then this is ran. But before this is evaluated again, this is incremented. And then this is evaluated. So it does things in a really weird order. But it's more efficient for iterating over four Loops that way. Keep in mind I'm less than a rate at length. This could be any bullying value here. As long as this value can end up getting changed from a truthy value to a false value.
Lewis Benson: Then you could put literally anything here that evaluates to that. This is just the most common way to do it.
Lewis Benson: All So let's take a look. We got our one two and our three what would happen? If I were to actually make this an array.
Lewis Benson: And then another array.
Lewis Benson: followed by one more array
Lewis Benson: what do you think the results going to be this?
Lewis Benson: So keep in mind our index of is going to be this entire array here. and then our index whenever I is 1 it's going to be that entire array. So let's take a look at that. So now we have three arrays.
Lewis Benson: Did anyone know how we can get? Using a loop every single value out of all three of these arrays. Didn't want to see a solution for that.
Lewis Benson: This is a more advanced thing. But I am going to show it now just because It is useful, especially in cases where you have nested arrays. We call these either a matrix or a 2d array.
Lewis Benson: So we currently have A single array inside of our for Loop right on we can actually see that online ten there. This is an array and this is an array. So if we just wanted to print out the value of each of these items. Then we would just use a for Loop right? we wouldn't even think about it. We just say I'm going to Loop using my array dot length property. And it's going to give me the value of each of these. But if we look at where this code right here is located script.js line 10 that's telling us where we would need to put our for Loop in order to get array each value of that array and that happens to be inside of our current for Loop. So this can get really weird, but I do want to show this.
00:50:00
Lewis Benson: So you would actually put another and by convention when you for Loop You don't use the letter for the nested one you use the letter j. Because it's the next letter in the alphabet. That's the only reason we typically use the letter because it stands for iterator. We used the letter J because it's the next letter in the alphabet if that makes sense. But it's set up the exact same way. So let I equal 0.
Lewis Benson: semicolon this part here is gonna be a little bit different J. less than nums at I
Lewis Benson: .length
Lewis Benson: J plus plus So as this first for Loop runs the inner loop is going to look at that single array. So if we look back what we don't have them there now, let me comment this out for a second.
Lewis Benson: If we look at numbers for each iteration each time, that's a for Loop or the story. That's an array. So when this one's being red it's going to say. My nums that I array dot length, it doesn't have a length of three. So this will be 0 to 3 and then it will increment that so this is where things can get a little confusing. They do want us to introduce us to for loops. It's typically something I would say for later, but apparently this is beneficial.
Lewis Benson: So we can log I and numbs at J at the same time now. And this should give us the value of every single thing in our for Loop.
Lewis Benson: So there we have one two, three, four, five six. Seven eight nine. The reason we're getting these arrays still is because of this console log here. So it kind of shows us every time this So first iteration, we're on for Loop 1 2 3 and then we go into the inner for Loop and we get one two three of each value and then we go back out of the inner to the outer for Loop where we have I iterating and we get four five six and then we get each item four five six. And then we're going to have seven eight nine for the last time that this loops and we get seven eight nine.
Lewis Benson: If anyone have any questions about this, I know this is really confusing right now. I'm not expecting you to be an expert at nested for Loops just an introduction to it. But if you do have questions about it, please ask. That way I can clear anything up and in your questions may be the same as somebody else's questions. so it can be helpful.
Lewis Benson: One thing that helped me understand nested for Loops was this is like a clock. Where your inner loop is the second hand on the clock? And every time that this goes all the way around the clock, that's when your minute hand your outer loop is going to move on the clock. So if this were going from 0 to 60, this would go all the way around the clock, which then iterate your outer loop one tick.
Lewis Benson: that's one way to look at it. Another way is just to kind of read this line by line. So you start at the top. And you're gonna say Okay line 10 is going to execute. And I know line 10. Is not going to move to line 12 where we now have the start of our inner for Loop so line 13 is going to iterate until this condition is met so this means it's going to iterate over this entire array first. So this Loop will run until completion of this ray. Upon completion. We're going to go down to line 15. We're going to say over at the end of the outer loop now and it's gonna go back to the beginning. It's going to iterate and then it's going to log the second Loop. And then it's going to go into this next Loop and it's going to count each item in the loop. It's going to complete this entire array which means this inner loop is going to run three times.
00:55:00
Lewis Benson: And then it's going to get to the bottom and then it's going to come back to the top. And it's going to print out the next iteration of these three arrays. And then it's going to enter this loop again. It's going to go through each item. And when it completes, it'll come to the bottom and we'll say we are now out of items. This array is complete and we'll move down to line 17 where we continue on with any more code that you would have after the loops. What questions do you have?
Brian Kimbrow: I don't have any questions, but for Loops can be a little tricky on like Lewis said it gonna take a little bit of time to get used to them. I think. It can be difficult and it can't be difficult same time. most important thing is understanding when the user for Loop or when we get the wild Loops. You understand why. Because it's times where you might need to use for Loop and a while loop all those other things.
Lewis Benson: Yes, exactly. as far as this nested for Loop goes Again, this isn't the most common practice. This is actually to be avoided as much as possible. Especially during coding interviews. They don't like to see you nesting for Loops. They want to see Solutions where you do everything through a single for loop with that said, I do want you to see it. And then if you do see a loop inside of a loop and you see these letter J's, you'll understand it. It's a nested for Loop and again, you can read this from top to bottom. You may have to log what exactly this is. So that what is this number's array, what is in it? You may have to throw a whole bunch of console.logs into code break it apart. And just try to break it down to a level where you can understand each piece of it.
Lewis Benson: Understanding the outer piece and understanding the inner peace and dependently makes the whole thing come together in the end. It is sometimes used again. It's not the most common thing that you'll run into. So don't worry about it too much just be familiar that this can happen and they do exist. That's the main takeaway here. I think this might be in the assignment today. Let me just double check that.
Lewis Benson: a two assignment
Lewis Benson: Yeah, this will be in the assignment for today. So if you want to take a screenshot of this feel free to do that just so you have some sort of reference to look at. I do want you to try to understand it maybe modify the length of this a little bit. We could throw that an extra value in here.
Lewis Benson: now we have two fours. I'm just gonna undo that maybe throw some other stuff in here. Maybe make this on a ray of arrays of strings, just play around with it a little bit whenever you're doing the assignment if you have the extra time and just try to understand exactly what's happening on each iteration. That would be the most useful thing to get out of this.
Lewis Benson: Okay, so yes, Omar.
Umar Z: Yeah, but can you please again? Just explain on line 9 how this Loop executes step by step that let I is equal to 0 that means 0 is the first value which is in the array, which is number one here, right? and then
Lewis Benson: Yes, I'm sorry. Let me back up a second here. No I is zero is actually this entire array here.
Umar Z: This era okay in this entire array, in this case So…
Lewis Benson: Yes.
Umar Z: what happens on the next step then eyes less than Numbered or nums.length or what is it doing?
Lewis Benson: So let's checking the length of the numbers array which is three items.
Umar Z: Okay.
Lewis Benson: It's three arrays. So it's saying while I is less than three…
Umar Z: Okay.
Lewis Benson: because this reduces down to numb thought length equals three. So while this is less than three. Do this logic?
Umar Z: Okay, cause
Lewis Benson: and then after all of this executes once Then it's going to come back up and…
Umar Z: okay.
Lewis Benson: it's going to iterate. I To the number one.
Umar Z: plus what does this 2 plus signs mean here? nothing
Lewis Benson: I could actually write this as I equals I plus 1 this is the exact same thing as I plus is a shortcut for I equals I plus 1
01:00:00
Umar Z: because as I in first case is equal to zero, so we add number one to that. So that less was on the next step I is one so 1 plus 1 is going to be 2 and then when I is 2 2 plus 1 is going to be 3 is Center. Is that how it's gonna work?
Lewis Benson: That's exactly how it's going to work. Once I is equal to 3 our length.
Umar Z: Uh-huh.
Lewis Benson: It's gonna check here. It's gonna say is three less than three. This is going to evaluate to false and…
Umar Z: Yeah, okay.
Lewis Benson: it's no longer going to execute this for loop on the exterior if the exterior one is no longer executing. The interior one is no longer executing.
Umar Z: what happens if we put on the second step if you put i instead of less than number line what happens if you put I is equal to the number like what happens then?
Lewis Benson: Here it'll increment we can go three equal signs it'll increment until this is equal. It'll work the same basically.
Umar Z: It worked the same, okay.
Lewis Benson: Yeah, it should I don't think it'll iterate an extra time. Am I doing logs in here?
Lewis Benson: not in an infinite Loop
Lewis Benson: If I triple equals, sorry, it won't ever run. because this is going to evaluate to false immediately because I is not equal to 3. I is equal to zero at the beginning. To make this with an equal sign you to say like that. Yeah.
Umar Z: Less equal, then it's done it to run. because it's gonna look for less than first, okay.
Lewis Benson: Yeah, because if I triple equals. Num's not length, and this will always be false. So this never runs this has to evaluate to true in order for it to run.
Umar Z: I see. okay, that makes sense.
Lewis Benson: Yeah, great questions. And again this I equals one. I use the I plus plus it's the exact same thing.
Umar Z: Okay.
Lewis Benson: It's just a shortcut.
Umar Z: Yeah, nice making sense to me. No, I have a clear picture in my head how it's working. Actually think thank you so much.
Lewis Benson: Yeah, and just remember to use a semicolon to separate each statement here. So you have your initializer you have your bullying statement and then you have your increment and then each piece is separated by a semicolon. However, this one doesn't end in a semicolon for some reason. I feel like it should but it doesn't so it is what it is.
Lewis Benson: It's one of those JavaScript things.
Umar Z: Thank you.
Lewis Benson: Yeah, no problem. Does anyone else have any questions about the for Loop?
Lewis Benson: I'm just going to set up one more little practice here. I'll do it underneath so that we don't lose this code. But I will comment out my console.logs for now. Last practice I'm going to create an array.
Lewis Benson: And in this array, I'm gonna put 55 40 33 just a bunch of random numbers.
Lewis Benson: Maybe these are grades on a test something like that. That's actually what I'll make these is grades. and then what we can do is for we're gonna start with left. I equals 0 as we do. If I is less than grades not length. I so this is kind of like boilerplate code almost for Loop and that's why Emma has a shortcut if I just type 4 and I click on for Loop shortcut here. They're using index instead of that's okay. You can use index if You can literally call this ble. Whatever you want. Then they have index less than a radot length. You'd have to change this to your array that you're working on. So in this case, it'd be grades. I believe when I first do the shortcut. It allows me to just type.
Lewis Benson: Yeah, so I can make those all I
Lewis Benson: and then I could change these to grades
Lewis Benson: So you could do it that way if you want. We have an element here that's referring to each element of the array. So there is that little shortcut if you're having trouble with the syntax feel free to use the Emmett tools. If they're helpful to you, I typically just type these out just because I got so used to doing it. So what we could do now is To modify these grades if we wanted to duplicate. The number or something like that. Just something a little silly there, but just to show you can. So we could say grades. at I times plus there's times. we'll do 0.5. We're actually cut it in half I guess. But we could do math like that.
01:05:00
Lewis Benson: But also what we could do is actually reassign this or say const. new grade equals empty array and I can actually push that in.
Lewis Benson: I mean just console that log the new grades at the end. We'll do. new grade dot push And then we'll say grades. I still have my clipboard grades that I times 5. And then after the for Loop is completely done. We'll log new grade array. So there's something you could use it for you create this container. As you're working on the new data, you're pushing all the data into the new container and then you can do whatever you want to do with that container at the end.
Lewis Benson: And we have an undefined on length.
Lewis Benson: There's one of my previous ones.
Lewis Benson: What line number was that line 12?
Lewis Benson: so I'll just What happened here?
Lewis Benson: I changed the light somewhere.
Lewis Benson: Just got a comment these out for now. I don't see where I made a bug. But apparently I baked one in there somewhere. There we go. And I'm gonna put a little comment here so we can see what this is.
Lewis Benson: new grades
Lewis Benson: old grades
Lewis Benson: that's just great.
Lewis Benson: So, there We multiplied by 0.5. We put all these into a new array. And if we wanted to we could Loop over the new grades and Princess out individually. I'm choosing to just print out the entire array in this case. But there's the old number there's the new number. So we're using for Loop to modify all of that data. And we're using the array push method to push that into a new array. So we ended up just basically duplicating this array. But all the numbers been multiplied by 50% Does anyone have any questions about what I just did there?
Lewis Benson: All right. So, let's take a 10 minute break and we're a little bit past our hour mark. When we get back, we'll get into the the while loop is very similar to for Loop, but I find the syntax is a little simpler. so it's almost the same thing. But I feel like it's just a little bit easier to work with sometimes but I wouldn't say it's as useful for iterating over strings and arrays just because you get this a little bit of extra power here with three items in the loop. but with that, I'm going to start our 10 minute timer. Since we haven't had any questions. And when we come back again, we'll get into the while loop.
Lewis Benson: I'll see you in 10.
01:15:00
Lewis Benson: All Looks like my camera got messed up somehow.
Lewis Benson: Welcome back everybody. All right. So the second half we're gonna get into the while loop. So, let's see that on MBM.
01:20:00
Lewis Benson: Here's another one too. I just want to throw out there that there's this thing called a do- It's basically the same thing as a while loop. It just does your logic in a different order. It's not something we cover but it does exist. So maybe it's something to look into later on. I don't think I've ever used one personally, but I have seen them use and they are out there. So here is a basic while keyword. It has a Boolean block and that's it. It doesn't have. This one they created their own iterator up here, but you don't have to have an iterator at all for a while loop to work. It's basically used when you don't know how many times it's going to run. You just want to run until the job's done, basically.
Lewis Benson: I'm gonna show a more realistic example of where you would use a while loop. I like using them for what we call validation. Whenever you're waiting on user input, so I'm going to use a prompt here. We're going to say let user reply equal prompt and we're going to say Yes, my favorite. color
Lewis Benson: So this is just a kind of a quick example of where you could use a while loop. We want the user to guess my favorite color. But we don't know how many guesses it's going to take. So what we can do then say while
Lewis Benson: user reply is not equal to we'll just go with blue.
Lewis Benson: While the user replies not equal to Blue.
Lewis Benson: Ask again.
Lewis Benson: and we're what we want to reassign the original variable for the while loop to work properly creating a new variable with the same name inside would not end the while loop whenever the Prompt is Matt. So let's take a look. I'll probably have to do a refresh here.
Lewis Benson: It looks like I'm in an infinite Loop. So let me read the browser. So we have guests my favorite color. I'm gonna say purple blue and it ends the while loop so whatever I put in there is long as it's false. It will never evaluate the true. So however many guesses I want to make let me do a refresh here. I could say red I can just type all kinds of stuff in here. And this is always going to be false. I'm never meeting the criteria where the user input is equal to the string blue until I actually write the word blue. I press and the while loop ends So this is just one little example where we're using. user input to determine the condition
Lewis Benson: Again, this is going to evaluate to true because initially user reply is null. So it's going to say no is not equal to Blue that's going to evaluate the true. So then this is going to run. Whenever the user the value of user reply is no longer null. It's going to either be red blue, whatever they put in as soon as it is blue. This is going to evaluate to false. And that's when it's going to end notice. I'm using this not operator here. I'm saying not equal to Blue while the user reply is not equal to Blue. This is almost like Regular English here while user reply not s perform this logic
Lewis Benson: So it's a very easy way to remember how to do a while loop if you remember this example right here. Just to make this a little better less repeated. I believe I can just declare my variable inside won't work. Another way I could do this though is to do that. just to make this a little cleaner. My current value of user reply is undefined. And so this will say undefined is not equal to blue and then we're going to reassign the value here just another way to look at it. So we're not repeating the same prompt over and over again. And we'll just make sure that that's still working do another refresh.
01:25:00
Lewis Benson: And it works the same. So just another option there if you want to clean this up a little bit. And not have to repeat the prompt function twice.
Lewis Benson: let's show you how this would work if you wanted to use an iterator. Going to comment this while loop out.
Lewis Benson: And we're going to create a new one. We're going to say let I equal 0 this should look a little familiar. while I is less than 10
Lewis Benson: And we can log. I and then we can do I So we're doing the same thing for Loop here. except we're manually creating the conditions the difference is we told I'd iterate at the end of our while for loop, I won't iterate here. I plus plus. like that Let me just uncommon this one so we can see it. Oops.
Lewis Benson: So we get that coloring back. so with this for Loop I is saying to be iterated at the end of the loop, but that's not how a for Loop works and actually reads the condition and then at the end of the loop, so With a while loop. It's iterating our condition. And then it's reading the condition. So it's happening in a slightly different order. I just want you to kind of notice that small little difference between the two. I'm doing them this way. You may never run into an issue with that. And it may never matter. But I do want you to know that there is a slight difference between having your eye or for loop with And using the while loop with your iterator outside and then iterating inside the way that it evaluates. Your Boolean is slightly different between the two. But for the most part this works the same.
Lewis Benson: But you have a little bit more control over the while loop we could also do it with an array we can bring our fruits array back. I don't have it here. We'll do the grades.
Lewis Benson: So there's our grades and then we could say when I is less than grades not length. then we can iterate over grades at I
Lewis Benson: so this looks like a while loop.
Lewis Benson: Or sorry a lot like a for Loop.
Lewis Benson: A new grade is not defined. so
Lewis Benson: That's fine. So there we're getting every value of the grades array. We're not using the new grades array, but it is here if you wanted to see that. oops
Lewis Benson: Does anyone have any questions about this so far? It's not work. It does cool.
Lewis Benson: I'm used to typing that into my terminal. That's why I keep typing it into my browser. So there's a lot of different ways. You can write out your bullying expression here. The main thing is that it reaches a Boolean. I'm gonna show another way to use this. this is the more common way that I typically see while Loops being used other than what I had here with the prompt validation is probably the biggest things especially is the password correct type of thing and you could use this in conjunction with an iterator to make it so you have a certain number of guesses, too. So you could say while the reply is not blue in the iteration is less than a certain value so you can get a little bit more powerful. Bullying expression out of your while loop then you can your for Loop.
Lewis Benson: I mean I guess you could probably expand on that one. I just never see that done. Typically the while loop is done whenever you have a whole lot of things to check at once. I'll show you what I mean by that in a second. But first let me show you that common way that you'll see this being used. So we have our I plus plus what we can do is say I'm actually gonna take this logic here. And I'm going to bring it down into here.
01:30:00
Lewis Benson: and then we're gonna say if new grade. length is greater than 5
Lewis Benson: break So this brake keyword is a way to end a loop this works in while Loops. As soon as this command is red. The loop is done. It's no longer running any iterations. It doesn't matter what the iterator is. It doesn't matter what the plus condition is break terminates Loops. That's all it does. It won't run any code after this. To put a console.log here. Similar to the return statement in a function. We actually see unreachable code detected because we have the brake keyword here. So that'll actually never read. So what we're actually going to do is change this to while. true
Lewis Benson: and then we're going to have our break statement here to end the loop. So this was almost an infinite Loop. We're going to keep our eye. And we're going to change this to be. I plus plus here. So that kind of works the same way that it was working.
Lewis Benson: So it grades of I is 0 we're going to multiply by 50 percent and then we're going to increment and then we're going to check if new grade dot length is less than five break. So as soon as we get a certain number of items in our new array, that's when we want to end the loop. So this is kind of a niche use case for that. But let's take a look at it. We didn't log anything yet. So let's do that.
Lewis Benson: We'll cancel that order. I
Lewis Benson: and at the end of it all will new grade
Lewis Benson: and there we go. So the loop Brandon wants that's because the new grade array Is starting at zero, so yes, I can only run once. Let's say equal to five.
Lewis Benson: Now we get five items in our array. Because as soon as it got that number of items. It's going to terminate so we get the value of I is one our while loop still running. We enter Ending Loop the break statement runs and then we get the console.log of our entire array.
Lewis Benson: So you get a little bit of power out of these while Loops the wild true statement. it's arguably not good practice. I believe the community split 50/50 on this. for some reason they want you to have a variable set I don't even know what you would call let Loot break, I guess people true. And then pass that in there. And do something like that. I don't know what the purpose of that is while true works fine. I think this is the more accepted practice. whenever you have a break statement, as long as you have a way out of the loop, it's fine. Does anyone have any questions about that?
Lewis Benson: The alternative here, if you didn't want to use the break statement, you could put this bully enough here. And then Let me just remove the break statement and put that back in there. So we should still see ending Loop, but we don't have a break statement.
Lewis Benson: While is not equal to 5. There we go. this has to evaluate its true to run? So we have to invert it for this case. So if it's not equal to 5 The loop will run when it is equal to 5. We'll see ending Loop and then the loop breaks. So it works kind of the same way. The difference is any code here will continue to run.
01:35:00
Lewis Benson: This running will run an extra time now. So we see ending Loop and then we see running. So that's where you would want to use a break statement to prevent that from happening. Another way to do this without the break statement is the return statement that'll also in your Loop. But in order to do that, we need to declare a function. So we'd say function. We'll just call this do some.
Lewis Benson: and we'll pass in a parameter of an array so we'll say my array.
Lewis Benson: while true
Lewis Benson: we'll need an iterator in here. So I Is equal to zero? and my array at I
Lewis Benson: let me create a counter.
Lewis Benson: This is like an accumulator. It's gonna keep track of each value in the array. And it's gonna add to it. So let this be count is equal to count plus my red eye. So that will increment that.
Lewis Benson: And we want to run this. until my array is no longer defined.
Lewis Benson: So what we could say here is if
Lewis Benson: my array invert that at I
Lewis Benson: break
Lewis Benson: I don't know if this is the best approach to adding something up. Let me see here. We are creating and our counter this is an accumulator. Let me actually rename this.
Lewis Benson: So when I see accumulator, I just mean the um. each time this array iterates It is adding that value up. So it's starting at zero. and then as or as the loop is looping it's taking The first value of my array we'll say our array starts. Let me just create one real quick.
Lewis Benson: We can do one two three, four five. so when we're at zero. One it'll be 0 plus 1 1 plus 2. And then that'll give us three and then it'll be three plus three and it'll just keep adding up each number like that or this accumulator here. What I'm checking for here is if my array at I is undefined then we just want to break the loop. The alternatively we could do that up here. I think it'd be better to do that using a length counter. But I wanted to show how to use the break statement. So let me just do this way from now see if we're going to infinite Loop.
Lewis Benson: Seems to be fine because I never invoke the function. So do some. and then pass in New a
Lewis Benson: and we do seem to be an infinite Loop. Let me double check that.
Lewis Benson: Yeah, that's still an infinite Loop. So it doesn't like my Escape Plan here.
Lewis Benson: we can use the normal if I is less than my Ray dot length. break But we have to equal to
Lewis Benson: restart this again.
Lewis Benson: Infinite Loops are pretty common. Whenever you're kind of doing this stuff on the Fly. It looks like we still have an infinite Loop.
Lewis Benson: Let me see if we can actually see the count Happening Here.
01:40:00
Lewis Benson: We're not going to get any information from this apparently.
Lewis Benson: I'll have to manually. Do this if statement instead of the wild true? we'll do while it's less than I will come back to the break statement in a second here. I just want to make sure that we can get this infinite Loop These are pretty common whenever you're dealing with loops again.
Lewis Benson: I think everybody accounts easily once.
Lewis Benson: And I should get a refresh this now.
Lewis Benson: All right, so uncommon that
Lewis Benson: We can see I'm spinning up there so I still have a loop.
Lewis Benson: past in new array so my array is equal to new array and then we're saying if I is less than
Lewis Benson: My radar length, I never incremented. I
Lewis Benson: so that would be why we have an infinite Loop.
Lewis Benson: There we go.
Lewis Benson: And then let's log the accumulator.
Lewis Benson: So we can see that adding up each value of the array like that. So now that we have that working.
Lewis Benson: I'm going to add a plus one to this. I think at some point and I want to get that break statement going.
Lewis Benson: we can also just check for that at the end here if I is.
Lewis Benson: Less than my array dot length.
Lewis Benson: break
Lewis Benson: And I want to put this log in here just to confirm that if statement is being read. And there it is.
Lewis Benson: So again, we need to invert this now because I starts off. if it's greater equal to There we got our ending Loop. We have our values being added together.
Lewis Benson: So what I wanted to show here now is you can use the break statement to end a loop like that so I can actually say while true here. We should have the same infinite Loop. Everything's working correctly or we can put the return keyword in here now that we're inside of a function because we created this do some function. We're invoking it here. We should have the same result.
Lewis Benson: I must have messed something up.
Lewis Benson: Turn it I don't know what that was.
Lewis Benson: Looks like my browser is gonna run out of memory if I'm not careful here.
Lewis Benson: It's one of the risks of doing this while currently live on Google meet. If I let that infinite Loop run too long. My browser will use all of its resources. And it will actually crash the Google meet and I'll have to rejoin the call.
Lewis Benson: But it seems to be working correctly. Now, we have our end Loop happening and the return statement is working the same as The only difference between the two is whenever you have a return statement. Whatever you have after.
Lewis Benson: return is actually Able to be returned from this. So whenever the loop is ending we can actually return the accumulator value. Which means I no longer need to console log I can actually log the function itself.
Lewis Benson: And there I get my 15. Does anyone have any questions about this?
01:45:00
Lewis Benson: Any questions at all about the Maybe some of the syntax differences here any questions about for loop. I know this is a lot of stuff. it is confusing Loops are probably again, one of the hardest things to learn and I don't expect anyone to be a master for Loops or while loops. It takes a long time to get really good at these. And as you even seen with my fumbling here, I'm still not a professional with what the loops I'll have to think about what I'm doing sometimes slow down. It's like this needs to be going the other direction. This needs to be inverted sometimes as little things like that. It's something you're always just gonna have to practice to be more proficient But again, the more you use them the better you get with them and the more things you can do.
Lewis Benson: As you can see here, we're getting kind of advanced with what we're doing. We're doing a conditional inside of We're using a while true statement. We are adding up. Values and an array we're getting a sum total based on an array input. So we're doing quite a bit here. We have a function that we're using to add up all these numbers.
Lewis Benson: What questions do you have?
Lewis Benson: All right. I'm going to open up the assignment so we can get started on today's assignment. You'll probably have questions once you get started with this just because I didn't go through it. Like I did yesterday where it was kind of like a coat along type thing. I did go every over everything. as far as what you would need to do to solve everything within today's assignment. So again as you're working ask questions I can help I can go over any of these Concepts again and make sure you fully understand what's going on. I do want you kind of to fly a little bit solo on this one. I don't want to just give you the answers for Loops because it's one of those things that you can't learn unless you try it. So with that, let me get today's assignment week six day two instructions.
Lewis Benson: Bring those up. All right looks a little weird.
Lewis Benson: Okay, I'll have to edit that and get rid of those extra bullets. So today's objective is to apply the concepts of the four in the while loop and we're going to solve real world coding challenges. This assignment involves implementing different types of Loops to perform various tasks. And demonstrate their understanding and their use cases. part one is going to be setting up the project. I am going to edit this before. I open up the breakout rooms. Of this is our normal create your repository clone it down and then create your index.html and your script.s Don't forget to put the use strict at the top of the file. And part two is implementing the for Loop. So you're going to create an array of at least five elements inside of your script file?
Lewis Benson: And you're going to use for Loop to iterate over the array and log each element to the console. So we're not doing any dominipulation today. You can do that. If you wish if you feel pretty confident with everything and you want to build a little function to print out paragraph elements to the page go for it. Otherwise just use the console.log if you just want to focus on looping and making sure you fully understand looping today. That's perfectly fine. Whatever you're comfortable with. That's what you should do. So you're gonna iterate over your array and you're going to log each element to the console and then you're going to use a for Loop to generate.
Lewis Benson: And log a sequence for example numbers 1 to 10. don't just print out. I iterate over a sequence starting with one preferably or you can start with 10 and count by 10s. If you're feeling really comfortable with this right now do something like that something a little different. And then we're gonna get into the part of the assignment. You're going to implement a while loop that executes as long as a certain condition is true go with the prompt here. That's a really good way to make this work. Wait until a certain. Phrase or number or whatever it is. You want to type in?
Lewis Benson: Wait until that condition is met and then you can end the loop at that time. You can do this through the function using the return keyword. If you don't want to declare a function, you can use the break keyword or you can simply reassign a variable that you're comparing. Let me show that again. Where I had my prompt here and I say while the user reply is not blue. Ask them again for their user reply. So that's what that means. You'll be doing something along those lines there. I can actually take that off of the commenter. So this is a decent example again try to come up with your own prompt. or if you want to use the
01:50:00
Lewis Benson: I was going to say if you could use the input in the button, but I don't think that would work because the while loop is running so that condition won't work there. You could use an alert to interrupt it. Just use the prompt. That's easiest. implementing while loop that executes as long as a certain condition is true. This could also be the length of an array how I created that array at the bottom. Let me show that again. and we said if the length of the array is not met. Then it's going to continue to run the four Loop. This is another example of where that would work. Maybe you only want to put three items in an array and you have an array of 30 items and until the first three items are in the array your while loop will continue to run. So that is also a condition being met.
Lewis Benson: And then create a nested Loop structure and solve a complex problem. Basically, this is The Matrix you're going to iterate over a 2d array and just return the nested elements in the array to the console. You can get a little more complicated if you want with this again. I'm not expecting anyone to be experts at nested arrays and nested for Loops. It's just part of understanding the basic for loop at this time and just being familiar with it. Does anyone have any questions about today's assignment?
Lewis Benson: Is anyone like any clarification about anything?
Lewis Benson: Okay, I'm gonna do a quick edit on this and just fix this formatting because this is bothering me. Not sure how this all got on multiple lines.
Lewis Benson: So that's a little bit easier to read.
Lewis Benson: All There's no questions. I'm going to open up the breakout rooms we can get started on this. Do not hesitate to ask questions. Please don't. Feel like you're holding anyone up because you're asking questions. We can get through them only if you ask them. Also, don't forget to use your Tas schedule appointments. if you start to fall behind on assignments if you need any guidance or anything like that. So let me get these breakout rooms started.
Lewis Benson: we got one two, three, four five six seven left.
Lewis Benson: Okay, so we'll have three rooms of two. And if anyone has any questions again of invite me to your room, I can answer questions that way and I'll be around to check on you as I normally am. All right opening up the rooms now.
Meeting ended after 01:54:29 👋